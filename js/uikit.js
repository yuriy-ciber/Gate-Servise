var uikit=function(){"use strict";"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;return function(t,e){return t(e={exports:{}},e.exports),e.exports}((function(t,e){
/*! UIkit 3.4.6 | https://www.getuikit.com | (c) 2014 - 2020 YOOtheme | MIT License */
t.exports=function(){var t=Object.prototype,e=t.hasOwnProperty;function i(t,i){return e.call(t,i)}var n={},r=/([a-z\d])([A-Z])/g;function o(t){return t in n||(n[t]=t.replace(r,"$1-$2").toLowerCase()),n[t]}var s=/-(\w)/g;function a(t){return t.replace(s,u)}function u(t,e){return e?e.toUpperCase():""}function h(t){return t.length?u(0,t.charAt(0))+t.slice(1):""}var c=String.prototype,l=c.startsWith||function(t){return 0===this.lastIndexOf(t,0)};function d(t,e){return l.call(t,e)}var f=c.endsWith||function(t){return this.substr(-t.length)===t};function p(t,e){return f.call(t,e)}var g=Array.prototype,m=function(t,e){return!!~this.indexOf(t,e)},v=c.includes||m,w=g.includes||m;function b(t,e){return t&&(D(t)?v:w).call(t,e)}var x=g.findIndex||function(t){for(var e=arguments,i=0;i<this.length;i++)if(t.call(e[1],this[i],i,this))return i;return-1};function y(t,e){return x.call(t,e)}var k=Array.isArray;function $(t){return"function"==typeof t}function S(t){return null!==t&&"object"==typeof t}var I=t.toString;function T(t){return"[object Object]"===I.call(t)}function E(t){return S(t)&&t===t.window}function _(t){return S(t)&&9===t.nodeType}function C(t){return S(t)&&!!t.jquery}function A(t){return S(t)&&t.nodeType>=1}function M(t){return S(t)&&1===t.nodeType}function N(t){return I.call(t).match(/^\[object (NodeList|HTMLCollection)\]$/)}function z(t){return"boolean"==typeof t}function D(t){return"string"==typeof t}function B(t){return"number"==typeof t}function P(t){return B(t)||D(t)&&!isNaN(t-parseFloat(t))}function O(t){return!(k(t)?t.length:S(t)&&Object.keys(t).length)}function H(t){return void 0===t}function L(t){return z(t)?t:"true"===t||"1"===t||""===t||"false"!==t&&"0"!==t&&t}function F(t){var e=Number(t);return!isNaN(e)&&e}function j(t){return parseFloat(t)||0}function W(t){return A(t)?t:N(t)||C(t)?t[0]:k(t)?W(t[0]):null}function V(t){return A(t)?[t]:N(t)?g.slice.call(t):k(t)?t.map(W).filter(Boolean):C(t)?t.toArray():[]}function R(t){return E(t)?t:(t=W(t))?(_(t)?t:t.ownerDocument).defaultView:window}function q(t){return k(t)?t:D(t)?t.split(/,(?![^(]*\))/).map((function(t){return P(t)?F(t):L(t.trim())})):[t]}function Y(t){return t?p(t,"ms")?j(t):1e3*j(t):0}function U(t,e){return t===e||S(t)&&S(e)&&Object.keys(t).length===Object.keys(e).length&&J(t,(function(t,i){return t===e[i]}))}function X(t,e,i){return t.replace(new RegExp(e+"|"+i,"g"),(function(t){return t===e?i:e}))}var G=Object.assign||function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];t=Object(t);for(var r=0;r<e.length;r++){var o=e[r];if(null!==o)for(var s in o)i(o,s)&&(t[s]=o[s])}return t};function K(t){return t[t.length-1]}function J(t,e){for(var i in t)if(!1===e(t[i],i))return!1;return!0}function Z(t,e){return t.sort((function(t,i){var n=t[e];void 0===n&&(n=0);var r=i[e];return void 0===r&&(r=0),n>r?1:r>n?-1:0}))}function Q(t,e){var i=new Set;return t.filter((function(t){var n=t[e];return!i.has(n)&&(i.add(n)||!0)}))}function tt(t,e,i){return void 0===e&&(e=0),void 0===i&&(i=1),Math.min(Math.max(F(t)||0,e),i)}function et(){}function it(t,e){return t.left<e.right&&t.right>e.left&&t.top<e.bottom&&t.bottom>e.top}function nt(t,e){return t.x<=e.right&&t.x>=e.left&&t.y<=e.bottom&&t.y>=e.top}var rt={ratio:function(t,e,i){var n,r="width"===e?"height":"width";return(n={})[r]=t[e]?Math.round(i*t[r]/t[e]):t[r],n[e]=i,n},contain:function(t,e){var i=this;return J(t=G({},t),(function(n,r){return t=t[r]>e[r]?i.ratio(t,r,e[r]):t})),t},cover:function(t,e){var i=this;return J(t=this.contain(t,e),(function(n,r){return t=t[r]<e[r]?i.ratio(t,r,e[r]):t})),t}};function ot(t,e,i){if(S(e))for(var n in e)ot(t,n,e[n]);else{if(H(i))return(t=W(t))&&t.getAttribute(e);V(t).forEach((function(t){$(i)&&(i=i.call(t,ot(t,e))),null===i?at(t,e):t.setAttribute(e,i)}))}}function st(t,e){return V(t).some((function(t){return t.hasAttribute(e)}))}function at(t,e){t=V(t),e.split(" ").forEach((function(e){return t.forEach((function(t){return t.hasAttribute(e)&&t.removeAttribute(e)}))}))}function ut(t,e){for(var i=0,n=[e,"data-"+e];i<n.length;i++)if(st(t,n[i]))return ot(t,n[i])}var ht="undefined"!=typeof window,ct=ht&&/msie|trident/i.test(window.navigator.userAgent),lt=ht&&"rtl"===ot(document.documentElement,"dir"),dt=ht&&"ontouchstart"in window,ft=ht&&window.PointerEvent,pt=ht&&(dt||window.DocumentTouch&&document instanceof DocumentTouch||navigator.maxTouchPoints),gt=ft?"pointerdown":dt?"touchstart":"mousedown",mt=ft?"pointermove":dt?"touchmove":"mousemove",vt=ft?"pointerup":dt?"touchend":"mouseup",wt=ft?"pointerenter":dt?"":"mouseenter",bt=ft?"pointerleave":dt?"":"mouseleave",xt=ft?"pointercancel":"touchcancel";function yt(t,e){return W(t)||St(t,$t(t,e))}function kt(t,e){var i=V(t);return i.length&&i||It(t,$t(t,e))}function $t(t,e){return void 0===e&&(e=document),Ct(t)||_(e)?e:e.ownerDocument}function St(t,e){return W(Tt(t,e,"querySelector"))}function It(t,e){return V(Tt(t,e,"querySelectorAll"))}function Tt(t,e,i){if(void 0===e&&(e=document),!t||!D(t))return null;var n;Ct(t=t.replace(_t,"$1 *"))&&(n=[],t=function(t){return t.match(At).map((function(t){return t.replace(/,$/,"").trim()}))}(t).map((function(t,i){var r=e;if("!"===t[0]){var o=t.substr(1).trim().split(" ");r=Bt(Pt(e),o[0]),t=o.slice(1).join(" ").trim()}if("-"===t[0]){var s=t.substr(1).trim().split(" "),a=(r||e).previousElementSibling;r=zt(a,t.substr(1))?a:null,t=s.slice(1).join(" ")}return r?(r.id||(r.id="uk-"+Date.now()+i,n.push((function(){return at(r,"id")}))),"#"+Ht(r.id)+" "+t):null})).filter(Boolean).join(","),e=document);try{return e[i](t)}catch(t){return null}finally{n&&n.forEach((function(t){return t()}))}}var Et=/(^|[^\\],)\s*[!>+~-]/,_t=/([!>+~-])(?=\s+[!>+~-]|\s*$)/g;function Ct(t){return D(t)&&t.match(Et)}var At=/.*?[^\\](?:,|$)/g,Mt=ht?Element.prototype:{},Nt=Mt.matches||Mt.webkitMatchesSelector||Mt.msMatchesSelector||et;function zt(t,e){return V(t).some((function(t){return Nt.call(t,e)}))}var Dt=Mt.closest||function(t){var e=this;do{if(zt(e,t))return e}while(e=Pt(e))};function Bt(t,e){return d(e,">")&&(e=e.slice(1)),M(t)?Dt.call(t,e):V(t).map((function(t){return Bt(t,e)})).filter(Boolean)}function Pt(t){return(t=W(t))&&M(t.parentNode)&&t.parentNode}var Ot=ht&&window.CSS&&CSS.escape||function(t){return t.replace(/([^\x7f-\uFFFF\w-])/g,(function(t){return"\\"+t}))};function Ht(t){return D(t)?Ot.call(null,t):""}var Lt={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};function Ft(t){return V(t).some((function(t){return Lt[t.tagName.toLowerCase()]}))}function jt(t){return V(t).some((function(t){return t.offsetWidth||t.offsetHeight||t.getClientRects().length}))}var Wt="input,select,textarea,button";function Vt(t){return V(t).some((function(t){return zt(t,Wt)}))}function Rt(t,e){return V(t).filter((function(t){return zt(t,e)}))}function qt(t,e){return D(e)?zt(t,e)||Bt(t,e):t===e||(_(e)?e.documentElement:W(e)).contains(W(t))}function Yt(t,e){for(var i=[];t=Pt(t);)e&&!zt(t,e)||i.push(t);return i}function Ut(t,e){var i=(t=W(t))?V(t.children):[];return e?Rt(i,e):i}function Xt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var i=Qt(t),n=i[0],r=i[1],o=i[2],s=i[3],a=i[4];return n=se(n),s.length>1&&(s=ee(s)),a&&a.self&&(s=ie(s)),o&&(s=te(n,o,s)),a=ne(a),r.split(" ").forEach((function(t){return n.forEach((function(e){return e.addEventListener(t,s,a)}))})),function(){return Gt(n,r,s,a)}}function Gt(t,e,i,n){void 0===n&&(n=!1),n=ne(n),t=se(t),e.split(" ").forEach((function(e){return t.forEach((function(t){return t.removeEventListener(e,i,n)}))}))}function Kt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var i=Qt(t),n=i[0],r=i[1],o=i[2],s=i[3],a=i[4],u=i[5],h=Xt(n,r,o,(function(t){var e=!u||u(t);e&&(h(),s(t,e))}),a);return h}function Jt(t,e,i){return se(t).reduce((function(t,n){return t&&n.dispatchEvent(Zt(e,!0,!0,i))}),!0)}function Zt(t,e,i,n){if(void 0===e&&(e=!0),void 0===i&&(i=!1),D(t)){var r=document.createEvent("CustomEvent");r.initCustomEvent(t,e,i,n),t=r}return t}function Qt(t){return $(t[2])&&t.splice(2,0,!1),t}function te(t,e,i){var n=this;return function(r){t.forEach((function(t){var o=">"===e[0]?It(e,t).reverse().filter((function(t){return qt(r.target,t)}))[0]:Bt(r.target,e);o&&(r.delegate=t,r.current=o,i.call(n,r))}))}}function ee(t){return function(e){return k(e.detail)?t.apply(void 0,[e].concat(e.detail)):t(e)}}function ie(t){return function(e){if(e.target===e.currentTarget||e.target===e.current)return t.call(null,e)}}function ne(t){return t&&ct&&!z(t)?!!t.capture:t}function re(t){return t&&"addEventListener"in t}function oe(t){return re(t)?t:W(t)}function se(t){return k(t)?t.map(oe).filter(Boolean):D(t)?It(t):re(t)?[t]:V(t)}function ae(t){return"touch"===t.pointerType||!!t.touches}function ue(t){var e=t.touches,i=t.changedTouches,n=e&&e[0]||i&&i[0]||t;return{x:n.clientX,y:n.clientY}}var he=ht&&window.Promise||de,ce=function(){var t=this;this.promise=new he((function(e,i){t.reject=i,t.resolve=e}))},le=ht&&window.setImmediate||setTimeout;function de(t){this.state=2,this.value=void 0,this.deferred=[];var e=this;try{t((function(t){e.resolve(t)}),(function(t){e.reject(t)}))}catch(t){e.reject(t)}}de.reject=function(t){return new de((function(e,i){i(t)}))},de.resolve=function(t){return new de((function(e,i){e(t)}))},de.all=function(t){return new de((function(e,i){var n=[],r=0;function o(i){return function(o){n[i]=o,(r+=1)===t.length&&e(n)}}0===t.length&&e(n);for(var s=0;s<t.length;s+=1)de.resolve(t[s]).then(o(s),i)}))},de.race=function(t){return new de((function(e,i){for(var n=0;n<t.length;n+=1)de.resolve(t[n]).then(e,i)}))};var fe=de.prototype;function pe(t,e){return new he((function(i,n){var r=G({data:null,method:"GET",headers:{},xhr:new XMLHttpRequest,beforeSend:et,responseType:""},e);r.beforeSend(r);var o=r.xhr;for(var s in r)if(s in o)try{o[s]=r[s]}catch(t){}for(var a in o.open(r.method.toUpperCase(),t),r.headers)o.setRequestHeader(a,r.headers[a]);Xt(o,"load",(function(){0===o.status||o.status>=200&&o.status<300||304===o.status?i(o):n(G(Error(o.statusText),{xhr:o,status:o.status}))})),Xt(o,"error",(function(){return n(G(Error("Network Error"),{xhr:o}))})),Xt(o,"timeout",(function(){return n(G(Error("Network Timeout"),{xhr:o}))})),o.send(r.data)}))}function ge(t,e,i){return new he((function(n,r){var o=new Image;o.onerror=r,o.onload=function(){return n(o)},i&&(o.sizes=i),e&&(o.srcset=e),o.src=t}))}function me(t){if("loading"===document.readyState)var e=Xt(document,"DOMContentLoaded",(function(){e(),t()}));else t()}function ve(t,e){return e?V(t).indexOf(W(e)):Ut(Pt(t)).indexOf(t)}function we(t,e,i,n){void 0===i&&(i=0),void 0===n&&(n=!1);var r=(e=V(e)).length;return t=P(t)?F(t):"next"===t?i+1:"previous"===t?i-1:ve(e,t),n?tt(t,0,r-1):(t%=r)<0?t+r:t}function be(t){return(t=ze(t)).innerHTML="",t}function xe(t,e){return t=ze(t),H(e)?t.innerHTML:ye(t.hasChildNodes()?be(t):t,e)}function ye(t,e){return t=ze(t),Se(e,(function(e){return t.appendChild(e)}))}function ke(t,e){return t=ze(t),Se(e,(function(e){return t.parentNode.insertBefore(e,t)}))}function $e(t,e){return t=ze(t),Se(e,(function(e){return t.nextSibling?ke(t.nextSibling,e):ye(t.parentNode,e)}))}function Se(t,e){return(t=D(t)?Me(t):t)?"length"in t?V(t).map(e):e(t):null}function Ie(t){V(t).map((function(t){return t.parentNode&&t.parentNode.removeChild(t)}))}function Te(t,e){for(e=W(ke(t,e));e.firstChild;)e=e.firstChild;return ye(e,t),e}function Ee(t,e){return V(V(t).map((function(t){return t.hasChildNodes?Te(V(t.childNodes),e):ye(t,e)})))}function _e(t){V(t).map(Pt).filter((function(t,e,i){return i.indexOf(t)===e})).forEach((function(t){ke(t,t.childNodes),Ie(t)}))}fe.resolve=function(t){var e=this;if(2===e.state){if(t===e)throw new TypeError("Promise settled with itself.");var i=!1;try{var n=t&&t.then;if(null!==t&&S(t)&&$(n))return void n.call(t,(function(t){i||e.resolve(t),i=!0}),(function(t){i||e.reject(t),i=!0}))}catch(t){return void(i||e.reject(t))}e.state=0,e.value=t,e.notify()}},fe.reject=function(t){if(2===this.state){if(t===this)throw new TypeError("Promise settled with itself.");this.state=1,this.value=t,this.notify()}},fe.notify=function(){var t=this;le((function(){if(2!==t.state)for(;t.deferred.length;){var e=t.deferred.shift(),i=e[0],n=e[1],r=e[2],o=e[3];try{0===t.state?$(i)?r(i.call(void 0,t.value)):r(t.value):1===t.state&&($(n)?r(n.call(void 0,t.value)):o(t.value))}catch(t){o(t)}}}))},fe.then=function(t,e){var i=this;return new de((function(n,r){i.deferred.push([t,e,n,r]),i.notify()}))},fe.catch=function(t){return this.then(void 0,t)};var Ce=/^\s*<(\w+|!)[^>]*>/,Ae=/^<(\w+)\s*\/?>(?:<\/\1>)?$/;function Me(t){var e=Ae.exec(t);if(e)return document.createElement(e[1]);var i=document.createElement("div");return Ce.test(t)?i.insertAdjacentHTML("beforeend",t.trim()):i.textContent=t,i.childNodes.length>1?V(i.childNodes):i.firstChild}function Ne(t,e){if(M(t))for(e(t),t=t.firstElementChild;t;){var i=t.nextElementSibling;Ne(t,e),t=i}}function ze(t,e){return D(t)?Be(t)?W(Me(t)):St(t,e):W(t)}function De(t,e){return D(t)?Be(t)?V(Me(t)):It(t,e):V(t)}function Be(t){return"<"===t[0]||t.match(/^\s*</)}function Pe(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];We(t,e,"add")}function Oe(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];We(t,e,"remove")}function He(t,e){ot(t,"class",(function(t){return(t||"").replace(new RegExp("\\b"+e+"\\b","g"),"")}))}function Le(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];e[0]&&Oe(t,e[0]),e[1]&&Pe(t,e[1])}function Fe(t,e){return e&&V(t).some((function(t){return t.classList.contains(e.split(" ")[0])}))}function je(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];if(e.length){var n=D(K(e=Ve(e)))?[]:e.pop();e=e.filter(Boolean),V(t).forEach((function(t){for(var i=t.classList,r=0;r<e.length;r++)Re.Force?i.toggle.apply(i,[e[r]].concat(n)):i[(H(n)?!i.contains(e[r]):n)?"add":"remove"](e[r])}))}}function We(t,e,i){(e=Ve(e).filter(Boolean)).length&&V(t).forEach((function(t){var n=t.classList;Re.Multiple?n[i].apply(n,e):e.forEach((function(t){return n[i](t)}))}))}function Ve(t){return t.reduce((function(t,e){return t.concat.call(t,D(e)&&b(e," ")?e.trim().split(" "):e)}),[])}var Re={get Multiple(){return this.get("_multiple")},get Force(){return this.get("_force")},get:function(t){if(!i(this,t)){var e=document.createElement("_").classList;e.add("a","b"),e.toggle("c",!1),this._multiple=e.contains("b"),this._force=!e.contains("c")}return this[t]}},qe={"animation-iteration-count":!0,"column-count":!0,"fill-opacity":!0,"flex-grow":!0,"flex-shrink":!0,"font-weight":!0,"line-height":!0,opacity:!0,order:!0,orphans:!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,widows:!0,"z-index":!0,zoom:!0};function Ye(t,e,i){return V(t).map((function(t){if(D(e)){if(e=Ze(e),H(i))return Xe(t,e);i||B(i)?t.style[e]=P(i)&&!qe[e]?i+"px":i:t.style.removeProperty(e)}else{if(k(e)){var n=Ue(t);return e.reduce((function(t,e){return t[e]=n[Ze(e)],t}),{})}S(e)&&J(e,(function(e,i){return Ye(t,i,e)}))}return t}))[0]}function Ue(t,e){return(t=W(t)).ownerDocument.defaultView.getComputedStyle(t,e)}function Xe(t,e,i){return Ue(t,i)[e]}var Ge={};function Ke(t){var e=document.documentElement;if(!ct)return Ue(e).getPropertyValue("--uk-"+t);if(!(t in Ge)){var i=ye(e,document.createElement("div"));Pe(i,"uk-"+t),Ge[t]=Xe(i,"content",":before").replace(/^["'](.*)["']$/,"$1"),Ie(i)}return Ge[t]}var Je={};function Ze(t){var e=Je[t];return e||(e=Je[t]=function(t){t=o(t);var e=document.documentElement.style;if(t in e)return t;for(var i,n=Qe.length;n--;)if((i="-"+Qe[n]+"-"+t)in e)return i}(t)||t),e}var Qe=["webkit","moz","ms"];function ti(t,e,i,n){return void 0===i&&(i=400),void 0===n&&(n="linear"),he.all(V(t).map((function(t){return new he((function(r,o){for(var s in e){var a=Ye(t,s);""===a&&Ye(t,s,a)}var u=setTimeout((function(){return Jt(t,"transitionend")}),i);Kt(t,"transitionend transitioncanceled",(function(e){var i=e.type;clearTimeout(u),Oe(t,"uk-transition"),Ye(t,{transitionProperty:"",transitionDuration:"",transitionTimingFunction:""}),"transitioncanceled"===i?o():r()}),{self:!0}),Pe(t,"uk-transition"),Ye(t,G({transitionProperty:Object.keys(e).map(Ze).join(","),transitionDuration:i+"ms",transitionTimingFunction:n},e))}))})))}var ei={start:ti,stop:function(t){return Jt(t,"transitionend"),he.resolve()},cancel:function(t){Jt(t,"transitioncanceled")},inProgress:function(t){return Fe(t,"uk-transition")}};function ii(t,e,i,n,r){return void 0===i&&(i=200),he.all(V(t).map((function(t){return new he((function(o,s){function a(){Ye(t,"animationDuration",""),He(t,"uk-animation-\\S*")}a(),Kt(t,"animationend animationcancel",(function(t){"animationcancel"===t.type?s():o(),a()}),{self:!0}),Ye(t,"animationDuration",i+"ms"),Pe(t,e,"uk-animation-"+(r?"leave":"enter")),d(e,"uk-animation-")&&Pe(t,n&&"uk-transform-origin-"+n,r&&"uk-animation-reverse")}))})))}var ni=new RegExp("uk-animation-(enter|leave)"),ri={in:function(t,e,i,n){return ii(t,e,i,n,!1)},out:function(t,e,i,n){return ii(t,e,i,n,!0)},inProgress:function(t){return ni.test(ot(t,"class"))},cancel:function(t){Jt(t,"animationcancel")}},oi={width:["x","left","right"],height:["y","top","bottom"]};function si(t,e,i,n,r,o,s,a){i=mi(i),n=mi(n);var u={element:i,target:n};if(!t||!e)return u;var h=ui(t),c=ui(e),l=c;if(gi(l,i,h,-1),gi(l,n,c,1),r=vi(r,h.width,h.height),o=vi(o,c.width,c.height),r.x+=o.x,r.y+=o.y,l.left+=r.x,l.top+=r.y,s){var d=[ui(R(t))];a&&d.unshift(ui(a)),J(oi,(function(t,e){var o=t[0],a=t[1],f=t[2];(!0===s||b(s,o))&&d.some((function(t){var s=i[o]===a?-h[e]:i[o]===f?h[e]:0,d=n[o]===a?c[e]:n[o]===f?-c[e]:0;if(l[a]<t[a]||l[a]+h[e]>t[f]){var p=h[e]/2,g="center"===n[o]?-c[e]/2:0;return"center"===i[o]&&(m(p,g)||m(-p,-g))||m(s,d)}function m(i,n){var s=l[a]+i+n-2*r[o];if(s>=t[a]&&s+h[e]<=t[f])return l[a]=s,["element","target"].forEach((function(t){u[t][o]=i?u[t][o]===oi[e][1]?oi[e][2]:oi[e][1]:u[t][o]})),!0}}))}))}return ai(t,l),u}function ai(t,e){if(!e)return ui(t);var i=ai(t),n=Ye(t,"position");["left","top"].forEach((function(r){if(r in e){var o=Ye(t,r);Ye(t,r,e[r]-i[r]+j("absolute"===n&&"auto"===o?hi(t)[r]:o))}}))}function ui(t){if(!t)return{};var e,i,n=R(t),r=n.pageYOffset,o=n.pageXOffset;if(E(t)){var s=t.innerHeight,a=t.innerWidth;return{top:r,left:o,height:s,width:a,bottom:r+s,right:o+a}}jt(t)||"none"!==Ye(t,"display")||(e=ot(t,"style"),i=ot(t,"hidden"),ot(t,{style:(e||"")+";display:block !important;",hidden:null}));var u=(t=W(t)).getBoundingClientRect();return H(e)||ot(t,{style:e,hidden:i}),{height:u.height,width:u.width,top:u.top+r,left:u.left+o,bottom:u.bottom+r,right:u.right+o}}function hi(t,e){e=e||W(t).offsetParent||R(t).document.documentElement;var i=ai(t),n=ai(e);return{top:i.top-n.top-j(Ye(e,"borderTopWidth")),left:i.left-n.left-j(Ye(e,"borderLeftWidth"))}}function ci(t){var e=[0,0];t=W(t);do{if(e[0]+=t.offsetTop,e[1]+=t.offsetLeft,"fixed"===Ye(t,"position")){var i=R(t);return e[0]+=i.pageYOffset,e[1]+=i.pageXOffset,e}}while(t=t.offsetParent);return e}var li=fi("height"),di=fi("width");function fi(t){var e=h(t);return function(i,n){if(H(n)){if(E(i))return i["inner"+e];if(_(i)){var r=i.documentElement;return Math.max(r["offset"+e],r["scroll"+e])}return(n="auto"===(n=Ye(i=W(i),t))?i["offset"+e]:j(n)||0)-pi(i,t)}Ye(i,t,n||0===n?+n+pi(i,t)+"px":"")}}function pi(t,e,i){return void 0===i&&(i="border-box"),Ye(t,"boxSizing")===i?oi[e].slice(1).map(h).reduce((function(e,i){return e+j(Ye(t,"padding"+i))+j(Ye(t,"border"+i+"Width"))}),0):0}function gi(t,e,i,n){J(oi,(function(r,o){var s=r[0],a=r[1],u=r[2];e[s]===u?t[a]+=i[o]*n:"center"===e[s]&&(t[a]+=i[o]*n/2)}))}function mi(t){var e=/left|center|right/,i=/top|center|bottom/;return 1===(t=(t||"").split(" ")).length&&(t=e.test(t[0])?t.concat("center"):i.test(t[0])?["center"].concat(t):["center","center"]),{x:e.test(t[0])?t[0]:"center",y:i.test(t[1])?t[1]:"center"}}function vi(t,e,i){var n=(t||"").split(" "),r=n[0],o=n[1];return{x:r?j(r)*(p(r,"%")?e/100:1):0,y:o?j(o)*(p(o,"%")?i/100:1):0}}function wi(t){switch(t){case"left":return"right";case"right":return"left";case"top":return"bottom";case"bottom":return"top";default:return t}}function bi(t,e,i){return void 0===e&&(e="width"),void 0===i&&(i=window),P(t)?+t:p(t,"vh")?xi(li(R(i)),t):p(t,"vw")?xi(di(R(i)),t):p(t,"%")?xi(ui(i)[e],t):j(t)}function xi(t,e){return t*j(e)/100}var yi={reads:[],writes:[],read:function(t){return this.reads.push(t),$i(),t},write:function(t){return this.writes.push(t),$i(),t},clear:function(t){return Ii(this.reads,t)||Ii(this.writes,t)},flush:ki};function ki(t){void 0===t&&(t=1),Si(yi.reads),Si(yi.writes.splice(0,yi.writes.length)),yi.scheduled=!1,(yi.reads.length||yi.writes.length)&&$i(t+1)}function $i(t){if(!yi.scheduled){if(yi.scheduled=!0,t>5)throw new Error("Maximum recursion limit reached.");t?he.resolve().then((function(){return ki(t)})):requestAnimationFrame((function(){return ki()}))}}function Si(t){for(var e;e=t.shift();)e()}function Ii(t,e){var i=t.indexOf(e);return!!~i&&!!t.splice(i,1)}function Ti(){}Ti.prototype={positions:[],init:function(){var t,e=this;this.positions=[],this.unbind=Xt(document,"mousemove",(function(e){return t=ue(e)})),this.interval=setInterval((function(){t&&(e.positions.push(t),e.positions.length>5&&e.positions.shift())}),50)},cancel:function(){this.unbind&&this.unbind(),this.interval&&clearInterval(this.interval)},movesTo:function(t){if(this.positions.length<2)return!1;var e=t.getBoundingClientRect(),i=e.left,n=e.right,r=e.top,o=e.bottom,s=this.positions[0],a=K(this.positions),u=[s,a];return!nt(a,e)&&[[{x:i,y:r},{x:n,y:o}],[{x:i,y:o},{x:n,y:r}]].some((function(t){var i=function(t,e){var i=t[0],n=i.x,r=i.y,o=t[1],s=o.x,a=o.y,u=e[0],h=u.x,c=u.y,l=e[1],d=l.x,f=l.y,p=(f-c)*(s-n)-(d-h)*(a-r);if(0===p)return!1;var g=((d-h)*(r-c)-(f-c)*(n-h))/p;return!(g<0)&&{x:n+g*(s-n),y:r+g*(a-r)}}(u,t);return i&&nt(i,e)}))}};var Ei={};function _i(t,e,i){return Ei.computed($(t)?t.call(i,i):t,$(e)?e.call(i,i):e)}function Ci(t,e){return t=t&&!k(t)?[t]:t,e?t?t.concat(e):k(e)?e:[e]:t}function Ai(t,e){return H(e)?t:e}function Mi(t,e,n){var r={};if($(e)&&(e=e.options),e.extends&&(t=Mi(t,e.extends,n)),e.mixins)for(var o=0,s=e.mixins.length;o<s;o++)t=Mi(t,e.mixins[o],n);for(var a in t)h(a);for(var u in e)i(t,u)||h(u);function h(i){r[i]=(Ei[i]||Ai)(t[i],e[i],n)}return r}function Ni(t,e){var i;void 0===e&&(e=[]);try{return t?d(t,"{")?JSON.parse(t):e.length&&!b(t,":")?((i={})[e[0]]=t,i):t.split(";").reduce((function(t,e){var i=e.split(/:(.*)/),n=i[0],r=i[1];return n&&!H(r)&&(t[n.trim()]=r.trim()),t}),{}):{}}catch(t){return{}}}Ei.events=Ei.created=Ei.beforeConnect=Ei.connected=Ei.beforeDisconnect=Ei.disconnected=Ei.destroy=Ci,Ei.args=function(t,e){return!1!==e&&Ci(e||t)},Ei.update=function(t,e){return Z(Ci(t,$(e)?{read:e}:e),"order")},Ei.props=function(t,e){return k(e)&&(e=e.reduce((function(t,e){return t[e]=String,t}),{})),Ei.methods(t,e)},Ei.computed=Ei.methods=function(t,e){return e?t?G({},t,e):e:t},Ei.data=function(t,e,i){return i?_i(t,e,i):e?t?function(i){return _i(t,e,i)}:e:t};var zi=0,Di=function(t){this.id=++zi,this.el=W(t)};function Bi(t,e){try{t.contentWindow.postMessage(JSON.stringify(G({event:"command"},e)),"*")}catch(t){}}function Pi(t,e,i){if(void 0===e&&(e=0),void 0===i&&(i=0),!jt(t))return!1;var n=Wi(t);return n.every((function(r,o){var s=ai(n[o+1]||t),a=ai(ji(r)),u=a.top,h=a.left,c=a.bottom,l=a.right;return it(s,{top:u-e,left:h-i,bottom:c+e,right:l+i})}))}function Oi(t,e){(t=E(t)||_(t)?Vi(t):W(t)).scrollTop=e}function Hi(t,e){void 0===e&&(e={});var i=e.offset;if(void 0===i&&(i=0),jt(t)){for(var n=Wi(t).concat(t),r=he.resolve(),o=function(t){r=r.then((function(){return new he((function(e){var r,o=n[t],s=n[t+1],a=o.scrollTop,u=Math.ceil(hi(s,ji(o)).top-i),h=(r=Math.abs(u),40*Math.pow(r,.375)),c=Date.now(),l=function(){var t,i=(t=tt((Date.now()-c)/h),.5*(1-Math.cos(Math.PI*t)));Oi(o,a+u*i),1!==i?requestAnimationFrame(l):e()};l()}))}))},s=0;s<n.length-1;s++)o(s);return r}}function Li(t,e){if(void 0===e&&(e=0),!jt(t))return 0;var i=K(Fi(t)),n=i.scrollHeight,r=i.scrollTop,o=ai(ji(i)).height,s=ci(t)[0]-r-ci(i)[0],a=Math.min(o,s+r);return tt(-1*(s-a)/Math.min(ai(t).height+e+a,n-(s+r),n-o))}function Fi(t,e){void 0===e&&(e=/auto|scroll/);var i=Vi(t),n=Yt(t).filter((function(t){return t===i||e.test(Ye(t,"overflow"))&&t.scrollHeight>Math.round(ai(t).height)})).reverse();return n.length?n:[i]}function ji(t){return t===Vi(t)?window:t}function Wi(t){return Fi(t,/auto|scroll|hidden/)}function Vi(t){var e=R(t).document;return e.scrollingElement||e.documentElement}Di.prototype.isVideo=function(){return this.isYoutube()||this.isVimeo()||this.isHTML5()},Di.prototype.isHTML5=function(){return"VIDEO"===this.el.tagName},Di.prototype.isIFrame=function(){return"IFRAME"===this.el.tagName},Di.prototype.isYoutube=function(){return this.isIFrame()&&!!this.el.src.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/)},Di.prototype.isVimeo=function(){return this.isIFrame()&&!!this.el.src.match(/vimeo\.com\/video\/.*/)},Di.prototype.enableApi=function(){var t=this;if(this.ready)return this.ready;var e,i=this.isYoutube(),n=this.isVimeo();return i||n?this.ready=new he((function(r){var o;Kt(t.el,"load",(function(){if(i){var n=function(){return Bi(t.el,{event:"listening",id:t.id})};e=setInterval(n,100),n()}})),(o=function(e){return i&&e.id===t.id&&"onReady"===e.event||n&&Number(e.player_id)===t.id},new he((function(t){return Kt(window,"message",(function(e,i){return t(i)}),!1,(function(t){var e=t.data;if(e&&D(e)){try{e=JSON.parse(e)}catch(t){return}return e&&o(e)}}))}))).then((function(){r(),e&&clearInterval(e)})),ot(t.el,"src",t.el.src+(b(t.el.src,"?")?"&":"?")+(i?"enablejsapi=1":"api=1&player_id="+t.id))})):he.resolve()},Di.prototype.play=function(){var t=this;if(this.isVideo())if(this.isIFrame())this.enableApi().then((function(){return Bi(t.el,{func:"playVideo",method:"play"})}));else if(this.isHTML5())try{var e=this.el.play();e&&e.catch(et)}catch(t){}},Di.prototype.pause=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then((function(){return Bi(t.el,{func:"pauseVideo",method:"pause"})})):this.isHTML5()&&this.el.pause())},Di.prototype.mute=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then((function(){return Bi(t.el,{func:"mute",method:"setVolume",value:0})})):this.isHTML5()&&(this.el.muted=!0,ot(this.el,"muted","")))};var Ri=ht&&window.IntersectionObserver||function(){function t(t,e){var i=this;void 0===e&&(e={});var n=e.rootMargin;void 0===n&&(n="0 0"),this.targets=[];var r,o=(n||"0 0").split(" ").map(j),s=o[0],a=o[1];this.offsetTop=s,this.offsetLeft=a,this.apply=function(){r||(r=requestAnimationFrame((function(){return setTimeout((function(){var e=i.takeRecords();e.length&&t(e,i),r=!1}))})))},this.off=Xt(window,"scroll resize load",this.apply,{passive:!0,capture:!0})}return t.prototype.takeRecords=function(){var t=this;return this.targets.filter((function(e){var i=Pi(e.target,t.offsetTop,t.offsetLeft);if(null===e.isIntersecting||i^e.isIntersecting)return e.isIntersecting=i,!0}))},t.prototype.observe=function(t){this.targets.push({target:t,isIntersecting:null}),this.apply()},t.prototype.disconnect=function(){this.targets=[],this.off()},t}();function qi(t){return!(!d(t,"uk-")&&!d(t,"data-uk-"))&&a(t.replace("data-uk-","").replace("uk-",""))}var Yi=function(t){this._init(t)};Yi.util=Object.freeze({__proto__:null,ajax:pe,getImage:ge,transition:ti,Transition:ei,animate:ii,Animation:ri,attr:ot,hasAttr:st,removeAttr:at,data:ut,addClass:Pe,removeClass:Oe,removeClasses:He,replaceClass:Le,hasClass:Fe,toggleClass:je,positionAt:si,offset:ai,position:hi,offsetPosition:ci,height:li,width:di,boxModelAdjust:pi,flipPosition:wi,toPx:bi,ready:me,index:ve,getIndex:we,empty:be,html:xe,prepend:function(t,e){return(t=ze(t)).hasChildNodes()?Se(e,(function(e){return t.insertBefore(e,t.firstChild)})):ye(t,e)},append:ye,before:ke,after:$e,remove:Ie,wrapAll:Te,wrapInner:Ee,unwrap:_e,fragment:Me,apply:Ne,$:ze,$$:De,inBrowser:ht,isIE:ct,isRtl:lt,hasTouch:pt,pointerDown:gt,pointerMove:mt,pointerUp:vt,pointerEnter:wt,pointerLeave:bt,pointerCancel:xt,on:Xt,off:Gt,once:Kt,trigger:Jt,createEvent:Zt,toEventTargets:se,isTouch:ae,getEventPos:ue,fastdom:yi,isVoidElement:Ft,isVisible:jt,selInput:Wt,isInput:Vt,filter:Rt,within:qt,parents:Yt,children:Ut,hasOwn:i,hyphenate:o,camelize:a,ucfirst:h,startsWith:d,endsWith:p,includes:b,findIndex:y,isArray:k,isFunction:$,isObject:S,isPlainObject:T,isWindow:E,isDocument:_,isJQuery:C,isNode:A,isElement:M,isNodeCollection:N,isBoolean:z,isString:D,isNumber:B,isNumeric:P,isEmpty:O,isUndefined:H,toBoolean:L,toNumber:F,toFloat:j,toNode:W,toNodes:V,toWindow:R,toList:q,toMs:Y,isEqual:U,swap:X,assign:G,last:K,each:J,sortBy:Z,uniqueBy:Q,clamp:tt,noop:et,intersectRect:it,pointInRect:nt,Dimensions:rt,MouseTracker:Ti,mergeOptions:Mi,parseOptions:Ni,Player:Di,Promise:he,Deferred:ce,IntersectionObserver:Ri,query:yt,queryAll:kt,find:St,findAll:It,matches:zt,closest:Bt,parent:Pt,escape:Ht,css:Ye,getStyles:Ue,getStyle:Xe,getCssVar:Ke,propName:Ze,isInView:Pi,scrollTop:Oi,scrollIntoView:Hi,scrolledOver:Li,scrollParents:Fi,getViewport:ji}),Yi.data="__uikit__",Yi.prefix="uk-",Yi.options={},Yi.version="3.4.6",function(t){var e,i=t.data;function n(t,e){if(t)for(var i in t)t[i]._connected&&t[i]._callUpdate(e)}t.use=function(t){if(!t.installed)return t.call(null,this),t.installed=!0,this},t.mixin=function(e,i){(i=(D(i)?t.component(i):i)||this).options=Mi(i.options,e)},t.extend=function(t){t=t||{};var e=function(t){this._init(t)};return(e.prototype=Object.create(this.prototype)).constructor=e,e.options=Mi(this.options,t),e.super=this,e.extend=this.extend,e},t.update=function(t,e){Yt(t=t?W(t):document.body).reverse().forEach((function(t){return n(t[i],e)})),Ne(t,(function(t){return n(t[i],e)}))},Object.defineProperty(t,"container",{get:function(){return e||document.body},set:function(t){e=ze(t)}})}(Yi),function(t){t.prototype._callHook=function(t){var e=this,i=this.$options[t];i&&i.forEach((function(t){return t.call(e)}))},t.prototype._callConnected=function(){this._connected||(this._data={},this._computeds={},this._frames={reads:{},writes:{}},this._initProps(),this._callHook("beforeConnect"),this._connected=!0,this._initEvents(),this._initObserver(),this._callHook("connected"),this._callUpdate())},t.prototype._callDisconnected=function(){this._connected&&(this._callHook("beforeDisconnect"),this._observer&&(this._observer.disconnect(),this._observer=null),this._unbindEvents(),this._callHook("disconnected"),this._connected=!1)},t.prototype._callUpdate=function(t){var e=this;void 0===t&&(t="update");var i=t.type||t;b(["update","resize"],i)&&this._callWatches();var n=this.$options.update,r=this._frames,o=r.reads,s=r.writes;n&&n.forEach((function(t,n){var r=t.read,a=t.write,u=t.events;("update"===i||b(u,i))&&(r&&!b(yi.reads,o[n])&&(o[n]=yi.read((function(){var t=e._connected&&r.call(e,e._data,i);!1===t&&a?yi.clear(s[n]):T(t)&&G(e._data,t)}))),a&&!b(yi.writes,s[n])&&(s[n]=yi.write((function(){return e._connected&&a.call(e,e._data,i)}))))}))},t.prototype._callWatches=function(){var t=this,e=this._frames;if(!e._watch){var n=!i(e,"_watch");e._watch=yi.read((function(){if(t._connected){var r=t,o=r.$options.computed,s=r._computeds;for(var a in o){var u=i(s,a),h=s[a];delete s[a];var c=o[a],l=c.watch,d=c.immediate;l&&(n&&d||u&&!U(h,t[a]))&&l.call(t,t[a],h)}e._watch=null}}))}}}(Yi),function(t){var e=0;function n(t,e){var i={},n=t.args;void 0===n&&(n=[]);var r=t.props;void 0===r&&(r={});var s=t.el;if(!r)return i;for(var u in r){var c=o(u),l=ut(s,c);H(l)||(l=r[u]===Boolean&&""===l||h(r[u],l),("target"!==c||l&&!d(l,"_"))&&(i[u]=l))}var f=Ni(ut(s,e),n);for(var p in f){var g=a(p);void 0!==r[g]&&(i[g]=h(r[g],f[p]))}return i}function r(t,e,n){Object.defineProperty(t,e,{enumerable:!0,get:function(){var r=t._computeds,o=t.$props,s=t.$el;return i(r,e)||(r[e]=(n.get||n).call(t,o,s)),r[e]},set:function(i){var r=t._computeds;r[e]=n.set?n.set.call(t,i):i,H(r[e])&&delete r[e]}})}function s(t,e,i){T(e)||(e={name:i,handler:e});var n=e.name,r=e.el,o=e.handler,a=e.capture,u=e.passive,h=e.delegate,c=e.filter,l=e.self;r=$(r)?r.call(t):r||t.$el,k(r)?r.forEach((function(n){return s(t,G({},e,{el:n}),i)})):!r||c&&!c.call(t)||t._events.push(Xt(r,n,h?D(h)?h:h.call(t):null,D(o)?t[o]:o.bind(t),{passive:u,capture:a,self:l}))}function u(t,e){return t.every((function(t){return!t||!i(t,e)}))}function h(t,e){return t===Boolean?L(e):t===Number?F(e):"list"===t?q(e):t?t(e):e}t.prototype._init=function(t){(t=t||{}).data=function(t,e){var i=t.data,n=(t.el,e.args),r=e.props;if(void 0===r&&(r={}),i=k(i)?O(n)?void 0:i.slice(0,n.length).reduce((function(t,e,i){return T(e)?G(t,e):t[n[i]]=e,t}),{}):i)for(var o in i)H(i[o])?delete i[o]:i[o]=r[o]?h(r[o],i[o]):i[o];return i}(t,this.constructor.options),this.$options=Mi(this.constructor.options,t,this),this.$el=null,this.$props={},this._uid=e++,this._initData(),this._initMethods(),this._initComputeds(),this._callHook("created"),t.el&&this.$mount(t.el)},t.prototype._initData=function(){var t=this.$options.data;for(var e in void 0===t&&(t={}),t)this.$props[e]=this[e]=t[e]},t.prototype._initMethods=function(){var t=this.$options.methods;if(t)for(var e in t)this[e]=t[e].bind(this)},t.prototype._initComputeds=function(){var t=this.$options.computed;if(this._computeds={},t)for(var e in t)r(this,e,t[e])},t.prototype._initProps=function(t){var e;for(e in t=t||n(this.$options,this.$name))H(t[e])||(this.$props[e]=t[e]);var i=[this.$options.computed,this.$options.methods];for(e in this.$props)e in t&&u(i,e)&&(this[e]=this.$props[e])},t.prototype._initEvents=function(){var t=this;this._events=[];var e=this.$options.events;e&&e.forEach((function(e){if(i(e,"handler"))s(t,e);else for(var n in e)s(t,e[n],n)}))},t.prototype._unbindEvents=function(){this._events.forEach((function(t){return t()})),delete this._events},t.prototype._initObserver=function(){var t=this,e=this.$options,i=e.attrs,r=e.props,s=e.el;if(!this._observer&&r&&!1!==i){i=k(i)?i:Object.keys(r),this._observer=new MutationObserver((function(e){var r=n(t.$options,t.$name);e.some((function(e){var n=e.attributeName.replace("data-","");return(n===t.$name?i:[a(n)]).some((function(e){return!H(r[e])&&r[e]!==t.$props[e]}))}))&&t.$reset()}));var u=i.map((function(t){return o(t)})).concat(this.$name);this._observer.observe(s,{attributes:!0,attributeFilter:u.concat(u.map((function(t){return"data-"+t})))})}}}(Yi),function(t){var e=t.data,i={};t.component=function(e,n){var r=o(e);if(e=a(r),!n)return T(i[e])&&(i[e]=t.extend(i[e])),i[e];t[e]=function(i,n){for(var r=arguments.length,o=Array(r);r--;)o[r]=arguments[r];var s=t.component(e);return s.options.functional?new s({data:T(i)?i:[].concat(o)}):i?De(i).map(a)[0]:a(i);function a(i){var r=t.getComponent(i,e);if(r){if(!n)return r;r.$destroy()}return new s({el:i,data:n})}};var s=T(n)?G({},n):n.options;return s.name=e,s.install&&s.install(t,s,e),t._initialized&&!s.functional&&yi.read((function(){return t[e]("[uk-"+r+"],[data-uk-"+r+"]")})),i[e]=T(n)?s:n},t.getComponents=function(t){return t&&t[e]||{}},t.getComponent=function(e,i){return t.getComponents(e)[i]},t.connect=function(n){if(n[e])for(var r in n[e])n[e][r]._callConnected();for(var o=0;o<n.attributes.length;o++){var s=qi(n.attributes[o].name);s&&s in i&&t[s](n)}},t.disconnect=function(t){for(var i in t[e])t[e][i]._callDisconnected()}}(Yi),function(t){var e=t.data;t.prototype.$create=function(e,i,n){return t[e](i,n)},t.prototype.$mount=function(t){var i=this.$options.name;t[e]||(t[e]={}),t[e][i]||(t[e][i]=this,this.$el=this.$options.el=this.$options.el||t,qt(t,document)&&this._callConnected())},t.prototype.$reset=function(){this._callDisconnected(),this._callConnected()},t.prototype.$destroy=function(t){void 0===t&&(t=!1);var i=this.$options,n=i.el,r=i.name;n&&this._callDisconnected(),this._callHook("destroy"),n&&n[e]&&(delete n[e][r],O(n[e])||delete n[e],t&&Ie(this.$el))},t.prototype.$emit=function(t){this._callUpdate(t)},t.prototype.$update=function(e,i){void 0===e&&(e=this.$el),t.update(e,i)},t.prototype.$getComponent=t.getComponent;var i={};Object.defineProperties(t.prototype,{$container:Object.getOwnPropertyDescriptor(t,"container"),$name:{get:function(){var e=this.$options.name;return i[e]||(i[e]=t.prefix+o(e)),i[e]}}})}(Yi);var Ui={connected:function(){!Fe(this.$el,this.$name)&&Pe(this.$el,this.$name)}},Xi={props:{cls:Boolean,animation:"list",duration:Number,origin:String,transition:String},data:{cls:!1,animation:[!1],duration:200,origin:!1,transition:"linear",initProps:{overflow:"",height:"",paddingTop:"",paddingBottom:"",marginTop:"",marginBottom:""},hideProps:{overflow:"hidden",height:0,paddingTop:0,paddingBottom:0,marginTop:0,marginBottom:0}},computed:{hasAnimation:function(t){return!!t.animation[0]},hasTransition:function(t){var e=t.animation;return this.hasAnimation&&!0===e[0]}},methods:{toggleElement:function(t,e,i){var n=this;return he.all(V(t).map((function(t){return new he((function(r){return n._toggleElement(t,e,i).then(r,et)}))})))},isToggled:function(t){var e=V(t||this.$el);return this.cls?Fe(e,this.cls.split(" ")[0]):!st(e,"hidden")},updateAria:function(t){!1===this.cls&&ot(t,"aria-hidden",!this.isToggled(t))},_toggleElement:function(t,e,i){var n=this;if(e=z(e)?e:ri.inProgress(t)?Fe(t,"uk-animation-leave"):ei.inProgress(t)?"0px"===t.style.height:!this.isToggled(t),!Jt(t,"before"+(e?"show":"hide"),[this]))return he.reject();var r,o=($(i)?i:!1!==i&&this.hasAnimation?this.hasTransition?Gi(this):(r=this,function(t,e){ri.cancel(t);var i=r.animation,n=r.duration,o=r._toggle;return e?(o(t,!0),ri.in(t,i[0],n,r.origin)):ri.out(t,i[1]||i[0],n,r.origin).then((function(){return o(t,!1)}))}):this._toggle)(t,e);Jt(t,e?"show":"hide",[this]);var s=function(){Jt(t,e?"shown":"hidden",[n]),n.$update(t)};return o?o.then(s):he.resolve(s())},_toggle:function(t,e){var i;t&&(e=Boolean(e),this.cls?(i=b(this.cls," ")||e!==Fe(t,this.cls))&&je(t,this.cls,b(this.cls," ")?void 0:e):(i=e===st(t,"hidden"))&&ot(t,"hidden",e?null:""),De("[autofocus]",t).some((function(t){return jt(t)?t.focus()||!0:t.blur()})),this.updateAria(t),i&&(Jt(t,"toggled",[this]),this.$update(t)))}}};function Gi(t){var e=t.isToggled,i=t.duration,n=t.initProps,r=t.hideProps,o=t.transition,s=t._toggle;return function(t,a){var u=ei.inProgress(t),h=t.hasChildNodes?j(Ye(t.firstElementChild,"marginTop"))+j(Ye(t.lastElementChild,"marginBottom")):0,c=jt(t)?li(t)+(u?0:h):0;ei.cancel(t),e(t)||s(t,!0),li(t,""),yi.flush();var l=li(t)+(u?0:h);return li(t,c),(a?ei.start(t,G({},n,{overflow:"hidden",height:l}),Math.round(i*(1-c/l)),o):ei.start(t,r,Math.round(i*(c/l)),o).then((function(){return s(t,!1)}))).then((function(){return Ye(t,n)}))}}var Ki={mixins:[Ui,Xi],props:{targets:String,active:null,collapsible:Boolean,multiple:Boolean,toggle:String,content:String,transition:String,offset:Number},data:{targets:"> *",active:!1,animation:[!0],collapsible:!0,multiple:!1,clsOpen:"uk-open",toggle:"> .uk-accordion-title",content:"> .uk-accordion-content",transition:"ease",offset:0},computed:{items:{get:function(t,e){return De(t.targets,e)},watch:function(t,e){var i=this;if(t.forEach((function(t){return Ji(ze(i.content,t),!Fe(t,i.clsOpen))})),!e&&!Fe(t,this.clsOpen)){var n=!1!==this.active&&t[Number(this.active)]||!this.collapsible&&t[0];n&&this.toggle(n,!1)}},immediate:!0}},events:[{name:"click",delegate:function(){return this.targets+" "+this.$props.toggle},handler:function(t){t.preventDefault(),this.toggle(ve(De(this.targets+" "+this.$props.toggle,this.$el),t.current))}}],methods:{toggle:function(t,e){var i=this,n=[this.items[we(t,this.items)]],r=Rt(this.items,"."+this.clsOpen);this.multiple||b(r,n[0])||(n=n.concat(r)),(this.collapsible||Rt(n,":not(."+this.clsOpen+")").length)&&n.forEach((function(t){return i.toggleElement(t,!Fe(t,i.clsOpen),(function(t,n){je(t,i.clsOpen,n);var r=ze((t._wrapper?"> * ":"")+i.content,t);if(!1!==e&&i.hasTransition)return t._wrapper||(t._wrapper=Te(r,"<div"+(n?" hidden":"")+">")),Ji(r,!1),Gi(i)(t._wrapper,n).then((function(){if(Ji(r,!n),delete t._wrapper,_e(r),n){var e=ze(i.$props.toggle,t);Pi(e)||Hi(e,{offset:i.offset})}}));Ji(r,!n)}))}))}}};function Ji(t,e){ot(t,"hidden",e?"":null)}var Zi,Qi={mixins:[Ui,Xi],args:"animation",props:{close:String},data:{animation:[!0],selClose:".uk-alert-close",duration:150,hideProps:G({opacity:0},Xi.data.hideProps)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.close()}}],methods:{close:function(){var t=this;this.toggleElement(this.$el).then((function(){return t.$destroy(!0)}))}}},tn={args:"autoplay",props:{automute:Boolean,autoplay:Boolean},data:{automute:!1,autoplay:!0},computed:{inView:function(t){return"inview"===t.autoplay}},connected:function(){this.inView&&!st(this.$el,"preload")&&(this.$el.preload="none"),this.player=new Di(this.$el),this.automute&&this.player.mute()},update:{read:function(){return!!this.player&&{visible:jt(this.$el)&&"hidden"!==Ye(this.$el,"visibility"),inView:this.inView&&Pi(this.$el)}},write:function(t){var e=t.visible,i=t.inView;!e||this.inView&&!i?this.player.pause():(!0===this.autoplay||this.inView&&i)&&this.player.play()},events:["resize","scroll"]}},en={mixins:[Ui,tn],props:{width:Number,height:Number},data:{automute:!0},update:{read:function(){var t=this.$el,e=function(t){for(;t=Pt(t);)if("static"!==Ye(t,"position"))return t}(t)||t.parentNode,i=e.offsetHeight,n=e.offsetWidth,r=rt.cover({width:this.width||t.naturalWidth||t.videoWidth||t.clientWidth,height:this.height||t.naturalHeight||t.videoHeight||t.clientHeight},{width:n+(n%2?1:0),height:i+(i%2?1:0)});return!(!r.width||!r.height)&&r},write:function(t){var e=t.height,i=t.width;Ye(this.$el,{height:e,width:i})},events:["resize"]}},nn={props:{pos:String,offset:null,flip:Boolean,clsPos:String},data:{pos:"bottom-"+(lt?"right":"left"),flip:!0,offset:!1,clsPos:""},computed:{pos:function(t){var e=t.pos;return(e+(b(e,"-")?"":"-center")).split("-")},dir:function(){return this.pos[0]},align:function(){return this.pos[1]}},methods:{positionAt:function(t,e,i){var n;He(t,this.clsPos+"-(top|bottom|left|right)(-[a-z]+)?"),Ye(t,{top:"",left:""});var r=this.offset,o=this.getAxis();P(r)||(r=(n=ze(r))?ai(n)["x"===o?"left":"top"]-ai(e)["x"===o?"right":"bottom"]:0);var s=si(t,e,"x"===o?wi(this.dir)+" "+this.align:this.align+" "+wi(this.dir),"x"===o?this.dir+" "+this.align:this.align+" "+this.dir,"x"===o?""+("left"===this.dir?-r:r):" "+("top"===this.dir?-r:r),null,this.flip,i).target,a=s.x,u=s.y;this.dir="x"===o?a:u,this.align="x"===o?u:a,je(t,this.clsPos+"-"+this.dir+"-"+this.align,!1===this.offset)},getAxis:function(){return"top"===this.dir||"bottom"===this.dir?"y":"x"}}},rn={mixins:[nn,Xi],args:"pos",props:{mode:"list",toggle:Boolean,boundary:Boolean,boundaryAlign:Boolean,delayShow:Number,delayHide:Number,clsDrop:String},data:{mode:["click","hover"],toggle:"- *",boundary:ht&&window,boundaryAlign:!1,delayShow:0,delayHide:800,clsDrop:!1,animation:["uk-animation-fade"],cls:"uk-open"},computed:{boundary:function(t,e){return yt(t.boundary,e)},clsDrop:function(t){return t.clsDrop||"uk-"+this.$options.name},clsPos:function(){return this.clsDrop}},created:function(){this.tracker=new Ti},connected:function(){Pe(this.$el,this.clsDrop);var t=this.$props.toggle;this.toggle=t&&this.$create("toggle",yt(t,this.$el),{target:this.$el,mode:this.mode}),!this.toggle&&Jt(this.$el,"updatearia")},disconnected:function(){this.isActive()&&(Zi=null)},events:[{name:"click",delegate:function(){return"."+this.clsDrop+"-close"},handler:function(t){t.preventDefault(),this.hide(!1)}},{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.defaultPrevented,i=t.current.hash;e||!i||qt(i,this.$el)||this.hide(!1)}},{name:"beforescroll",handler:function(){this.hide(!1)}},{name:"toggle",self:!0,handler:function(t,e){t.preventDefault(),this.isToggled()?this.hide(!1):this.show(e,!1)}},{name:"toggleshow",self:!0,handler:function(t,e){t.preventDefault(),this.show(e)}},{name:"togglehide",self:!0,handler:function(t){t.preventDefault(),this.hide()}},{name:wt,filter:function(){return b(this.mode,"hover")},handler:function(t){ae(t)||this.clearTimers()}},{name:bt,filter:function(){return b(this.mode,"hover")},handler:function(t){ae(t)||this.hide()}},{name:"toggled",self:!0,handler:function(){this.isToggled()&&(this.clearTimers(),ri.cancel(this.$el),this.position())}},{name:"show",self:!0,handler:function(){var t=this;Zi=this,this.tracker.init(),Jt(this.$el,"updatearia"),Kt(this.$el,"hide",Xt(document,gt,(function(e){var i=e.target;return!qt(i,t.$el)&&Kt(document,vt+" "+xt+" scroll",(function(e){var n=e.defaultPrevented,r=e.type,o=e.target;n||r!==vt||i!==o||t.toggle&&qt(i,t.toggle.$el)||t.hide(!1)}),!0)})),{self:!0}),Kt(this.$el,"hide",Xt(document,"keydown",(function(e){27===e.keyCode&&(e.preventDefault(),t.hide(!1))})),{self:!0})}},{name:"beforehide",self:!0,handler:function(){this.clearTimers()}},{name:"hide",handler:function(t){var e=t.target;this.$el===e?(Zi=this.isActive()?null:Zi,Jt(this.$el,"updatearia"),this.tracker.cancel()):Zi=null===Zi&&qt(e,this.$el)&&this.isToggled()?this:Zi}},{name:"updatearia",self:!0,handler:function(t,e){t.preventDefault(),this.updateAria(this.$el),(e||this.toggle)&&(ot((e||this.toggle).$el,"aria-expanded",this.isToggled()),je(this.toggle.$el,this.cls,this.isToggled()))}}],update:{write:function(){this.isToggled()&&!ri.inProgress(this.$el)&&this.position()},events:["resize"]},methods:{show:function(t,e){var i=this;if(void 0===t&&(t=this.toggle),void 0===e&&(e=!0),this.isToggled()&&t&&this.toggle&&t.$el!==this.toggle.$el&&this.hide(!1),this.toggle=t,this.clearTimers(),!this.isActive()){if(Zi){if(e&&Zi.isDelaying)return void(this.showTimer=setTimeout(this.show,10));for(;Zi&&!qt(this.$el,Zi.$el);)Zi.hide(!1)}this.showTimer=setTimeout((function(){return!i.isToggled()&&i.toggleElement(i.$el,!0)}),e&&this.delayShow||0)}},hide:function(t){var e=this;void 0===t&&(t=!0);var i,n,r=function(){return e.toggleElement(e.$el,!1,!1)};this.clearTimers(),this.isDelaying=(i=this.$el,n=[],Ne(i,(function(t){return"static"!==Ye(t,"position")&&n.push(t)})),n).some((function(t){return e.tracker.movesTo(t)})),t&&this.isDelaying?this.hideTimer=setTimeout(this.hide,50):t&&this.delayHide?this.hideTimer=setTimeout(r,this.delayHide):r()},clearTimers:function(){clearTimeout(this.showTimer),clearTimeout(this.hideTimer),this.showTimer=null,this.hideTimer=null,this.isDelaying=!1},isActive:function(){return Zi===this},position:function(){He(this.$el,this.clsDrop+"-(stack|boundary)"),je(this.$el,this.clsDrop+"-boundary",this.boundaryAlign);var t=ai(this.boundary),e=this.boundaryAlign?t:ai(this.toggle.$el);if("justify"===this.align){var i="y"===this.getAxis()?"width":"height";Ye(this.$el,i,e[i])}else this.$el.offsetWidth>Math.max(t.right-e.left,e.right-t.left)&&Pe(this.$el,this.clsDrop+"-stack");this.positionAt(this.$el,this.boundaryAlign?this.boundary:this.toggle.$el,this.boundary)}}},on={mixins:[Ui],args:"target",props:{target:Boolean},data:{target:!1},computed:{input:function(t,e){return ze(Wt,e)},state:function(){return this.input.nextElementSibling},target:function(t,e){var i=t.target;return i&&(!0===i&&this.input.parentNode===e&&this.input.nextElementSibling||yt(i,e))}},update:function(){var t=this.target,e=this.input;if(t){var i,n=Vt(t)?"value":"textContent",r=t[n],o=e.files&&e.files[0]?e.files[0].name:zt(e,"select")&&(i=De("option",e).filter((function(t){return t.selected}))[0])?i.textContent:e.value;r!==o&&(t[n]=o)}},events:[{name:"change",handler:function(){this.$update()}},{name:"reset",el:function(){return Bt(this.$el,"form")},handler:function(){this.$update()}}]},sn={update:{read:function(t){var e=Pi(this.$el);if(!e||t.isInView===e)return!1;t.isInView=e},write:function(){this.$el.src=this.$el.src},events:["scroll","resize"]}},an={props:{margin:String,firstColumn:Boolean},data:{margin:"uk-margin-small-top",firstColumn:"uk-first-column"},update:{read:function(){return{columns:(t=this.$el.children,e=hn(t,"left","right"),lt?e.reverse():e),rows:un(this.$el.children)};var t,e},write:function(t){var e=this,i=t.columns;t.rows.forEach((function(t,n){return t.forEach((function(t){je(t,e.margin,0!==n),je(t,e.firstColumn,b(i[0],t))}))}))},events:["resize"]}};function un(t){return hn(t,"top","bottom")}function hn(t,e,i){for(var n=[[]],r=0;r<t.length;r++){var o=t[r];if(jt(o))for(var s=cn(o),a=n.length-1;a>=0;a--){var u=n[a];if(!u[0]){u.push(o);break}var h=void 0;if(u[0].offsetParent===o.offsetParent?h=cn(u[0]):(s=cn(o,!0),h=cn(u[0],!0)),s[e]>=h[i]-1&&s[e]!==h[e]){n.push([o]);break}if(s[i]-1>h[e]||s[e]===h[e]){u.push(o);break}if(0===a){n.unshift([o]);break}}}return n}function cn(t,e){var i;void 0===e&&(e=!1);var n=t.offsetTop,r=t.offsetLeft,o=t.offsetHeight,s=t.offsetWidth;return e&&(n=(i=ci(t))[0],r=i[1]),{top:n,left:r,bottom:n+o,right:r+s}}var ln={extends:an,mixins:[Ui],name:"grid",props:{masonry:Boolean,parallax:Number},data:{margin:"uk-grid-margin",clsStack:"uk-grid-stack",masonry:!1,parallax:0},connected:function(){this.masonry&&Pe(this.$el,"uk-flex-top uk-flex-wrap-top")},update:[{write:function(t){var e=t.columns;je(this.$el,this.clsStack,e.length<2)},events:["resize"]},{read:function(t){var e=t.columns,i=t.rows,n=Ut(this.$el);if(!n.length||!this.masonry&&!this.parallax)return!1;var r=n.some(ei.inProgress),o=!1,s="",a=Math.abs(this.parallax);if(this.masonry){var u=function(t){return t.map((function(t){return t.reduce((function(t,e){return t+e.offsetHeight}),0)}))}(e=e.map((function(t){return Z(t,"offsetTop")}))),h=function(t,e){var i=t.filter((function(t){return Fe(t,e)}))[0];return j(i?Ye(i,"marginTop"):Ye(t[0],"paddingLeft"))}(n,this.margin)*(i.length-1);o=function(t,e){var i=t.map((function(t){return Math.max.apply(Math,t.map((function(t){return t.offsetHeight})))}));return e.map((function(t){var e=0;return t.map((function(n,r){return e+=r?i[r-1]-t[r-1].offsetHeight:0}))}))}(i,e),s=Math.max.apply(Math,u)+h,a&&(a=u.reduce((function(t,e,i){return Math.max(t,e+h+(i%2?a:a/8)-s)}),0))}return{padding:a,columns:e,translates:o,height:!r&&s}},write:function(t){var e=t.height,i=t.padding;Ye(this.$el,"paddingBottom",i||""),!1!==e&&Ye(this.$el,"height",e)},events:["resize"]},{read:function(t){var e=t.height;return{scrolled:!!this.parallax&&Li(this.$el,e?e-li(this.$el):0)*Math.abs(this.parallax)}},write:function(t){var e=t.columns,i=t.scrolled,n=t.translates;(!1!==i||n)&&e.forEach((function(t,e){return t.forEach((function(t,r){return Ye(t,"transform",i||n?"translateY("+((n&&-n[e][r])+(i?e%2?i:i/8:0))+"px)":"")}))}))},events:["scroll","resize"]}]},dn=ct?{props:{selMinHeight:String},data:{selMinHeight:!1,forceHeight:!1},computed:{elements:function(t,e){var i=t.selMinHeight;return i?De(i,e):[e]}},update:[{read:function(){Ye(this.elements,"height","")},order:-5,events:["resize"]},{write:function(){var t=this;this.elements.forEach((function(e){var i=j(Ye(e,"minHeight"));i&&(t.forceHeight||Math.round(i+pi(e,"height","content-box"))>=e.offsetHeight)&&Ye(e,"height",i)}))},order:5,events:["resize"]}]}:{},fn={mixins:[dn],args:"target",props:{target:String,row:Boolean},data:{target:"> *",row:!0,forceHeight:!0},computed:{elements:function(t,e){return De(t.target,e)}},update:{read:function(){return{rows:(this.row?un(this.elements):[this.elements]).map(pn)}},write:function(t){t.rows.forEach((function(t){var e=t.heights;return t.elements.forEach((function(t,i){return Ye(t,"minHeight",e[i])}))}))},events:["resize"]}};function pn(t){var e;if(t.length<2)return{heights:[""],elements:t};var i=gn(t),n=i.heights,r=i.max,o=t.some((function(t){return t.style.minHeight})),s=t.some((function(t,e){return!t.style.minHeight&&n[e]<r}));return o&&s&&(Ye(t,"minHeight",""),e=gn(t),n=e.heights,r=e.max),{heights:n=t.map((function(t,e){return n[e]===r&&j(t.style.minHeight).toFixed(2)!==r.toFixed(2)?"":r})),elements:t}}function gn(t){var e=t.map((function(t){return ai(t).height-pi(t,"height","content-box")}));return{heights:e,max:Math.max.apply(null,e)}}var mn={mixins:[dn],props:{expand:Boolean,offsetTop:Boolean,offsetBottom:Boolean,minHeight:Number},data:{expand:!1,offsetTop:!1,offsetBottom:!1,minHeight:0},update:{read:function(t){var e=t.minHeight;if(!jt(this.$el))return!1;var i="",n=pi(this.$el,"height","content-box");if(this.expand){if(this.$el.dataset.heightExpand="",ze("[data-height-expand]")!==this.$el)return!1;i=li(window)-(vn(document.documentElement)-vn(this.$el))-n||""}else{if(i="calc(100vh",this.offsetTop){var r=ai(this.$el).top;i+=r>0&&r<li(window)/2?" - "+r+"px":""}!0===this.offsetBottom?i+=" - "+vn(this.$el.nextElementSibling)+"px":P(this.offsetBottom)?i+=" - "+this.offsetBottom+"vh":this.offsetBottom&&p(this.offsetBottom,"px")?i+=" - "+j(this.offsetBottom)+"px":D(this.offsetBottom)&&(i+=" - "+vn(yt(this.offsetBottom,this.$el))+"px"),i+=(n?" - "+n+"px":"")+")"}return{minHeight:i,prev:e}},write:function(t){var e=t.minHeight,i=t.prev;Ye(this.$el,{minHeight:e}),e!==i&&this.$update(this.$el,"resize"),this.minHeight&&j(Ye(this.$el,"minHeight"))<this.minHeight&&Ye(this.$el,"minHeight",this.minHeight)},events:["resize"]}};function vn(t){return t&&ai(t).height||0}var wn={args:"src",props:{id:Boolean,icon:String,src:String,style:String,width:Number,height:Number,ratio:Number,class:String,strokeAnimation:Boolean,focusable:Boolean,attributes:"list"},data:{ratio:1,include:["style","class","focusable"],class:"",strokeAnimation:!1},beforeConnect:function(){this.class+=" uk-svg"},connected:function(){var t,e=this;!this.icon&&b(this.src,"#")&&(t=this.src.split("#"),this.src=t[0],this.icon=t[1]),this.svg=this.getSvg().then((function(t){return e.applyAttributes(t),e.svgEl=function(t,e){if(Ft(e)||"CANVAS"===e.tagName){ot(e,"hidden",!0);var i=e.nextElementSibling;return $n(t,i)?i:$e(e,t)}var n=e.lastElementChild;return $n(t,n)?n:ye(e,t)}(t,e.$el)}),et)},disconnected:function(){var t=this;Ft(this.$el)&&ot(this.$el,"hidden",null),this.svg&&this.svg.then((function(e){return(!t._connected||e!==t.svgEl)&&Ie(e)}),et),this.svg=this.svgEl=null},update:{read:function(){return!!(this.strokeAnimation&&this.svgEl&&jt(this.svgEl))},write:function(){var t,e;t=this.svgEl,(e=kn(t))&&t.style.setProperty("--uk-animation-stroke",e)},type:["resize"]},methods:{getSvg:function(){var t,e=this;return(t=this.src,bn[t]?bn[t]:bn[t]=new he((function(e,i){t?d(t,"data:")?e(decodeURIComponent(t.split(",")[1])):pe(t).then((function(t){return e(t.response)}),(function(){return i("SVG not found.")})):i()}))).then((function(t){return function(t,e){return e&&b(t,"<symbol")&&(t=function(t,e){var i;if(!yn[t])for(yn[t]={},xn.lastIndex=0;i=xn.exec(t);)yn[t][i[3]]='<svg xmlns="http://www.w3.org/2000/svg"'+i[1]+"svg>";return yn[t][e]}(t,e)||t),(t=ze(t.substr(t.indexOf("<svg"))))&&t.hasChildNodes()&&t}(t,e.icon)||he.reject("SVG not found.")}))},applyAttributes:function(t){var e=this;for(var i in this.$options.props)this[i]&&b(this.include,i)&&ot(t,i,this[i]);for(var n in this.attributes){var r=this.attributes[n].split(":",2),o=r[0],s=r[1];ot(t,o,s)}this.id||at(t,"id");var a=["width","height"],u=[this.width,this.height];u.some((function(t){return t}))||(u=a.map((function(e){return ot(t,e)})));var h=ot(t,"viewBox");h&&!u.some((function(t){return t}))&&(u=h.split(" ").slice(2)),u.forEach((function(i,n){(i=(0|i)*e.ratio)&&ot(t,a[n],i),i&&!u[1^n]&&at(t,a[1^n])})),ot(t,"data-svg",this.icon||this.src)}}},bn={},xn=/<symbol([^]*?id=(['"])(.+?)\2[^]*?<\/)symbol>/g,yn={};function kn(t){return Math.ceil(Math.max.apply(Math,[0].concat(De("[stroke]",t).map((function(t){try{return t.getTotalLength()}catch(t){return 0}})))))}function $n(t,e){return ot(t,"data-svg")===ot(e,"data-svg")}var Sn={spinner:'<svg width="30" height="30" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" cx="15" cy="15" r="14"/></svg>',totop:'<svg width="18" height="10" viewBox="0 0 18 10" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 9 9 1 17 9 "/></svg>',marker:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="9" y="4" width="1" height="11"/><rect x="4" y="9" width="11" height="1"/></svg>',"close-icon":'<svg width="14" height="14" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.1" x1="1" y1="1" x2="13" y2="13"/><line fill="none" stroke="#000" stroke-width="1.1" x1="13" y1="1" x2="1" y2="13"/></svg>',"close-large":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.4" x1="1" y1="1" x2="19" y2="19"/><line fill="none" stroke="#000" stroke-width="1.4" x1="19" y1="1" x2="1" y2="19"/></svg>',"navbar-toggle-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect y="9" width="20" height="2"/><rect y="3" width="20" height="2"/><rect y="15" width="20" height="2"/></svg>',"overlay-icon":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><rect x="19" y="0" width="1" height="40"/><rect x="0" y="19" width="40" height="1"/></svg>',"pagination-next":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 1 6 6 1 11"/></svg>',"pagination-previous":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="6 1 1 6 6 11"/></svg>',"search-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"/></svg>',"search-large":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.8" cx="17.5" cy="17.5" r="16.5"/><line fill="none" stroke="#000" stroke-width="1.8" x1="38" y1="39" x2="29" y2="30"/></svg>',"search-navbar":'<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10.5" cy="10.5" r="9.5"/><line fill="none" stroke="#000" stroke-width="1.1" x1="23" y1="23" x2="17" y2="17"/></svg>',"slidenav-next":'<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="1.225,23 12.775,12 1.225,1 "/></svg>',"slidenav-next-large":'<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="4.002,38.547 22.527,20.024 4,1.5 "/></svg>',"slidenav-previous":'<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="12.775,1 1.225,12 12.775,23 "/></svg>',"slidenav-previous-large":'<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="20.527,1.5 2,20.024 20.525,38.547 "/></svg>'},In={install:function(t){t.icon.add=function(e,i){var n,r=D(e)?((n={})[e]=i,n):e;J(r,(function(t,e){Sn[e]=t,delete Mn[e]})),t._initialized&&Ne(document.body,(function(e){return J(t.getComponents(e),(function(t){t.$options.isIcon&&t.icon in r&&t.$reset()}))}))}},extends:wn,args:"icon",props:["icon"],data:{include:["focusable"]},isIcon:!0,beforeConnect:function(){Pe(this.$el,"uk-icon")},methods:{getSvg:function(){var t=function(t){return Sn[t]?(Mn[t]||(Mn[t]=ze((Sn[function(t){return lt?X(X(t,"left","right"),"previous","next"):t}(t)]||Sn[t]).trim())),Mn[t].cloneNode(!0)):null}(this.icon);return t?he.resolve(t):he.reject("Icon not found.")}}},Tn={args:!1,extends:In,data:function(t){return{icon:o(t.constructor.options.name)}},beforeConnect:function(){Pe(this.$el,this.$name)}},En={extends:Tn,beforeConnect:function(){Pe(this.$el,"uk-slidenav")},computed:{icon:function(t,e){var i=t.icon;return Fe(e,"uk-slidenav-large")?i+"-large":i}}},_n={extends:Tn,computed:{icon:function(t,e){var i=t.icon;return Fe(e,"uk-search-icon")&&Yt(e,".uk-search-large").length?"search-large":Yt(e,".uk-search-navbar").length?"search-navbar":i}}},Cn={extends:Tn,computed:{icon:function(){return"close-"+(Fe(this.$el,"uk-close-large")?"large":"icon")}}},An={extends:Tn,connected:function(){var t=this;this.svg.then((function(e){return 1!==t.ratio&&Ye(ze("circle",e),"strokeWidth",1/t.ratio)}),et)}},Mn={},Nn={args:"dataSrc",props:{dataSrc:String,dataSrcset:Boolean,sizes:String,width:Number,height:Number,offsetTop:String,offsetLeft:String,target:String},data:{dataSrc:"",dataSrcset:!1,sizes:!1,width:!1,height:!1,offsetTop:"50vh",offsetLeft:0,target:!1},computed:{cacheKey:function(t){var e=t.dataSrc;return this.$name+"."+e},width:function(t){var e=t.width,i=t.dataWidth;return e||i},height:function(t){var e=t.height,i=t.dataHeight;return e||i},sizes:function(t){var e=t.sizes,i=t.dataSizes;return e||i},isImg:function(t,e){return Fn(e)},target:{get:function(t){var e=t.target;return[this.$el].concat(kt(e,this.$el))},watch:function(){this.observe()}},offsetTop:function(t){return bi(t.offsetTop,"height")},offsetLeft:function(t){return bi(t.offsetLeft,"width")}},connected:function(){Pn[this.cacheKey]?zn(this.$el,Pn[this.cacheKey]||this.dataSrc,this.dataSrcset,this.sizes):this.isImg&&this.width&&this.height&&zn(this.$el,function(t,e,i){var n;return i&&(n=rt.ratio({width:t,height:e},"width",bi(Bn(i))),t=n.width,e=n.height),'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="'+t+'" height="'+e+'"></svg>'}(this.width,this.height,this.sizes)),this.observer=new Ri(this.load,{rootMargin:this.offsetTop+"px "+this.offsetLeft+"px"}),requestAnimationFrame(this.observe)},disconnected:function(){this.observer.disconnect()},update:{read:function(t){var e=this,i=t.image;if(i||"complete"!==document.readyState||this.load(this.observer.takeRecords()),this.isImg)return!1;i&&i.then((function(t){return t&&""!==t.currentSrc&&zn(e.$el,jn(t))}))},write:function(t){if(this.dataSrcset&&1!==window.devicePixelRatio){var e=Ye(this.$el,"backgroundSize");(e.match(/^(auto\s?)+$/)||j(e)===t.bgSize)&&(t.bgSize=(i=this.dataSrcset,n=this.sizes,r=bi(Bn(n)),(o=(i.match(Ln)||[]).map(j).sort((function(t,e){return t-e}))).filter((function(t){return t>=r}))[0]||o.pop()||""),Ye(this.$el,"backgroundSize",t.bgSize+"px"))}var i,n,r,o},events:["resize"]},methods:{load:function(t){var e=this;t.some((function(t){return H(t.isIntersecting)||t.isIntersecting}))&&(this._data.image=ge(this.dataSrc,this.dataSrcset,this.sizes).then((function(t){return zn(e.$el,jn(t),t.srcset,t.sizes),Pn[e.cacheKey]=jn(t),t}),et),this.observer.disconnect())},observe:function(){var t=this;this._connected&&!this._data.image&&this.target.forEach((function(e){return t.observer.observe(e)}))}}};function zn(t,e,i,n){Fn(t)?(n&&(t.sizes=n),i&&(t.srcset=i),e&&(t.src=e)):e&&!b(t.style.backgroundImage,e)&&(Ye(t,"backgroundImage","url("+Ht(e)+")"),Jt(t,Zt("load",!1)))}var Dn=/\s*(.*?)\s*(\w+|calc\(.*?\))\s*(?:,|$)/g;function Bn(t){var e,i;for(Dn.lastIndex=0;e=Dn.exec(t);)if(!e[1]||window.matchMedia(e[1]).matches){e=d(i=e[2],"calc")?i.substring(5,i.length-1).replace(On,(function(t){return bi(t)})).replace(/ /g,"").match(Hn).reduce((function(t,e){return t+ +e}),0):i;break}return e||"100vw"}var Pn,On=/\d+(?:\w+|%)/g,Hn=/[+-]?(\d+)/g,Ln=/\s+\d+w\s*(?:,|$)/g;function Fn(t){return"IMG"===t.tagName}function jn(t){return t.currentSrc||t.src}try{(Pn=window.sessionStorage||{}).__test__=1,delete Pn.__test__}catch(t){Pn={}}var Wn={props:{media:Boolean},data:{media:!1},computed:{matchMedia:function(){var t=function(t){if(D(t))if("@"===t[0]){var e="breakpoint-"+t.substr(1);t=j(Ke(e))}else if(isNaN(t))return t;return!(!t||isNaN(t))&&"(min-width: "+t+"px)"}(this.media);return!t||window.matchMedia(t).matches}}},Vn={mixins:[Ui,Wn],props:{fill:String},data:{fill:"",clsWrapper:"uk-leader-fill",clsHide:"uk-leader-hide",attrFill:"data-fill"},computed:{fill:function(t){return t.fill||Ke("leader-fill-content")}},connected:function(){var t;t=Ee(this.$el,'<span class="'+this.clsWrapper+'">'),this.wrapper=t[0]},disconnected:function(){_e(this.wrapper.childNodes)},update:{read:function(t){var e=t.changed,i=t.width,n=i;return{width:i=Math.floor(this.$el.offsetWidth/2),fill:this.fill,changed:e||n!==i,hide:!this.matchMedia}},write:function(t){je(this.wrapper,this.clsHide,t.hide),t.changed&&(t.changed=!1,ot(this.wrapper,this.attrFill,new Array(t.width).join(t.fill)))},events:["resize"]}},Rn={props:{container:Boolean},data:{container:!0},computed:{container:function(t){var e=t.container;return!0===e&&this.$container||e&&ze(e)}}},qn=[],Yn={mixins:[Ui,Rn,Xi],props:{selPanel:String,selClose:String,escClose:Boolean,bgClose:Boolean,stack:Boolean},data:{cls:"uk-open",escClose:!0,bgClose:!0,overlay:!0,stack:!1},computed:{panel:function(t,e){return ze(t.selPanel,e)},transitionElement:function(){return this.panel},bgClose:function(t){return t.bgClose&&this.panel}},beforeDisconnect:function(){this.isToggled()&&this.toggleElement(this.$el,!1,!1)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.hide()}},{name:"toggle",self:!0,handler:function(t){t.defaultPrevented||(t.preventDefault(),this.isToggled()===b(qn,this)&&this.toggle())}},{name:"beforeshow",self:!0,handler:function(t){if(b(qn,this))return!1;!this.stack&&qn.length?(he.all(qn.map((function(t){return t.hide()}))).then(this.show),t.preventDefault()):qn.push(this)}},{name:"show",self:!0,handler:function(){var t=this;di(window)-di(document)&&this.overlay&&Ye(document.body,"overflowY","scroll"),this.stack&&Ye(this.$el,"zIndex",Ye(this.$el,"zIndex")+qn.length),Pe(document.documentElement,this.clsPage),this.bgClose&&Kt(this.$el,"hide",Xt(document,gt,(function(e){var i=e.target;K(qn)!==t||t.overlay&&!qt(i,t.$el)||qt(i,t.panel)||Kt(document,vt+" "+xt+" scroll",(function(e){var n=e.defaultPrevented,r=e.type,o=e.target;n||r!==vt||i!==o||t.hide()}),!0)})),{self:!0}),this.escClose&&Kt(this.$el,"hide",Xt(document,"keydown",(function(e){27===e.keyCode&&K(qn)===t&&(e.preventDefault(),t.hide())})),{self:!0})}},{name:"hidden",self:!0,handler:function(){var t=this;qn.splice(qn.indexOf(this),1),qn.length||Ye(document.body,"overflowY",""),Ye(this.$el,"zIndex",""),qn.some((function(e){return e.clsPage===t.clsPage}))||Oe(document.documentElement,this.clsPage)}}],methods:{toggle:function(){return this.isToggled()?this.hide():this.show()},show:function(){var t=this;return this.container&&this.$el.parentNode!==this.container?(ye(this.container,this.$el),new he((function(e){return requestAnimationFrame((function(){return t.show().then(e)}))}))):this.toggleElement(this.$el,!0,Un(this))},hide:function(){return this.toggleElement(this.$el,!1,Un(this))}}};function Un(t){var e=t.transitionElement,i=t._toggle;return function(t,n){return new he((function(r,o){return Kt(t,"show hide",(function(){t._reject&&t._reject(),t._reject=o,i(t,n);var s=Kt(e,"transitionstart",(function(){Kt(e,"transitionend transitioncancel",r,{self:!0}),clearTimeout(a)}),{self:!0}),a=setTimeout((function(){s(),r()}),Y(Ye(e,"transitionDuration")))}))}))}}var Xn={install:function(t){var e=t.modal;function i(t,i,n,r){i=G({bgClose:!1,escClose:!0,labels:e.labels},i);var o=e.dialog(t(i),i),s=new ce,a=!1;return Xt(o.$el,"submit","form",(function(t){t.preventDefault(),s.resolve(r&&r(o)),a=!0,o.hide()})),Xt(o.$el,"hide",(function(){return!a&&n(s)})),s.promise.dialog=o,s.promise}e.dialog=function(t,i){var n=e('<div class="uk-modal"> <div class="uk-modal-dialog">'+t+"</div> </div>",i);return n.show(),Xt(n.$el,"hidden",(function(){return he.resolve().then((function(){return n.$destroy(!0)}))}),{self:!0}),n},e.alert=function(t,e){return i((function(e){var i=e.labels;return'<div class="uk-modal-body">'+(D(t)?t:xe(t))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-primary uk-modal-close" autofocus>'+i.ok+"</button> </div>"}),e,(function(t){return t.resolve()}))},e.confirm=function(t,e){return i((function(e){var i=e.labels;return'<form> <div class="uk-modal-body">'+(D(t)?t:xe(t))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+i.cancel+'</button> <button class="uk-button uk-button-primary" autofocus>'+i.ok+"</button> </div> </form>"}),e,(function(t){return t.reject()}))},e.prompt=function(t,e,n){return i((function(i){var n=i.labels;return'<form class="uk-form-stacked"> <div class="uk-modal-body"> <label>'+(D(t)?t:xe(t))+'</label> <input class="uk-input" value="'+(e||"")+'" autofocus> </div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+n.cancel+'</button> <button class="uk-button uk-button-primary">'+n.ok+"</button> </div> </form>"}),n,(function(t){return t.resolve(null)}),(function(t){return ze("input",t.$el).value}))},e.labels={ok:"Ok",cancel:"Cancel"}},mixins:[Yn],data:{clsPage:"uk-modal-page",selPanel:".uk-modal-dialog",selClose:".uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full"},events:[{name:"show",self:!0,handler:function(){Fe(this.panel,"uk-margin-auto-vertical")?Pe(this.$el,"uk-flex"):Ye(this.$el,"display","block"),li(this.$el)}},{name:"hidden",self:!0,handler:function(){Ye(this.$el,"display",""),Oe(this.$el,"uk-flex")}}]},Gn={extends:Ki,data:{targets:"> .uk-parent",toggle:"> a",content:"> ul"}},Kn={mixins:[Ui,dn],props:{dropdown:String,mode:"list",align:String,offset:Number,boundary:Boolean,boundaryAlign:Boolean,clsDrop:String,delayShow:Number,delayHide:Number,dropbar:Boolean,dropbarMode:String,dropbarAnchor:Boolean,duration:Number},data:{dropdown:".uk-navbar-nav > li",align:lt?"right":"left",clsDrop:"uk-navbar-dropdown",mode:void 0,offset:void 0,delayShow:void 0,delayHide:void 0,boundaryAlign:void 0,flip:"x",boundary:!0,dropbar:!1,dropbarMode:"slide",dropbarAnchor:!1,duration:200,forceHeight:!0,selMinHeight:".uk-navbar-nav > li > a, .uk-navbar-item, .uk-navbar-toggle"},computed:{boundary:function(t,e){var i=t.boundary,n=t.boundaryAlign;return!0===i||n?e:i},dropbarAnchor:function(t,e){return yt(t.dropbarAnchor,e)},pos:function(t){return"bottom-"+t.align},dropbar:{get:function(t){var e=t.dropbar;return e?(e=this._dropbar||yt(e,this.$el)||ze("+ .uk-navbar-dropbar",this.$el))||(this._dropbar=ze("<div></div>")):null},watch:function(t){Pe(t,"uk-navbar-dropbar")},immediate:!0},dropdowns:{get:function(t,e){return De(t.dropdown+" ."+t.clsDrop,e)},watch:function(t){var e=this;this.$create("drop",t.filter((function(t){return!e.getDropdown(t)})),G({},this.$props,{boundary:this.boundary,pos:this.pos,offset:this.dropbar||this.offset}))},immediate:!0}},disconnected:function(){this.dropbar&&Ie(this.dropbar),delete this._dropbar},events:[{name:"mouseover",delegate:function(){return this.dropdown},handler:function(t){var e=t.current,i=this.getActive();i&&i.toggle&&!qt(i.toggle.$el,e)&&!i.tracker.movesTo(i.$el)&&i.hide(!1)}},{name:"mouseleave",el:function(){return this.dropbar},handler:function(){var t=this.getActive();t&&!this.dropdowns.some((function(t){return zt(t,":hover")}))&&t.hide()}},{name:"beforeshow",capture:!0,filter:function(){return this.dropbar},handler:function(){this.dropbar.parentNode||$e(this.dropbarAnchor||this.$el,this.dropbar)}},{name:"show",capture:!0,filter:function(){return this.dropbar},handler:function(t,e){var i=e.$el,n=e.dir;je(this.dropbar,"uk-navbar-dropbar-slide","slide"===this.dropbarMode||Yt(this.$el).some((function(t){return"static"!==Ye(t,"position")}))),this.clsDrop&&Pe(i,this.clsDrop+"-dropbar"),"bottom"===n&&this.transitionTo(i.offsetHeight+j(Ye(i,"marginTop"))+j(Ye(i,"marginBottom")),i)}},{name:"beforehide",filter:function(){return this.dropbar},handler:function(t,e){var i=e.$el,n=this.getActive();zt(this.dropbar,":hover")&&n&&n.$el===i&&t.preventDefault()}},{name:"hide",filter:function(){return this.dropbar},handler:function(t,e){var i=e.$el,n=this.getActive();(!n||n&&n.$el===i)&&this.transitionTo(0)}}],methods:{getActive:function(){var t=this.dropdowns.map(this.getDropdown).filter((function(t){return t&&t.isActive()}))[0];return t&&b(t.mode,"hover")&&qt(t.toggle.$el,this.$el)&&t},transitionTo:function(t,e){var i=this,n=this.dropbar,r=jt(n)?li(n):0;return Ye(e=r<t&&e,"clip","rect(0,"+e.offsetWidth+"px,"+r+"px,0)"),li(n,r),ei.cancel([e,n]),he.all([ei.start(n,{height:t},this.duration),ei.start(e,{clip:"rect(0,"+e.offsetWidth+"px,"+t+"px,0)"},this.duration)]).catch(et).then((function(){Ye(e,{clip:""}),i.$update(n)}))},getDropdown:function(t){return this.$getComponent(t,"drop")||this.$getComponent(t,"dropdown")}}},Jn={mixins:[Yn],args:"mode",props:{mode:String,flip:Boolean,overlay:Boolean},data:{mode:"slide",flip:!1,overlay:!1,clsPage:"uk-offcanvas-page",clsContainer:"uk-offcanvas-container",selPanel:".uk-offcanvas-bar",clsFlip:"uk-offcanvas-flip",clsContainerAnimation:"uk-offcanvas-container-animation",clsSidebarAnimation:"uk-offcanvas-bar-animation",clsMode:"uk-offcanvas",clsOverlay:"uk-offcanvas-overlay",selClose:".uk-offcanvas-close",container:!1},computed:{clsFlip:function(t){var e=t.flip,i=t.clsFlip;return e?i:""},clsOverlay:function(t){var e=t.overlay,i=t.clsOverlay;return e?i:""},clsMode:function(t){var e=t.mode;return t.clsMode+"-"+e},clsSidebarAnimation:function(t){var e=t.mode,i=t.clsSidebarAnimation;return"none"===e||"reveal"===e?"":i},clsContainerAnimation:function(t){var e=t.mode,i=t.clsContainerAnimation;return"push"!==e&&"reveal"!==e?"":i},transitionElement:function(t){return"reveal"===t.mode?this.panel.parentNode:this.panel}},events:[{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.current.hash;!t.defaultPrevented&&e&&ze(e,document.body)&&this.hide()}},{name:"touchstart",passive:!0,el:function(){return this.panel},handler:function(t){var e=t.targetTouches;1===e.length&&(this.clientY=e[0].clientY)}},{name:"touchmove",self:!0,passive:!1,filter:function(){return this.overlay},handler:function(t){t.cancelable&&t.preventDefault()}},{name:"touchmove",passive:!1,el:function(){return this.panel},handler:function(t){if(1===t.targetTouches.length){var e=event.targetTouches[0].clientY-this.clientY,i=this.panel,n=i.scrollTop,r=i.scrollHeight,o=i.clientHeight;(o>=r||0===n&&e>0||r-n<=o&&e<0)&&t.cancelable&&t.preventDefault()}}},{name:"show",self:!0,handler:function(){"reveal"!==this.mode||Fe(this.panel.parentNode,this.clsMode)||(Te(this.panel,"<div>"),Pe(this.panel.parentNode,this.clsMode)),Ye(document.documentElement,"overflowY",this.overlay?"hidden":""),Pe(document.body,this.clsContainer,this.clsFlip),Ye(document.body,"touch-action","pan-y pinch-zoom"),Ye(this.$el,"display","block"),Pe(this.$el,this.clsOverlay),Pe(this.panel,this.clsSidebarAnimation,"reveal"!==this.mode?this.clsMode:""),li(document.body),Pe(document.body,this.clsContainerAnimation),this.clsContainerAnimation&&(Zn().content+=",user-scalable=0")}},{name:"hide",self:!0,handler:function(){Oe(document.body,this.clsContainerAnimation),Ye(document.body,"touch-action","")}},{name:"hidden",self:!0,handler:function(){var t;this.clsContainerAnimation&&((t=Zn()).content=t.content.replace(/,user-scalable=0$/,"")),"reveal"===this.mode&&_e(this.panel),Oe(this.panel,this.clsSidebarAnimation,this.clsMode),Oe(this.$el,this.clsOverlay),Ye(this.$el,"display",""),Oe(document.body,this.clsContainer,this.clsFlip),Ye(document.documentElement,"overflowY","")}},{name:"swipeLeft swipeRight",handler:function(t){this.isToggled()&&p(t.type,"Left")^this.flip&&this.hide()}}]};function Zn(){return ze('meta[name="viewport"]',document.head)||ye(document.head,'<meta name="viewport">')}var Qn={mixins:[Ui],props:{selContainer:String,selContent:String},data:{selContainer:".uk-modal",selContent:".uk-modal-dialog"},computed:{container:function(t,e){return Bt(e,t.selContainer)},content:function(t,e){return Bt(e,t.selContent)}},connected:function(){Ye(this.$el,"minHeight",150)},update:{read:function(){return!(!this.content||!this.container)&&{current:j(Ye(this.$el,"maxHeight")),max:Math.max(150,li(this.container)-(ai(this.content).height-li(this.$el)))}},write:function(t){var e=t.current,i=t.max;Ye(this.$el,"maxHeight",i),Math.round(e)!==Math.round(i)&&Jt(this.$el,"resize")},events:["resize"]}},tr={props:["width","height"],connected:function(){Pe(this.$el,"uk-responsive-width")},update:{read:function(){return!!(jt(this.$el)&&this.width&&this.height)&&{width:di(this.$el.parentNode),height:this.height}},write:function(t){li(this.$el,rt.contain({height:this.height,width:this.width},t).height)},events:["resize"]}},er={props:{offset:Number},data:{offset:0},methods:{scrollTo:function(t){var e=this;t=t&&ze(t)||document.body,Jt(this.$el,"beforescroll",[this,t])&&Hi(t,{offset:this.offset}).then((function(){return Jt(e.$el,"scrolled",[e,t])}))}},events:{click:function(t){t.defaultPrevented||(t.preventDefault(),this.scrollTo(Ht(decodeURIComponent(this.$el.hash)).substr(1)))}}},ir={args:"cls",props:{cls:String,target:String,hidden:Boolean,offsetTop:Number,offsetLeft:Number,repeat:Boolean,delay:Number},data:function(){return{cls:!1,target:!1,hidden:!0,offsetTop:0,offsetLeft:0,repeat:!1,delay:0,inViewClass:"uk-scrollspy-inview"}},computed:{elements:{get:function(t,e){var i=t.target;return i?De(i,e):[e]},watch:function(t){this.hidden&&Ye(Rt(t,":not(."+this.inViewClass+")"),"visibility","hidden")},immediate:!0}},update:[{read:function(t){var e=this;t.update&&this.elements.forEach((function(t){var i=t._ukScrollspyState;i||(i={cls:ut(t,"uk-scrollspy-class")||e.cls}),i.show=Pi(t,e.offsetTop,e.offsetLeft),t._ukScrollspyState=i}))},write:function(t){var e=this;if(!t.update)return this.$emit(),t.update=!0;this.elements.forEach((function(i){var n=i._ukScrollspyState,r=function(t){Ye(i,"visibility",!t&&e.hidden?"hidden":""),je(i,e.inViewClass,t),je(i,n.cls),Jt(i,t?"inview":"outview"),n.inview=t,e.$update(i)};!n.show||n.inview||n.queued?!n.show&&n.inview&&!n.queued&&e.repeat&&r(!1):(n.queued=!0,t.promise=(t.promise||he.resolve()).then((function(){return new he((function(t){return setTimeout(t,e.delay)}))})).then((function(){r(!0),setTimeout((function(){n.queued=!1,e.$emit()}),300)})))}))},events:["scroll","resize"]}]},nr={props:{cls:String,closest:String,scroll:Boolean,overflow:Boolean,offset:Number},data:{cls:"uk-active",closest:!1,scroll:!1,overflow:!0,offset:0},computed:{links:{get:function(t,e){return De('a[href^="#"]',e).filter((function(t){return t.hash}))},watch:function(t){this.scroll&&this.$create("scroll",t,{offset:this.offset||0})},immediate:!0},targets:function(){return De(this.links.map((function(t){return Ht(t.hash).substr(1)})).join(","))},elements:function(t){var e=t.closest;return Bt(this.links,e||"*")}},update:[{read:function(){var t=this,e=this.targets.length;if(!e||!jt(this.$el))return!1;var i=K(Fi(this.targets[0])),n=i.scrollTop,r=i.scrollHeight,o=ji(i),s=r-ai(o).height,a=!1;return n===s?a=e-1:(this.targets.every((function(e,i){if(hi(e,o).top-t.offset<=0)return a=i,!0})),!1===a&&this.overflow&&(a=0)),{active:a}},write:function(t){var e=t.active;this.links.forEach((function(t){return t.blur()})),Oe(this.elements,this.cls),!1!==e&&Jt(this.$el,"active",[e,Pe(this.elements[e],this.cls)])},events:["scroll","resize"]}]},rr={mixins:[Ui,Wn],props:{top:null,bottom:Boolean,offset:String,animation:String,clsActive:String,clsInactive:String,clsFixed:String,clsBelow:String,selTarget:String,widthElement:Boolean,showOnUp:Boolean,targetOffset:Number},data:{top:0,bottom:!1,offset:0,animation:"",clsActive:"uk-active",clsInactive:"",clsFixed:"uk-sticky-fixed",clsBelow:"uk-sticky-below",selTarget:"",widthElement:!1,showOnUp:!1,targetOffset:!1},computed:{offset:function(t){return bi(t.offset)},selTarget:function(t,e){var i=t.selTarget;return i&&ze(i,e)||e},widthElement:function(t,e){return yt(t.widthElement,e)||this.placeholder},isActive:{get:function(){return Fe(this.selTarget,this.clsActive)},set:function(t){t&&!this.isActive?(Le(this.selTarget,this.clsInactive,this.clsActive),Jt(this.$el,"active")):t||Fe(this.selTarget,this.clsInactive)||(Le(this.selTarget,this.clsActive,this.clsInactive),Jt(this.$el,"inactive"))}}},connected:function(){this.placeholder=ze("+ .uk-sticky-placeholder",this.$el)||ze('<div class="uk-sticky-placeholder"></div>'),this.isFixed=!1,this.isActive=!1},disconnected:function(){this.isFixed&&(this.hide(),Oe(this.selTarget,this.clsInactive)),Ie(this.placeholder),this.placeholder=null,this.widthElement=null},events:[{name:"load hashchange popstate",el:ht&&window,handler:function(){var t=this;if(!1!==this.targetOffset&&location.hash&&window.pageYOffset>0){var e=ze(location.hash);e&&yi.read((function(){var i=ai(e).top,n=ai(t.$el).top,r=t.$el.offsetHeight;t.isFixed&&n+r>=i&&n<=i+e.offsetHeight&&Oi(window,i-r-(P(t.targetOffset)?t.targetOffset:0)-t.offset)}))}}}],update:[{read:function(t,e){var i=t.height;this.isActive&&"update"!==e&&(this.hide(),i=this.$el.offsetHeight,this.show()),i=this.isActive?i:this.$el.offsetHeight,this.topOffset=ai(this.isFixed?this.placeholder:this.$el).top,this.bottomOffset=this.topOffset+i;var n=or("bottom",this);return this.top=Math.max(j(or("top",this)),this.topOffset)-this.offset,this.bottom=n&&n-this.$el.offsetHeight,this.inactive=!this.matchMedia,{lastScroll:!1,height:i,margins:Ye(this.$el,["marginTop","marginBottom","marginLeft","marginRight"])}},write:function(t){var e=t.height,i=t.margins,n=this.placeholder;Ye(n,G({height:e},i)),qt(n,document)||($e(this.$el,n),ot(n,"hidden","")),this.isActive=this.isActive},events:["resize"]},{read:function(t){var e=t.scroll;return void 0===e&&(e=0),this.width=ai(jt(this.widthElement)?this.widthElement:this.$el).width,this.scroll=window.pageYOffset,{dir:e<=this.scroll?"down":"up",scroll:this.scroll,visible:jt(this.$el),top:ci(this.placeholder)[0]}},write:function(t,e){var i=this,n=t.initTimestamp;void 0===n&&(n=0);var r=t.dir,o=t.lastDir,s=t.lastScroll,a=t.scroll,u=t.top,h=t.visible,c=performance.now();if(t.lastScroll=a,!(a<0||a===s||!h||this.disabled||this.showOnUp&&"scroll"!==e||((c-n>300||r!==o)&&(t.initScroll=a,t.initTimestamp=c),t.lastDir=r,this.showOnUp&&!this.isFixed&&Math.abs(t.initScroll-a)<=30&&Math.abs(s-a)<=10)))if(this.inactive||a<this.top||this.showOnUp&&(a<=this.top||"down"===r||"up"===r&&!this.isFixed&&a<=this.bottomOffset)){if(!this.isFixed)return void(ri.inProgress(this.$el)&&u>a&&(ri.cancel(this.$el),this.hide()));this.isFixed=!1,this.animation&&a>this.topOffset?(ri.cancel(this.$el),ri.out(this.$el,this.animation).then((function(){return i.hide()}),et)):this.hide()}else this.isFixed?this.update():this.animation?(ri.cancel(this.$el),this.show(),ri.in(this.$el,this.animation).catch(et)):this.show()},events:["resize","scroll"]}],methods:{show:function(){this.isFixed=!0,this.update(),ot(this.placeholder,"hidden",null)},hide:function(){this.isActive=!1,Oe(this.$el,this.clsFixed,this.clsBelow),Ye(this.$el,{position:"",top:"",width:""}),ot(this.placeholder,"hidden","")},update:function(){var t=0!==this.top||this.scroll>this.top,e=Math.max(0,this.offset);P(this.bottom)&&this.scroll>this.bottom-this.offset&&(e=this.bottom-this.scroll),Ye(this.$el,{position:"fixed",top:e+"px",width:this.width}),this.isActive=t,je(this.$el,this.clsBelow,this.scroll>this.bottomOffset),Pe(this.$el,this.clsFixed)}}};function or(t,e){var i=e.$props,n=e.$el,r=e[t+"Offset"],o=i[t];if(o)return D(o)&&o.match(/^-?\d/)?r+bi(o):ai(!0===o?n.parentNode:yt(o,n)).bottom}var sr={mixins:[Xi],args:"connect",props:{connect:String,toggle:String,active:Number,swiping:Boolean},data:{connect:"~.uk-switcher",toggle:"> * > :first-child",active:0,swiping:!0,cls:"uk-active",clsContainer:"uk-switcher",attrItem:"uk-switcher-item"},computed:{connects:{get:function(t,e){return kt(t.connect,e)},watch:function(t){var e=this;t.forEach((function(t){return e.updateAria(t.children)})),this.swiping&&Ye(t,"touch-action","pan-y pinch-zoom")},immediate:!0},toggles:{get:function(t,e){return De(t.toggle,e).filter((function(t){return!zt(t,".uk-disabled *, .uk-disabled, [disabled]")}))},watch:function(t){var e=this.index();this.show(~e&&e||t[this.active]||t[0])},immediate:!0},children:function(){var t=this;return Ut(this.$el).filter((function(e){return t.toggles.some((function(t){return qt(t,e)}))}))}},events:[{name:"click",delegate:function(){return this.toggle},handler:function(t){b(this.toggles,t.current)&&(t.preventDefault(),this.show(t.current))}},{name:"click",el:function(){return this.connects},delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.show(ut(t.current,this.attrItem))}},{name:"swipeRight swipeLeft",filter:function(){return this.swiping},el:function(){return this.connects},handler:function(t){var e=t.type;this.show(p(e,"Left")?"next":"previous")}}],methods:{index:function(){var t=this;return y(this.children,(function(e){return Fe(e,t.cls)}))},show:function(t){var e=this,i=this.index(),n=we(t,this.toggles,i);this.children.forEach((function(t,i){je(t,e.cls,n===i),ot(e.toggles[i],"aria-expanded",n===i)})),this.connects.forEach((function(t){var r=t.children;return e.toggleElement(V(r).filter((function(t,i){return i!==n&&e.isToggled(t)})),!1,i>=0).then((function(){return e.toggleElement(r[n],!0,i>=0)}))}))}}},ar={mixins:[Ui],extends:sr,props:{media:Boolean},data:{media:960,attrItem:"uk-tab-item"},connected:function(){var t=Fe(this.$el,"uk-tab-left")?"uk-tab-left":!!Fe(this.$el,"uk-tab-right")&&"uk-tab-right";t&&this.$create("toggle",this.$el,{cls:t,mode:"media",media:this.media})}},ur={mixins:[Wn,Xi],args:"target",props:{href:String,target:null,mode:"list",queued:Boolean},data:{href:!1,target:!1,mode:"click",queued:!0},computed:{target:{get:function(t,e){var i=t.href,n=t.target;return(n=kt(n||i,e)).length&&n||[e]},watch:function(){Jt(this.target,"updatearia",[this])},immediate:!0}},events:[{name:wt+" "+bt,filter:function(){return b(this.mode,"hover")},handler:function(t){ae(t)||this.toggle("toggle"+(t.type===wt?"show":"hide"))}},{name:"click",filter:function(){return b(this.mode,"click")||pt&&b(this.mode,"hover")},handler:function(t){var e;(Bt(t.target,'a[href="#"], a[href=""]')||(e=Bt(t.target,"a[href]"))&&(this.cls&&!Fe(this.target,this.cls.split(" ")[0])||!jt(this.target)||e.hash&&zt(this.target,e.hash)))&&t.preventDefault(),this.toggle()}}],update:{read:function(){return!(!b(this.mode,"media")||!this.media)&&{match:this.matchMedia}},write:function(t){var e=t.match,i=this.isToggled(this.target);(e?!i:i)&&this.toggle()},events:["resize"]},methods:{toggle:function(t){var e=this;if(Jt(this.target,t||"toggle",[this]))if(this.queued){var i=this.target.filter(this.isToggled);this.toggleElement(i,!1).then((function(){return e.toggleElement(e.target.filter((function(t){return!b(i,t)})),!0)}))}else this.toggleElement(this.target)}}};J(Object.freeze({__proto__:null,Accordion:Ki,Alert:Qi,Cover:en,Drop:rn,Dropdown:rn,FormCustom:on,Gif:sn,Grid:ln,HeightMatch:fn,HeightViewport:mn,Icon:In,Img:Nn,Leader:Vn,Margin:an,Modal:Xn,Nav:Gn,Navbar:Kn,Offcanvas:Jn,OverflowAuto:Qn,Responsive:tr,Scroll:er,Scrollspy:ir,ScrollspyNav:nr,Sticky:rr,Svg:wn,Switcher:sr,Tab:ar,Toggle:ur,Video:tn,Close:Cn,Spinner:An,SlidenavNext:En,SlidenavPrevious:En,SearchIcon:_n,Marker:Tn,NavbarToggleIcon:Tn,OverlayIcon:Tn,PaginationNext:Tn,PaginationPrevious:Tn,Totop:Tn}),(function(t,e){return Yi.component(e,t)})),Yi.use((function(t){ht&&me((function(){var e;t.update(),Xt(window,"load resize",(function(){return t.update(null,"resize")})),Xt(document,"loadedmetadata load",(function(e){var i=e.target;return t.update(i,"resize")}),!0),Xt(window,"scroll",(function(i){e||(e=!0,yi.write((function(){return e=!1})),t.update(null,i.type))}),{passive:!0,capture:!0});var i,n=0;Xt(document,"animationstart",(function(t){var e=t.target;(Ye(e,"animationName")||"").match(/^uk-.*(left|right)/)&&(n++,Ye(document.body,"overflowX","hidden"),setTimeout((function(){--n||Ye(document.body,"overflowX","")}),Y(Ye(e,"animationDuration"))+100))}),!0),Xt(document,gt,(function(t){if(i&&i(),ae(t)){var e=ue(t),n="tagName"in t.target?t.target:t.target.parentNode;i=Kt(document,vt+" "+xt,(function(t){var i=ue(t),r=i.x,o=i.y;(n&&r&&Math.abs(e.x-r)>100||o&&Math.abs(e.y-o)>100)&&setTimeout((function(){var t,i,s,a;Jt(n,"swipe"),Jt(n,"swipe"+(t=e.x,i=e.y,s=r,a=o,Math.abs(t-s)>=Math.abs(i-a)?t-s>0?"Left":"Right":i-a>0?"Up":"Down"))}))}))}}),{passive:!0})}))})),function(t){var e=t.connect,i=t.disconnect;ht&&window.MutationObserver&&yi.read((function(){document.body&&Ne(document.body,e),new MutationObserver((function(n){var r=[];n.forEach((function(n){return function(n,r){var o=n.target;("attributes"!==n.type?function(t){for(var n=t.addedNodes,r=t.removedNodes,o=0;o<n.length;o++)Ne(n[o],e);for(var s=0;s<r.length;s++)Ne(r[s],i);return!0}(n):function(e){var i=e.target,n=e.attributeName;if("href"===n)return!0;var r=qi(n);if(r&&r in t){if(st(i,n))return t[r](i),!0;var o=t.getComponent(i,r);return o?(o.$destroy(),!0):void 0}}(n))&&!r.some((function(t){return t.contains(o)}))&&r.push(o.contains?o:o.parentNode)}(n,r)})),r.forEach((function(e){return t.update(e)}))})).observe(document,{childList:!0,subtree:!0,characterData:!0,attributes:!0}),t._initialized=!0}))}(Yi);var hr,cr={mixins:[Ui],props:{date:String,clsWrapper:String},data:{date:"",clsWrapper:".uk-countdown-%unit%"},computed:{date:function(t){var e=t.date;return Date.parse(e)},days:function(t,e){return ze(t.clsWrapper.replace("%unit%","days"),e)},hours:function(t,e){return ze(t.clsWrapper.replace("%unit%","hours"),e)},minutes:function(t,e){return ze(t.clsWrapper.replace("%unit%","minutes"),e)},seconds:function(t,e){return ze(t.clsWrapper.replace("%unit%","seconds"),e)},units:function(){var t=this;return["days","hours","minutes","seconds"].filter((function(e){return t[e]}))}},connected:function(){this.start()},disconnected:function(){var t=this;this.stop(),this.units.forEach((function(e){return be(t[e])}))},events:[{name:"visibilitychange",el:ht&&document,handler:function(){document.hidden?this.stop():this.start()}}],update:{write:function(){var t,e,i=this,n=(t=this.date,{total:e=t-Date.now(),seconds:e/1e3%60,minutes:e/1e3/60%60,hours:e/1e3/60/60%24,days:e/1e3/60/60/24});n.total<=0&&(this.stop(),n.days=n.hours=n.minutes=n.seconds=0),this.units.forEach((function(t){var e=String(Math.floor(n[t]));e=e.length<2?"0"+e:e;var r=i[t];r.textContent!==e&&((e=e.split("")).length!==r.children.length&&xe(r,e.map((function(){return"<span></span>"})).join("")),e.forEach((function(t,e){return r.children[e].textContent=t})))}))}},methods:{start:function(){this.stop(),this.date&&this.units.length&&(this.$update(),this.timer=setInterval(this.$update,1e3))},stop:function(){this.timer&&(clearInterval(this.timer),this.timer=null)}}},lr={props:{animation:Number},data:{animation:150},computed:{target:function(){return this.$el}},methods:{animate:function(t){var e=this;hr||(hr=ye(document.head,"<style>").sheet).insertRule(".uk-animation-target > * {\n            margin-top: 0 !important;\n            transform: none !important;\n        }",0);var i=Ut(this.target),n=i.map((function(t){return dr(t,!0)})),r=li(this.target),o=window.pageYOffset;t(),ei.cancel(this.target),i.forEach(ei.cancel),fr(this.target),this.$update(this.target,"resize"),yi.flush();var s=li(this.target),a=(i=i.concat(Ut(this.target).filter((function(t){return!b(i,t)})))).map((function(t,e){return!(!t.parentNode||!(e in n))&&(n[e]?jt(t)?pr(t):{opacity:0}:{opacity:jt(t)?1:0})}));return n=a.map((function(t,r){var o=i[r].parentNode===e.target&&(n[r]||dr(i[r]));return o&&(t?"opacity"in t||(o.opacity%1?t.opacity=1:delete o.opacity):delete o.opacity),o})),Pe(this.target,"uk-animation-target"),i.forEach((function(t,e){return n[e]&&Ye(t,n[e])})),Ye(this.target,{height:r,display:"block"}),Oi(window,o),he.all(i.map((function(t,i){return["top","left","height","width"].some((function(t){return n[i][t]!==a[i][t]}))&&ei.start(t,a[i],e.animation,"ease")})).concat(r!==s&&ei.start(this.target,{height:s},this.animation,"ease"))).then((function(){i.forEach((function(t,e){return Ye(t,{display:0===a[e].opacity?"none":"",zIndex:""})})),fr(e.target),e.$update(e.target,"resize"),yi.flush()}),et)}}};function dr(t,e){var i=Ye(t,"zIndex");return!!jt(t)&&G({display:"",opacity:e?Ye(t,"opacity"):"0",pointerEvents:"none",position:"absolute",zIndex:"auto"===i?ve(t):i},pr(t))}function fr(t){Ye(t.children,{height:"",left:"",opacity:"",pointerEvents:"",position:"",top:"",width:""}),Oe(t,"uk-animation-target"),Ye(t,{height:"",display:""})}function pr(t){var e=ai(t),i=e.height,n=e.width,r=hi(t);return{top:r.top,left:r.left,height:i,width:n}}var gr={mixins:[lr],args:"target",props:{target:Boolean,selActive:Boolean},data:{target:null,selActive:!1,attrItem:"uk-filter-control",cls:"uk-active",animation:250},computed:{toggles:{get:function(t,e){return t.attrItem,De("["+this.attrItem+"],[data-"+this.attrItem+"]",e)},watch:function(){var t=this;if(this.updateState(),!1!==this.selActive){var e=De(this.selActive,this.$el);this.toggles.forEach((function(i){return je(i,t.cls,b(e,i))}))}},immediate:!0},target:function(t,e){return ze(t.target,e)},children:{get:function(){return Ut(this.target)},watch:function(t,e){var i,n;n=e,(i=t).length===n.length&&i.every((function(t){return~n.indexOf(t)}))||this.updateState()}}},events:[{name:"click",delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.apply(t.current)}}],methods:{apply:function(t){this.setState(vr(t,this.attrItem,this.getState()))},getState:function(){var t=this;return this.toggles.filter((function(e){return Fe(e,t.cls)})).reduce((function(e,i){return vr(i,t.attrItem,e)}),{filter:{"":""},sort:[]})},setState:function(t,e){var i=this;void 0===e&&(e=!0),t=G({filter:{"":""},sort:[]},t),Jt(this.$el,"beforeFilter",[this,t]);var n=this.children;this.toggles.forEach((function(e){return je(e,i.cls,!!function(t,e,i){var n=i.filter;void 0===n&&(n={"":""});var r=i.sort,o=r[0],s=r[1],a=mr(t,e),u=a.filter;void 0===u&&(u="");var h=a.group;void 0===h&&(h="");var c=a.sort,l=a.order;return void 0===l&&(l="asc"),H(c)?h in n&&u===n[h]||!u&&h&&!(h in n)&&!n[""]:o===c&&s===l}(e,i.attrItem,t))}));var r=function(){var e=function(t){var e=t.filter,i="";return J(e,(function(t){return i+=t||""})),i}(t);n.forEach((function(t){return Ye(t,"display",e&&!zt(t,e)?"none":"")}));var r=t.sort,o=r[0],s=r[1];if(o){var a=function(t,e,i){return G([],t).sort((function(t,n){return ut(t,e).localeCompare(ut(n,e),void 0,{numeric:!0})*("asc"===i||-1)}))}(n,o,s);U(a,n)||a.forEach((function(t){return ye(i.target,t)}))}};e?this.animate(r).then((function(){return Jt(i.$el,"afterFilter",[i])})):(r(),Jt(this.$el,"afterFilter",[this]))},updateState:function(){var t=this;yi.write((function(){return t.setState(t.getState(),!1)}))}}};function mr(t,e){return Ni(ut(t,e),["filter"])}function vr(t,e,i){var n=mr(t,e),r=n.filter,o=n.group,s=n.sort,a=n.order;return void 0===a&&(a="asc"),(r||H(s))&&(o?r?(delete i.filter[""],i.filter[o]=r):(delete i.filter[o],(O(i.filter)||""in i.filter)&&(i.filter={"":r||""})):i.filter={"":r||""}),H(s)||(i.sort=[s,a]),i}var wr={slide:{show:function(t){return[{transform:xr(-100*t)},{transform:xr()}]},percent:function(t){return br(t)},translate:function(t,e){return[{transform:xr(-100*e*t)},{transform:xr(100*e*(1-t))}]}}};function br(t){return Math.abs(Ye(t,"transform").split(",")[4]/t.offsetWidth)||0}function xr(t,e){return void 0===t&&(t=0),void 0===e&&(e="%"),t+=t?e:"",ct?"translateX("+t+")":"translate3d("+t+", 0, 0)"}function yr(t){return"scale3d("+t+", "+t+", 1)"}var kr=G({},wr,{fade:{show:function(){return[{opacity:0},{opacity:1}]},percent:function(t){return 1-Ye(t,"opacity")},translate:function(t){return[{opacity:1-t},{opacity:t}]}},scale:{show:function(){return[{opacity:0,transform:yr(.8)},{opacity:1,transform:yr(1)}]},percent:function(t){return 1-Ye(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:yr(1-.2*t)},{opacity:t,transform:yr(.8+.2*t)}]}}});function $r(t,e,i){Jt(t,Zt(e,!1,!1,i))}var Sr={props:{autoplay:Boolean,autoplayInterval:Number,pauseOnHover:Boolean},data:{autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0},connected:function(){this.autoplay&&this.startAutoplay()},disconnected:function(){this.stopAutoplay()},update:function(){ot(this.slides,"tabindex","-1")},events:[{name:"visibilitychange",el:ht&&document,filter:function(){return this.autoplay},handler:function(){document.hidden?this.stopAutoplay():this.startAutoplay()}}],methods:{startAutoplay:function(){var t=this;this.stopAutoplay(),this.interval=setInterval((function(){return(!t.draggable||!ze(":focus",t.$el))&&(!t.pauseOnHover||!zt(t.$el,":hover"))&&!t.stack.length&&t.show("next")}),this.autoplayInterval)},stopAutoplay:function(){this.interval&&clearInterval(this.interval)}}},Ir={props:{draggable:Boolean},data:{draggable:!0,threshold:10},created:function(){var t=this;["start","move","end"].forEach((function(e){var i=t[e];t[e]=function(e){var n=ue(e).x*(lt?-1:1);t.prevPos=n!==t.pos?t.pos:t.prevPos,t.pos=n,i(e)}}))},events:[{name:gt,delegate:function(){return this.selSlides},handler:function(t){var e;!this.draggable||!ae(t)&&(!(e=t.target).children.length&&e.childNodes.length)||Bt(t.target,Wt)||t.button>0||this.length<2||this.start(t)}},{name:"touchmove",passive:!1,handler:"move",filter:function(){return"touchmove"===mt},delegate:function(){return this.selSlides}},{name:"dragstart",handler:function(t){t.preventDefault()}}],methods:{start:function(){var t=this;this.drag=this.pos,this._transitioner?(this.percent=this._transitioner.percent(),this.drag+=this._transitioner.getDistance()*this.percent*this.dir,this._transitioner.cancel(),this._transitioner.translate(this.percent),this.dragging=!0,this.stack=[]):this.prevIndex=this.index;var e="touchmove"!==mt?Xt(document,mt,this.move,{passive:!1}):et;this.unbindMove=function(){e(),t.unbindMove=null},Xt(window,"scroll",this.unbindMove),Xt(window.visualViewport,"resize",this.unbindMove),Xt(document,vt+" "+xt,this.end,!0),Ye(this.list,"userSelect","none")},move:function(t){var e=this;if(this.unbindMove){var i=this.pos-this.drag;if(!(0===i||this.prevPos===this.pos||!this.dragging&&Math.abs(i)<this.threshold)){Ye(this.list,"pointerEvents","none"),t.cancelable&&t.preventDefault(),this.dragging=!0,this.dir=i<0?1:-1;for(var n=this.slides,r=this.prevIndex,o=Math.abs(i),s=this.getIndex(r+this.dir,r),a=this._getDistance(r,s)||n[r].offsetWidth;s!==r&&o>a;)this.drag-=a*this.dir,r=s,o-=a,s=this.getIndex(r+this.dir,r),a=this._getDistance(r,s)||n[r].offsetWidth;this.percent=o/a;var u,h=n[r],c=n[s],l=this.index!==s,d=r===s;[this.index,this.prevIndex].filter((function(t){return!b([s,r],t)})).forEach((function(t){Jt(n[t],"itemhidden",[e]),d&&(u=!0,e.prevIndex=r)})),(this.index===r&&this.prevIndex!==r||u)&&Jt(n[this.index],"itemshown",[this]),l&&(this.prevIndex=r,this.index=s,!d&&Jt(h,"beforeitemhide",[this]),Jt(c,"beforeitemshow",[this])),this._transitioner=this._translate(Math.abs(this.percent),h,!d&&c),l&&(!d&&Jt(h,"itemhide",[this]),Jt(c,"itemshow",[this]))}}},end:function(){if(Gt(window,"scroll",this.unbindMove),Gt(window.visualViewport,"resize",this.unbindMove),this.unbindMove&&this.unbindMove(),Gt(document,vt,this.end,!0),this.dragging)if(this.dragging=null,this.index===this.prevIndex)this.percent=1-this.percent,this.dir*=-1,this._show(!1,this.index,!0),this._transitioner=null;else{var t=(lt?this.dir*(lt?1:-1):this.dir)<0==this.prevPos>this.pos;this.index=t?this.index:this.prevIndex,t&&(this.percent=1-this.percent),this.show(this.dir>0&&!t||this.dir<0&&t?"next":"previous",!0)}Ye(this.list,{userSelect:"",pointerEvents:""}),this.drag=this.percent=null}}},Tr={mixins:[Sr,Ir,{data:{selNav:!1},computed:{nav:function(t,e){return ze(t.selNav,e)},selNavItem:function(t){var e=t.attrItem;return"["+e+"],[data-"+e+"]"},navItems:function(t,e){return De(this.selNavItem,e)}},update:{write:function(){var t=this;this.nav&&this.length!==this.nav.children.length&&xe(this.nav,this.slides.map((function(e,i){return"<li "+t.attrItem+'="'+i+'"><a href></a></li>'})).join("")),je(De(this.selNavItem,this.$el).concat(this.nav),"uk-hidden",!this.maxIndex),this.updateNav()},events:["resize"]},events:[{name:"click",delegate:function(){return this.selNavItem},handler:function(t){t.preventDefault(),this.show(ut(t.current,this.attrItem))}},{name:"itemshow",handler:"updateNav"}],methods:{updateNav:function(){var t=this,e=this.getValidIndex();this.navItems.forEach((function(i){var n=ut(i,t.attrItem);je(i,t.clsActive,F(n)===e),je(i,"uk-invisible",t.finite&&("previous"===n&&0===e||"next"===n&&e>=t.maxIndex))}))}}}],props:{clsActivated:Boolean,easing:String,index:Number,finite:Boolean,velocity:Number,selSlides:String},data:function(){return{easing:"ease",finite:!1,velocity:1,index:0,prevIndex:-1,stack:[],percent:0,clsActive:"uk-active",clsActivated:!1,Transitioner:!1,transitionOptions:{}}},connected:function(){this.prevIndex=-1,this.index=this.getValidIndex(this.index),this.stack=[]},disconnected:function(){Oe(this.slides,this.clsActive)},computed:{duration:function(t,e){var i=t.velocity;return Er(e.offsetWidth/i)},list:function(t,e){return ze(t.selList,e)},maxIndex:function(){return this.length-1},selSlides:function(t){return t.selList+" "+(t.selSlides||"> *")},slides:{get:function(){return De(this.selSlides,this.$el)},watch:function(){this.$reset()}},length:function(){return this.slides.length}},events:{itemshown:function(){this.$update(this.list)}},methods:{show:function(t,e){var i=this;if(void 0===e&&(e=!1),!this.dragging&&this.length){var n=this.stack,r=e?0:n.length,o=function(){n.splice(r,1),n.length&&i.show(n.shift(),!0)};if(n[e?"unshift":"push"](t),!e&&n.length>1)2===n.length&&this._transitioner.forward(Math.min(this.duration,200));else{var s=this.getIndex(this.index),a=Fe(this.slides,this.clsActive)&&this.slides[s],u=this.getIndex(t,this.index),h=this.slides[u];if(a!==h){if(this.dir=function(t,e){return"next"===t?1:"previous"===t||t<e?-1:1}(t,s),this.prevIndex=s,this.index=u,a&&!Jt(a,"beforeitemhide",[this])||!Jt(h,"beforeitemshow",[this,a]))return this.index=this.prevIndex,void o();var c=this._show(a,h,e).then((function(){return a&&Jt(a,"itemhidden",[i]),Jt(h,"itemshown",[i]),new he((function(t){yi.write((function(){n.shift(),n.length?i.show(n.shift(),!0):i._transitioner=null,t()}))}))}));return a&&Jt(a,"itemhide",[this]),Jt(h,"itemshow",[this]),c}o()}}},getIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.index),tt(we(t,this.slides,e,this.finite),0,this.maxIndex)},getValidIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),this.getIndex(t,e)},_show:function(t,e,i){if(this._transitioner=this._getTransitioner(t,e,this.dir,G({easing:i?e.offsetWidth<600?"cubic-bezier(0.25, 0.46, 0.45, 0.94)":"cubic-bezier(0.165, 0.84, 0.44, 1)":this.easing},this.transitionOptions)),!i&&!t)return this._translate(1),he.resolve();var n=this.stack.length;return this._transitioner[n>1?"forward":"show"](n>1?Math.min(this.duration,75+75/(n-1)):this.duration,this.percent)},_getDistance:function(t,e){return this._getTransitioner(t,t!==e&&e).getDistance()},_translate:function(t,e,i){void 0===e&&(e=this.prevIndex),void 0===i&&(i=this.index);var n=this._getTransitioner(e!==i&&e,i);return n.translate(t),n},_getTransitioner:function(t,e,i,n){return void 0===t&&(t=this.prevIndex),void 0===e&&(e=this.index),void 0===i&&(i=this.dir||1),void 0===n&&(n=this.transitionOptions),new this.Transitioner(B(t)?this.slides[t]:t,B(e)?this.slides[e]:e,i*(lt?-1:1),n)}}};function Er(t){return.5*t+300}var _r={mixins:[Tr],props:{animation:String},data:{animation:"slide",clsActivated:"uk-transition-active",Animations:wr,Transitioner:function(t,e,i,n){var r=n.animation,o=n.easing,s=r.percent,a=r.translate,u=r.show;void 0===u&&(u=et);var h=u(i),c=new ce;return{dir:i,show:function(n,r,s){var a=this;void 0===r&&(r=0);var u=s?"linear":o;return n-=Math.round(n*tt(r,-1,1)),this.translate(r),$r(e,"itemin",{percent:r,duration:n,timing:u,dir:i}),$r(t,"itemout",{percent:1-r,duration:n,timing:u,dir:i}),he.all([ei.start(e,h[1],n,u),ei.start(t,h[0],n,u)]).then((function(){a.reset(),c.resolve()}),et),c.promise},stop:function(){return ei.stop([e,t])},cancel:function(){ei.cancel([e,t])},reset:function(){for(var i in h[0])Ye([e,t],i,"")},forward:function(i,n){return void 0===n&&(n=this.percent()),ei.cancel([e,t]),this.show(i,n,!0)},translate:function(n){this.reset();var r=a(n,i);Ye(e,r[1]),Ye(t,r[0]),$r(e,"itemtranslatein",{percent:n,dir:i}),$r(t,"itemtranslateout",{percent:1-n,dir:i})},percent:function(){return s(t||e,e,i)},getDistance:function(){return t&&t.offsetWidth}}}},computed:{animation:function(t){var e=t.animation,i=t.Animations;return G(i[e]||i.slide,{name:e})},transitionOptions:function(){return{animation:this.animation}}},events:{"itemshow itemhide itemshown itemhidden":function(t){var e=t.target;this.$update(e)},beforeitemshow:function(t){Pe(t.target,this.clsActive)},itemshown:function(t){Pe(t.target,this.clsActivated)},itemhidden:function(t){Oe(t.target,this.clsActive,this.clsActivated)}}},Cr={mixins:[Rn,Yn,Xi,_r],functional:!0,props:{delayControls:Number,preload:Number,videoAutoplay:Boolean,template:String},data:function(){return{preload:1,videoAutoplay:!1,delayControls:3e3,items:[],cls:"uk-open",clsPage:"uk-lightbox-page",selList:".uk-lightbox-items",attrItem:"uk-lightbox-item",selClose:".uk-close-large",selCaption:".uk-lightbox-caption",pauseOnHover:!1,velocity:2,Animations:kr,template:'<div class="uk-lightbox uk-overflow-hidden"> <ul class="uk-lightbox-items"></ul> <div class="uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque"> <button class="uk-lightbox-toolbar-icon uk-close-large" type="button" uk-close></button> </div> <a class="uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade" href uk-slidenav-previous uk-lightbox-item="previous"></a> <a class="uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade" href uk-slidenav-next uk-lightbox-item="next"></a> <div class="uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque"></div> </div>'}},created:function(){var t=ze(this.template),e=ze(this.selList,t);this.items.forEach((function(){return ye(e,"<li>")})),this.$mount(ye(this.container,t))},computed:{caption:function(t,e){return t.selCaption,ze(".uk-lightbox-caption",e)}},events:[{name:mt+" "+gt+" keydown",handler:"showControls"},{name:"click",self:!0,delegate:function(){return this.selSlides},handler:function(t){t.defaultPrevented||this.hide()}},{name:"shown",self:!0,handler:function(){this.showControls()}},{name:"hide",self:!0,handler:function(){this.hideControls(),Oe(this.slides,this.clsActive),ei.stop(this.slides)}},{name:"hidden",self:!0,handler:function(){this.$destroy(!0)}},{name:"keyup",el:ht&&document,handler:function(t){if(this.isToggled(this.$el)&&this.draggable)switch(t.keyCode){case 37:this.show("previous");break;case 39:this.show("next")}}},{name:"beforeitemshow",handler:function(t){this.isToggled()||(this.draggable=!1,t.preventDefault(),this.toggleElement(this.$el,!0,!1),this.animation=kr.scale,Oe(t.target,this.clsActive),this.stack.splice(1,0,this.index))}},{name:"itemshow",handler:function(){xe(this.caption,this.getItem().caption||"");for(var t=-this.preload;t<=this.preload;t++)this.loadItem(this.index+t)}},{name:"itemshown",handler:function(){this.draggable=this.$props.draggable}},{name:"itemload",handler:function(t,e){var i=this,n=e.source,r=e.type,o=e.alt;void 0===o&&(o="");var s=e.poster,a=e.attrs;if(void 0===a&&(a={}),this.setItem(e,"<span uk-spinner></span>"),n){var u,h={frameborder:"0",allow:"autoplay",allowfullscreen:"",style:"max-width: 100%; box-sizing: border-box;","uk-responsive":"","uk-video":""+this.videoAutoplay};if("image"===r||n.match(/\.(jpe?g|png|gif|svg|webp)($|\?)/i))ge(n,a.srcset,a.size).then((function(t){var r=t.width,s=t.height;return i.setItem(e,Ar("img",G({src:n,width:r,height:s,alt:o},a)))}),(function(){return i.setError(e)}));else if("video"===r||n.match(/\.(mp4|webm|ogv)($|\?)/i)){var c=Ar("video",G({src:n,poster:s,controls:"",playsinline:"","uk-video":""+this.videoAutoplay},a));Xt(c,"loadedmetadata",(function(){ot(c,{width:c.videoWidth,height:c.videoHeight}),i.setItem(e,c)})),Xt(c,"error",(function(){return i.setError(e)}))}else"iframe"===r||n.match(/\.(html|php)($|\?)/i)?this.setItem(e,Ar("iframe",G({src:n,frameborder:"0",allowfullscreen:"",class:"uk-lightbox-iframe"},a))):(u=n.match(/\/\/(?:.*?youtube(-nocookie)?\..*?[?&]v=|youtu\.be\/)([\w-]{11})[&?]?(.*)?/))?this.setItem(e,Ar("iframe",G({src:"https://www.youtube"+(u[1]||"")+".com/embed/"+u[2]+(u[3]?"?"+u[3]:""),width:1920,height:1080},h,a))):(u=n.match(/\/\/.*?vimeo\.[a-z]+\/(\d+)[&?]?(.*)?/))&&pe("https://vimeo.com/api/oembed.json?maxwidth=1920&url="+encodeURI(n),{responseType:"json",withCredentials:!1}).then((function(t){var n=t.response,r=n.height,o=n.width;return i.setItem(e,Ar("iframe",G({src:"https://player.vimeo.com/video/"+u[1]+(u[2]?"?"+u[2]:""),width:o,height:r},h,a)))}),(function(){return i.setError(e)}))}}}],methods:{loadItem:function(t){void 0===t&&(t=this.index);var e=this.getItem(t);this.getSlide(e).childElementCount||Jt(this.$el,"itemload",[e])},getItem:function(t){return void 0===t&&(t=this.index),this.items[we(t,this.slides)]},setItem:function(t,e){Jt(this.$el,"itemloaded",[this,xe(this.getSlide(t),e)])},getSlide:function(t){return this.slides[this.items.indexOf(t)]},setError:function(t){this.setItem(t,'<span uk-icon="icon: bolt; ratio: 2"></span>')},showControls:function(){clearTimeout(this.controlsTimer),this.controlsTimer=setTimeout(this.hideControls,this.delayControls),Pe(this.$el,"uk-active","uk-transition-active")},hideControls:function(){Oe(this.$el,"uk-active","uk-transition-active")}}};function Ar(t,e){var i=Me("<"+t+">");return ot(i,e),i}var Mr,Nr={install:function(t,e){t.lightboxPanel||t.component("lightboxPanel",Cr),G(e.props,t.component("lightboxPanel").options.props)},props:{toggle:String},data:{toggle:"a"},computed:{toggles:{get:function(t,e){return De(t.toggle,e)},watch:function(){this.hide()}}},disconnected:function(){this.hide()},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),this.show(t.current)}}],methods:{show:function(t){var e=this,i=Q(this.toggles.map(zr),"source");if(M(t)){var n=zr(t).source;t=y(i,(function(t){var e=t.source;return n===e}))}return this.panel=this.panel||this.$create("lightboxPanel",G({},this.$props,{items:i})),Xt(this.panel.$el,"hidden",(function(){return e.panel=!1})),this.panel.show(t)},hide:function(){return this.panel&&this.panel.hide()}}};function zr(t){var e={};return["href","caption","type","poster","alt","attrs"].forEach((function(i){e["href"===i?"source":i]=ut(t,i)})),e.attrs=Ni(e.attrs),e}var Dr={functional:!0,args:["message","status"],data:{message:"",status:"",timeout:5e3,group:null,pos:"top-center",clsContainer:"uk-notification",clsClose:"uk-notification-close",clsMsg:"uk-notification-message"},install:function(t){t.notification.closeAll=function(e,i){Ne(document.body,(function(n){var r=t.getComponent(n,"notification");!r||e&&e!==r.group||r.close(i)}))}},computed:{marginProp:function(t){return"margin"+(d(t.pos,"top")?"Top":"Bottom")},startProps:function(){var t;return(t={opacity:0})[this.marginProp]=-this.$el.offsetHeight,t}},created:function(){var t=ze("."+this.clsContainer+"-"+this.pos,this.$container)||ye(this.$container,'<div class="'+this.clsContainer+" "+this.clsContainer+"-"+this.pos+'" style="display: block"></div>');this.$mount(ye(t,'<div class="'+this.clsMsg+(this.status?" "+this.clsMsg+"-"+this.status:"")+'"> <a href class="'+this.clsClose+'" data-uk-close></a> <div>'+this.message+"</div> </div>"))},connected:function(){var t,e=this,i=j(Ye(this.$el,this.marginProp));ei.start(Ye(this.$el,this.startProps),(t={opacity:1},t[this.marginProp]=i,t)).then((function(){e.timeout&&(e.timer=setTimeout(e.close,e.timeout))}))},events:(Mr={click:function(t){Bt(t.target,'a[href="#"],a[href=""]')&&t.preventDefault(),this.close()}},Mr[wt]=function(){this.timer&&clearTimeout(this.timer)},Mr[bt]=function(){this.timeout&&(this.timer=setTimeout(this.close,this.timeout))},Mr),methods:{close:function(t){var e=this,i=function(){var t=e.$el.parentNode;Jt(e.$el,"close",[e]),Ie(e.$el),t&&!t.hasChildNodes()&&Ie(t)};this.timer&&clearTimeout(this.timer),t?i():ei.start(this.$el,this.startProps).then(i)}}},Br=["x","y","bgx","bgy","rotate","scale","color","backgroundColor","borderColor","opacity","blur","hue","grayscale","invert","saturate","sepia","fopacity","stroke"],Pr={mixins:[Wn],props:Br.reduce((function(t,e){return t[e]="list",t}),{}),data:Br.reduce((function(t,e){return t[e]=void 0,t}),{}),computed:{props:function(t,e){var i=this;return Br.reduce((function(n,r){if(H(t[r]))return n;var o,s,a,u=r.match(/color/i),h=u||"opacity"===r,c=t[r].slice(0);h&&Ye(e,r,""),c.length<2&&c.unshift(("scale"===r?1:h?Ye(e,r):0)||0);var l=function(t){return t.reduce((function(t,e){return D(e)&&e.replace(/-|\d/g,"").trim()||t}),"")}(c);if(u){var f=e.style.color;c=c.map((function(t){return function(t,e){return Ye(Ye(t,"color",e),"color").split(/[(),]/g).slice(1,-1).concat(1).slice(0,4).map(j)}(e,t)})),e.style.color=f}else if(d(r,"bg")){var p="bgy"===r?"height":"width";if(c=c.map((function(t){return bi(t,p,i.$el)})),Ye(e,"background-position-"+r[2],""),s=Ye(e,"backgroundPosition").split(" ")["x"===r[2]?0:1],i.covers){var g=Math.min.apply(Math,c),m=Math.max.apply(Math,c),v=c.indexOf(g)<c.indexOf(m);a=m-g,c=c.map((function(t){return t-(v?g:m)})),o=(v?-a:0)+"px"}else o=s}else c=c.map(j);if("stroke"===r){if(!c.some((function(t){return t})))return n;var w=kn(i.$el);Ye(e,"strokeDasharray",w),"%"===l&&(c=c.map((function(t){return t*w/100}))),c=c.reverse(),r="strokeDashoffset"}return n[r]={steps:c,unit:l,pos:o,bgPos:s,diff:a},n}),{})},bgProps:function(){var t=this;return["bgx","bgy"].filter((function(e){return e in t.props}))},covers:function(t,e){return function(t){var e=t.style.backgroundSize,i="cover"===Ye(Ye(t,"backgroundSize",""),"backgroundSize");return t.style.backgroundSize=e,i}(e)}},disconnected:function(){delete this._image},update:{read:function(t){var e=this;if(t.active=this.matchMedia,t.active){if(!t.image&&this.covers&&this.bgProps.length){var i=Ye(this.$el,"backgroundImage").replace(/^none|url\(["']?(.+?)["']?\)$/,"$1");if(i){var n=new Image;n.src=i,t.image=n,n.naturalWidth||(n.onload=function(){return e.$update()})}}var r=t.image;if(r&&r.naturalWidth){var o={width:this.$el.offsetWidth,height:this.$el.offsetHeight},s={width:r.naturalWidth,height:r.naturalHeight},a=rt.cover(s,o);this.bgProps.forEach((function(t){var i=e.props[t],n=i.diff,r=i.bgPos,u=i.steps,h="bgy"===t?"height":"width",c=a[h]-o[h];if(c<n)o[h]=a[h]+n-c;else if(c>n){var l=o[h]/bi(r,h,e.$el);l&&(e.props[t].steps=u.map((function(t){return t-(c-n)/l})))}a=rt.cover(s,o)})),t.dim=a}}},write:function(t){var e=t.dim;t.active?e&&Ye(this.$el,{backgroundSize:e.width+"px "+e.height+"px",backgroundRepeat:"no-repeat"}):Ye(this.$el,{backgroundSize:"",backgroundRepeat:""})},events:["resize"]},methods:{reset:function(){var t=this;J(this.getCss(0),(function(e,i){return Ye(t.$el,i,"")}))},getCss:function(t){var e=this.props;return Object.keys(e).reduce((function(i,n){var r=e[n],o=r.steps,s=r.unit,a=r.pos,u=function(t,e,i){void 0===i&&(i=2);var n=Or(t,e),r=n[0],o=n[1],s=n[2];return(B(r)?r+Math.abs(r-o)*s*(r<o?1:-1):+o).toFixed(i)}(o,t);switch(n){case"x":case"y":s=s||"px",i.transform+=" translate"+h(n)+"("+j(u).toFixed("px"===s?0:2)+s+")";break;case"rotate":s=s||"deg",i.transform+=" rotate("+(u+s)+")";break;case"scale":i.transform+=" scale("+u+")";break;case"bgy":case"bgx":i["background-position-"+n[2]]="calc("+a+" + "+u+"px)";break;case"color":case"backgroundColor":case"borderColor":var c=Or(o,t),l=c[0],d=c[1],f=c[2];i[n]="rgba("+l.map((function(t,e){return t+=f*(d[e]-t),3===e?j(t):parseInt(t,10)})).join(",")+")";break;case"blur":s=s||"px",i.filter+=" blur("+(u+s)+")";break;case"hue":s=s||"deg",i.filter+=" hue-rotate("+(u+s)+")";break;case"fopacity":s=s||"%",i.filter+=" opacity("+(u+s)+")";break;case"grayscale":case"invert":case"saturate":case"sepia":s=s||"%",i.filter+=" "+n+"("+(u+s)+")";break;default:i[n]=u}return i}),{transform:"",filter:""})}}};function Or(t,e){var i=t.length-1,n=Math.min(Math.floor(i*e),i-1),r=t.slice(n,n+2);return r.push(1===e?1:e%(1/i)*i),r}var Hr={mixins:[Pr],props:{target:String,viewport:Number,easing:Number},data:{target:!1,viewport:1,easing:1},computed:{target:function(t,e){var i=t.target;return function t(e){return e?"offsetTop"in e?e:t(e.parentNode):document.body}(i&&yt(i,e)||e)}},update:{read:function(t,e){var i=t.percent;if("scroll"!==e&&(i=!1),t.active){var n=i;return{percent:i=function(t,e){return tt(t*(1-(e-e*t)))}(Li(this.target)/(this.viewport||1),this.easing),style:n!==i&&this.getCss(i)}}},write:function(t){var e=t.style;t.active?e&&Ye(this.$el,e):this.reset()},events:["scroll","resize"]}},Lr={update:{write:function(){if(!this.stack.length&&!this.dragging){var t=this.getValidIndex(this.index);~this.prevIndex&&this.index===t||this.show(t)}},events:["resize"]}};function Fr(t,e,i){var n=Vr(t,e);return i?n-function(t,e){return ai(e).width/2-ai(t).width/2}(t,e):Math.min(n,jr(e))}function jr(t){return Math.max(0,Wr(t)-ai(t).width)}function Wr(t){return qr(t).reduce((function(t,e){return ai(e).width+t}),0)}function Vr(t,e){return(hi(t).left+(lt?ai(t).width-ai(e).width:0))*(lt?-1:1)}function Rr(t,e,i){Jt(t,Zt(e,!1,!1,i))}function qr(t){return Ut(t)}var Yr={mixins:[Ui,Tr,Lr],props:{center:Boolean,sets:Boolean},data:{center:!1,sets:!1,attrItem:"uk-slider-item",selList:".uk-slider-items",selNav:".uk-slider-nav",clsContainer:"uk-slider-container",Transitioner:function(t,e,i,n){var r=n.center,o=n.easing,s=n.list,a=new ce,u=t?Fr(t,s,r):Fr(e,s,r)+ai(e).width*i,h=e?Fr(e,s,r):u+ai(t).width*i*(lt?-1:1);return{dir:i,show:function(e,n,r){void 0===n&&(n=0);var u=r?"linear":o;return e-=Math.round(e*tt(n,-1,1)),this.translate(n),t&&this.updateTranslates(),n=t?n:tt(n,0,1),Rr(this.getItemIn(),"itemin",{percent:n,duration:e,timing:u,dir:i}),t&&Rr(this.getItemIn(!0),"itemout",{percent:1-n,duration:e,timing:u,dir:i}),ei.start(s,{transform:xr(-h*(lt?-1:1),"px")},e,u).then(a.resolve,et),a.promise},stop:function(){return ei.stop(s)},cancel:function(){ei.cancel(s)},reset:function(){Ye(s,"transform","")},forward:function(t,e){return void 0===e&&(e=this.percent()),ei.cancel(s),this.show(t,e,!0)},translate:function(e){var n=this.getDistance()*i*(lt?-1:1);Ye(s,"transform",xr(tt(n-n*e-h,-Wr(s),ai(s).width)*(lt?-1:1),"px")),this.updateTranslates(),t&&(e=tt(e,-1,1),Rr(this.getItemIn(),"itemtranslatein",{percent:e,dir:i}),Rr(this.getItemIn(!0),"itemtranslateout",{percent:1-e,dir:i}))},percent:function(){return Math.abs((Ye(s,"transform").split(",")[4]*(lt?-1:1)+u)/(h-u))},getDistance:function(){return Math.abs(h-u)},getItemIn:function(e){void 0===e&&(e=!1);var n=this.getActives(),r=Z(qr(s),"offsetLeft"),o=ve(r,n[i*(e?-1:1)>0?n.length-1:0]);return~o&&r[o+(t&&!e?i:0)]},getActives:function(){var i=Fr(t||e,s,r);return Z(qr(s).filter((function(t){var e=Vr(t,s);return e>=i&&e+ai(t).width<=ai(s).width+i})),"offsetLeft")},updateTranslates:function(){var t=this.getActives();qr(s).forEach((function(i){var n=b(t,i);Rr(i,"itemtranslate"+(n?"in":"out"),{percent:n?1:0,dir:i.offsetLeft<=e.offsetLeft?1:-1})}))}}}},computed:{avgWidth:function(){return Wr(this.list)/this.length},finite:function(t){return t.finite||Math.ceil(Wr(this.list))<ai(this.list).width+qr(this.list).reduce((function(t,e){return Math.max(t,ai(e).width)}),0)+this.center},maxIndex:function(){if(!this.finite||this.center&&!this.sets)return this.length-1;if(this.center)return K(this.sets);Ye(this.slides,"order","");for(var t=jr(this.list),e=this.length;e--;)if(Vr(this.list.children[e],this.list)<t)return Math.min(e+1,this.length-1);return 0},sets:function(t){var e=this,i=t.sets,n=ai(this.list).width/(this.center?2:1),r=0,o=n,s=0;return!O(i=i&&this.slides.reduce((function(t,i,a){var u=ai(i).width;if(s+u>r&&(!e.center&&a>e.maxIndex&&(a=e.maxIndex),!b(t,a))){var h=e.slides[a+1];e.center&&h&&u<o-ai(h).width/2?o-=u:(o=n,t.push(a),r=s+n+(e.center?u/2:0))}return s+=u,t}),[]))&&i},transitionOptions:function(){return{center:this.center,list:this.list}}},connected:function(){je(this.$el,this.clsContainer,!ze("."+this.clsContainer,this.$el))},update:{write:function(){var t=this;De("["+this.attrItem+"],[data-"+this.attrItem+"]",this.$el).forEach((function(e){var i=ut(e,t.attrItem);t.maxIndex&&je(e,"uk-hidden",P(i)&&(t.sets&&!b(t.sets,j(i))||i>t.maxIndex))})),!this.length||this.dragging||this.stack.length||(this.reorder(),this._translate(1));var e=this._getTransitioner(this.index).getActives();this.slides.forEach((function(i){return je(i,t.clsActive,b(e,i))})),(!this.sets||b(this.sets,j(this.index)))&&this.slides.forEach((function(i){return je(i,t.clsActivated,b(e,i))}))},events:["resize"]},events:{beforeitemshow:function(t){!this.dragging&&this.sets&&this.stack.length<2&&!b(this.sets,this.index)&&(this.index=this.getValidIndex());var e=Math.abs(this.index-this.prevIndex+(this.dir>0&&this.index<this.prevIndex||this.dir<0&&this.index>this.prevIndex?(this.maxIndex+1)*this.dir:0));if(!this.dragging&&e>1){for(var i=0;i<e;i++)this.stack.splice(1,0,this.dir>0?"next":"previous");t.preventDefault()}else this.duration=Er(this.avgWidth/this.velocity)*(ai(this.dir<0||!this.slides[this.prevIndex]?this.slides[this.index]:this.slides[this.prevIndex]).width/this.avgWidth),this.reorder()},itemshow:function(){~this.prevIndex&&Pe(this._getTransitioner().getItemIn(),this.clsActive)}},methods:{reorder:function(){var t=this;if(this.finite)Ye(this.slides,"order","");else{var e=this.dir>0&&this.slides[this.prevIndex]?this.prevIndex:this.index;if(this.slides.forEach((function(i,n){return Ye(i,"order",t.dir>0&&n<e?1:t.dir<0&&n>=t.index?-1:"")})),this.center)for(var i=this.slides[e],n=ai(this.list).width/2-ai(i).width/2,r=0;n>0;){var o=this.getIndex(--r+e,e),s=this.slides[o];Ye(s,"order",o>e?-2:-1),n-=ai(s).width}}},getValidIndex:function(t,e){if(void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),t=this.getIndex(t,e),!this.sets)return t;var i;do{if(b(this.sets,t))return t;i=t,t=this.getIndex(t+this.dir,e)}while(t!==i);return t}}},Ur={mixins:[Pr],data:{selItem:"!li"},computed:{item:function(t,e){return yt(t.selItem,e)}},events:[{name:"itemshown",self:!0,el:function(){return this.item},handler:function(){Ye(this.$el,this.getCss(.5))}},{name:"itemin itemout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,i=t.detail,n=i.percent,r=i.duration,o=i.timing,s=i.dir;ei.cancel(this.$el),Ye(this.$el,this.getCss(Gr(e,s,n))),ei.start(this.$el,this.getCss(Xr(e)?.5:s>0?1:0),r,o).catch(et)}},{name:"transitioncanceled transitionend",self:!0,el:function(){return this.item},handler:function(){ei.cancel(this.$el)}},{name:"itemtranslatein itemtranslateout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,i=t.detail,n=i.percent,r=i.dir;ei.cancel(this.$el),Ye(this.$el,this.getCss(Gr(e,r,n)))}}]};function Xr(t){return p(t,"in")}function Gr(t,e,i){return i/=2,Xr(t)?e<0?1-i:i:e<0?i:1-i}var Kr,Jr,Zr=G({},wr,{fade:{show:function(){return[{opacity:0,zIndex:0},{zIndex:-1}]},percent:function(t){return 1-Ye(t,"opacity")},translate:function(t){return[{opacity:1-t,zIndex:0},{zIndex:-1}]}},scale:{show:function(){return[{opacity:0,transform:yr(1.5),zIndex:0},{zIndex:-1}]},percent:function(t){return 1-Ye(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:yr(1+.5*t),zIndex:0},{zIndex:-1}]}},pull:{show:function(t){return t<0?[{transform:xr(30),zIndex:-1},{transform:xr(),zIndex:0}]:[{transform:xr(-100),zIndex:0},{transform:xr(),zIndex:-1}]},percent:function(t,e,i){return i<0?1-br(e):br(t)},translate:function(t,e){return e<0?[{transform:xr(30*t),zIndex:-1},{transform:xr(-100*(1-t)),zIndex:0}]:[{transform:xr(100*-t),zIndex:0},{transform:xr(30*(1-t)),zIndex:-1}]}},push:{show:function(t){return t<0?[{transform:xr(100),zIndex:0},{transform:xr(),zIndex:-1}]:[{transform:xr(-30),zIndex:-1},{transform:xr(),zIndex:0}]},percent:function(t,e,i){return i>0?1-br(e):br(t)},translate:function(t,e){return e<0?[{transform:xr(100*t),zIndex:0},{transform:xr(-30*(1-t)),zIndex:-1}]:[{transform:xr(-30*t),zIndex:-1},{transform:xr(100*(1-t)),zIndex:0}]}}}),Qr={mixins:[Ui,_r,Lr],props:{ratio:String,minHeight:Number,maxHeight:Number},data:{ratio:"16:9",minHeight:!1,maxHeight:!1,selList:".uk-slideshow-items",attrItem:"uk-slideshow-item",selNav:".uk-slideshow-nav",Animations:Zr},update:{read:function(){var t=this.ratio.split(":").map(Number),e=t[0],i=t[1];return i=i*this.list.offsetWidth/e||0,this.minHeight&&(i=Math.max(this.minHeight,i)),this.maxHeight&&(i=Math.min(this.maxHeight,i)),{height:i-pi(this.list,"height","content-box")}},write:function(t){var e=t.height;e>0&&Ye(this.list,"minHeight",e)},events:["resize"]}},to={mixins:[Ui,lr],props:{group:String,threshold:Number,clsItem:String,clsPlaceholder:String,clsDrag:String,clsDragState:String,clsBase:String,clsNoDrag:String,clsEmpty:String,clsCustom:String,handle:String},data:{group:!1,threshold:5,clsItem:"uk-sortable-item",clsPlaceholder:"uk-sortable-placeholder",clsDrag:"uk-sortable-drag",clsDragState:"uk-drag",clsBase:"uk-sortable",clsNoDrag:"uk-sortable-nodrag",clsEmpty:"uk-sortable-empty",clsCustom:"",handle:!1,pos:{}},created:function(){var t=this;["init","start","move","end"].forEach((function(e){var i=t[e];t[e]=function(e){G(t.pos,ue(e)),i(e)}}))},events:{name:gt,passive:!1,handler:"init"},computed:{target:function(){return(this.$el.tBodies||[this.$el])[0]},items:function(){return Ut(this.target)},isEmpty:{get:function(){return O(this.items)},watch:function(t){je(this.target,this.clsEmpty,t)},immediate:!0},handles:{get:function(t,e){var i=t.handle;return i?De(i,e):this.items},watch:function(t,e){Ye(e,{touchAction:"",userSelect:""}),Ye(t,{touchAction:pt?"none":"",userSelect:"none"})},immediate:!0}},update:{write:function(){if(this.drag&&Pt(this.placeholder)){var t=this.pos,e=t.x,i=t.y,n=this.origin,r=n.offsetTop,o=n.offsetLeft,s=this.drag,a=s.offsetHeight,u=s.offsetWidth,h=ai(window),c=h.right,l=h.bottom,d=document.elementFromPoint(e,i);Ye(this.drag,{top:tt(i-r,0,l-a),left:tt(e-o,0,c-u)});var f=this.getSortable(d),p=this.getSortable(this.placeholder),g=f!==p;if(f&&!qt(d,this.placeholder)&&(!g||f.group&&f.group===p.group)){if(d=f.target===d.parentNode&&d||f.items.filter((function(t){return qt(d,t)}))[0],g)p.remove(this.placeholder);else if(!d)return;f.insert(this.placeholder,d),b(this.touched,f)||this.touched.push(f)}}},events:["move"]},methods:{init:function(t){var e=t.target,i=t.button,n=t.defaultPrevented,r=this.items.filter((function(t){return qt(e,t)}))[0];!r||n||i>0||Vt(e)||qt(e,"."+this.clsNoDrag)||this.handle&&!qt(e,this.handle)||(t.preventDefault(),this.touched=[this],this.placeholder=r,this.origin=G({target:e,index:ve(r)},this.pos),Xt(document,mt,this.move),Xt(document,vt,this.end),this.threshold||this.start(t))},start:function(t){var e,i,n;this.drag=(e=this.$container,i=this.placeholder,ot(n=ye(e,i.outerHTML.replace(/(^<)(?:li|tr)|(?:li|tr)(\/>$)/g,"$1div$2")),"style",ot(n,"style")+";margin:0!important"),Ye(n,G({boxSizing:"border-box",width:i.offsetWidth,height:i.offsetHeight,overflow:"hidden"},Ye(i,["paddingLeft","paddingRight","paddingTop","paddingBottom"]))),li(n.firstElementChild,li(i.firstElementChild)),n);var r=this.placeholder.getBoundingClientRect(),o=r.left,s=r.top;G(this.origin,{offsetLeft:this.pos.x-o,offsetTop:this.pos.y-s}),Pe(this.drag,this.clsDrag,this.clsCustom),Pe(this.placeholder,this.clsPlaceholder),Pe(this.items,this.clsItem),Pe(document.documentElement,this.clsDragState),Jt(this.$el,"start",[this,this.placeholder]),function(t){var e=Date.now();Kr=setInterval((function(){var i=t.x,n=t.y;n+=window.pageYOffset;var r=.3*(Date.now()-e);e=Date.now(),Fi(document.elementFromPoint(i,t.y)).some((function(t){var e=t.scrollTop,i=t.scrollHeight,o=ai(ji(t)),s=o.top,a=o.bottom,u=o.height;if(s<n&&s+30>n)e-=r;else{if(!(a>n&&a-30<n))return;e+=r}if(e>0&&e<i-u)return Oi(t,e),!0}))}),15)}(this.pos),this.move(t)},move:function(t){this.drag?this.$emit("move"):(Math.abs(this.pos.x-this.origin.x)>this.threshold||Math.abs(this.pos.y-this.origin.y)>this.threshold)&&this.start(t)},end:function(t){if(Gt(document,mt,this.move),Gt(document,vt,this.end),Gt(window,"scroll",this.scroll),this.drag){clearInterval(Kr);var e=this.getSortable(this.placeholder);this===e?this.origin.index!==ve(this.placeholder)&&Jt(this.$el,"moved",[this,this.placeholder]):(Jt(e.$el,"added",[e,this.placeholder]),Jt(this.$el,"removed",[this,this.placeholder])),Jt(this.$el,"stop",[this,this.placeholder]),Ie(this.drag),this.drag=null;var i=this.touched.map((function(t){return t.clsPlaceholder+" "+t.clsItem})).join(" ");this.touched.forEach((function(t){return Oe(t.items,i)})),Oe(document.documentElement,this.clsDragState)}else"touchend"===t.type&&t.target.click()},insert:function(t,e){var i=this;Pe(this.items,this.clsItem);var n=function(){e?!qt(t,i.target)||function(t,e){return t.parentNode===e.parentNode&&ve(t)>ve(e)}(t,e)?ke(e,t):$e(e,t):ye(i.target,t)};this.animation?this.animate(n):n()},remove:function(t){qt(t,this.target)&&(this.animation?this.animate((function(){return Ie(t)})):Ie(t))},getSortable:function(t){return t&&(this.$getComponent(t,"sortable")||this.getSortable(t.parentNode))}}},eo=[],io={mixins:[Rn,Xi,nn],args:"title",props:{delay:Number,title:String},data:{pos:"top",title:"",delay:0,animation:["uk-animation-scale-up"],duration:100,cls:"uk-active",clsPos:"uk-tooltip"},beforeConnect:function(){this._hasTitle=st(this.$el,"title"),ot(this.$el,{title:"","aria-expanded":!1})},disconnected:function(){this.hide(),ot(this.$el,{title:this._hasTitle?this.title:null,"aria-expanded":null})},methods:{show:function(){var t=this;!this.isActive()&&this.title&&(eo.forEach((function(t){return t.hide()})),eo.push(this),this._unbind=Xt(document,vt,(function(e){return!qt(e.target,t.$el)&&t.hide()})),clearTimeout(this.showTimer),this.showTimer=setTimeout(this._show,this.delay))},hide:function(){var t=this;this.isActive()&&!zt(this.$el,"input:focus")&&this.toggleElement(this.tooltip,!1,!1).then((function(){eo.splice(eo.indexOf(t),1),clearTimeout(t.showTimer),t.tooltip=Ie(t.tooltip),t._unbind()}))},_show:function(){var t=this;this.tooltip=ye(this.container,'<div class="'+this.clsPos+'"> <div class="'+this.clsPos+'-inner">'+this.title+"</div> </div>"),Xt(this.tooltip,"toggled",(function(){var e=t.isToggled(t.tooltip);ot(t.$el,"aria-expanded",e),e&&(t.positionAt(t.tooltip,t.$el),t.origin="y"===t.getAxis()?wi(t.dir)+"-"+t.align:t.align+"-"+wi(t.dir))})),this.toggleElement(this.tooltip,!0)},isActive:function(){return b(eo,this)}},events:(Jr={focus:"show",blur:"hide"},Jr[wt+" "+bt]=function(t){ae(t)||(t.type===wt?this.show():this.hide())},Jr[gt]=function(t){ae(t)&&(this.isActive()?this.hide():this.show())},Jr)},no={props:{allow:String,clsDragover:String,concurrent:Number,maxSize:Number,method:String,mime:String,msgInvalidMime:String,msgInvalidName:String,msgInvalidSize:String,multiple:Boolean,name:String,params:Object,type:String,url:String},data:{allow:!1,clsDragover:"uk-dragover",concurrent:1,maxSize:0,method:"POST",mime:!1,msgInvalidMime:"Invalid File Type: %s",msgInvalidName:"Invalid File Name: %s",msgInvalidSize:"Invalid File Size: %s Kilobytes Max",multiple:!1,name:"files[]",params:{},type:"",url:"",abort:et,beforeAll:et,beforeSend:et,complete:et,completeAll:et,error:et,fail:et,load:et,loadEnd:et,loadStart:et,progress:et},events:{change:function(t){zt(t.target,'input[type="file"]')&&(t.preventDefault(),t.target.files&&this.upload(t.target.files),t.target.value="")},drop:function(t){oo(t);var e=t.dataTransfer;e&&e.files&&(Oe(this.$el,this.clsDragover),this.upload(e.files))},dragenter:function(t){oo(t)},dragover:function(t){oo(t),Pe(this.$el,this.clsDragover)},dragleave:function(t){oo(t),Oe(this.$el,this.clsDragover)}},methods:{upload:function(t){var e=this;if(t.length){Jt(this.$el,"upload",[t]);for(var i=0;i<t.length;i++){if(this.maxSize&&1e3*this.maxSize<t[i].size)return void this.fail(this.msgInvalidSize.replace("%s",this.maxSize));if(this.allow&&!ro(this.allow,t[i].name))return void this.fail(this.msgInvalidName.replace("%s",this.allow));if(this.mime&&!ro(this.mime,t[i].type))return void this.fail(this.msgInvalidMime.replace("%s",this.mime))}this.multiple||(t=[t[0]]),this.beforeAll(this,t);var n=function(t,e){for(var i=[],n=0;n<t.length;n+=e){for(var r=[],o=0;o<e;o++)r.push(t[n+o]);i.push(r)}return i}(t,this.concurrent),r=function(t){var i=new FormData;for(var o in t.forEach((function(t){return i.append(e.name,t)})),e.params)i.append(o,e.params[o]);pe(e.url,{data:i,method:e.method,responseType:e.type,beforeSend:function(t){var i=t.xhr;i.upload&&Xt(i.upload,"progress",e.progress),["loadStart","load","loadEnd","abort"].forEach((function(t){return Xt(i,t.toLowerCase(),e[t])})),e.beforeSend(t)}}).then((function(t){e.complete(t),n.length?r(n.shift()):e.completeAll(t)}),(function(t){return e.error(t)}))};r(n.shift())}}}};function ro(t,e){return e.match(new RegExp("^"+t.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")+"$","i"))}function oo(t){t.preventDefault(),t.stopPropagation()}return J(Object.freeze({__proto__:null,Countdown:cr,Filter:gr,Lightbox:Nr,LightboxPanel:Cr,Notification:Dr,Parallax:Hr,Slider:Yr,SliderParallax:Ur,Slideshow:Qr,SlideshowParallax:Ur,Sortable:to,Tooltip:io,Upload:no}),(function(t,e){return Yi.component(e,t)})),Yi}()}))}();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlraXQuanMiLCJzb3VyY2VzIjpbInNyYy9qcy91aWtpdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgVUlraXQgMy40LjYgfCBodHRwczovL3d3dy5nZXR1aWtpdC5jb20gfCAoYykgMjAxNCAtIDIwMjAgWU9PdGhlbWUgfCBNSVQgTGljZW5zZSAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoJ3Vpa2l0JywgZmFjdG9yeSkgOlxuICAgIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLlVJa2l0ID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIG9ialByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqUHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gICAgZnVuY3Rpb24gaGFzT3duKG9iaiwga2V5KSB7XG4gICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgICB9XG5cbiAgICB2YXIgaHlwaGVuYXRlQ2FjaGUgPSB7fTtcbiAgICB2YXIgaHlwaGVuYXRlUmUgPSAvKFthLXpcXGRdKShbQS1aXSkvZztcblxuICAgIGZ1bmN0aW9uIGh5cGhlbmF0ZShzdHIpIHtcblxuICAgICAgICBpZiAoIShzdHIgaW4gaHlwaGVuYXRlQ2FjaGUpKSB7XG4gICAgICAgICAgICBoeXBoZW5hdGVDYWNoZVtzdHJdID0gc3RyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoaHlwaGVuYXRlUmUsICckMS0kMicpXG4gICAgICAgICAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaHlwaGVuYXRlQ2FjaGVbc3RyXTtcbiAgICB9XG5cbiAgICB2YXIgY2FtZWxpemVSZSA9IC8tKFxcdykvZztcblxuICAgIGZ1bmN0aW9uIGNhbWVsaXplKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSZSwgdG9VcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9VcHBlcihfLCBjKSB7XG4gICAgICAgIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdWNmaXJzdChzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5sZW5ndGggPyB0b1VwcGVyKG51bGwsIHN0ci5jaGFyQXQoMCkpICsgc3RyLnNsaWNlKDEpIDogJyc7XG4gICAgfVxuXG4gICAgdmFyIHN0clByb3RvdHlwZSA9IFN0cmluZy5wcm90b3R5cGU7XG4gICAgdmFyIHN0YXJ0c1dpdGhGbiA9IHN0clByb3RvdHlwZS5zdGFydHNXaXRoIHx8IGZ1bmN0aW9uIChzZWFyY2gpIHsgcmV0dXJuIHRoaXMubGFzdEluZGV4T2Yoc2VhcmNoLCAwKSA9PT0gMDsgfTtcblxuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0c1dpdGhGbi5jYWxsKHN0ciwgc2VhcmNoKTtcbiAgICB9XG5cbiAgICB2YXIgZW5kc1dpdGhGbiA9IHN0clByb3RvdHlwZS5lbmRzV2l0aCB8fCBmdW5jdGlvbiAoc2VhcmNoKSB7IHJldHVybiB0aGlzLnN1YnN0cigtc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDsgfTtcblxuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoKSB7XG4gICAgICAgIHJldHVybiBlbmRzV2l0aEZuLmNhbGwoc3RyLCBzZWFyY2gpO1xuICAgIH1cblxuICAgIHZhciBhcnJQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbiAgICB2YXIgaW5jbHVkZXNGbiA9IGZ1bmN0aW9uIChzZWFyY2gsIGkpIHsgcmV0dXJuICEhfnRoaXMuaW5kZXhPZihzZWFyY2gsIGkpOyB9O1xuICAgIHZhciBpbmNsdWRlc1N0ciA9IHN0clByb3RvdHlwZS5pbmNsdWRlcyB8fCBpbmNsdWRlc0ZuO1xuICAgIHZhciBpbmNsdWRlc0FycmF5ID0gYXJyUHJvdG90eXBlLmluY2x1ZGVzIHx8IGluY2x1ZGVzRm47XG5cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhvYmosIHNlYXJjaCkge1xuICAgICAgICByZXR1cm4gb2JqICYmIChpc1N0cmluZyhvYmopID8gaW5jbHVkZXNTdHIgOiBpbmNsdWRlc0FycmF5KS5jYWxsKG9iaiwgc2VhcmNoKTtcbiAgICB9XG5cbiAgICB2YXIgZmluZEluZGV4Rm4gPSBhcnJQcm90b3R5cGUuZmluZEluZGV4IHx8IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgICAgICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKGFyZ3VtZW50cyQxWzFdLCB0aGlzW2ldLCBpLCB0aGlzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRJbmRleEZuLmNhbGwoYXJyYXksIHByZWRpY2F0ZSk7XG4gICAgfVxuXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbic7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgdmFyIHRvU3RyaW5nID0gb2JqUHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzV2luZG93KG9iaikge1xuICAgICAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBvYmogPT09IG9iai53aW5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEb2N1bWVudChvYmopIHtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgb2JqLm5vZGVUeXBlID09PSA5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSlF1ZXJ5KG9iaikge1xuICAgICAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiAhIW9iai5qcXVlcnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOb2RlKG9iaikge1xuICAgICAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBvYmoubm9kZVR5cGUgPj0gMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQob2JqKSB7XG4gICAgICAgIHJldHVybiBpc09iamVjdChvYmopICYmIG9iai5ub2RlVHlwZSA9PT0gMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc05vZGVDb2xsZWN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9eXFxbb2JqZWN0IChOb2RlTGlzdHxIVE1MQ29sbGVjdGlvbilcXF0kLyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWVyaWModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSB8fCBpc1N0cmluZyh2YWx1ZSkgJiYgIWlzTmFOKHZhbHVlIC0gcGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gICAgICAgIHJldHVybiAhKGlzQXJyYXkob2JqKVxuICAgICAgICAgICAgPyBvYmoubGVuZ3RoXG4gICAgICAgICAgICA6IGlzT2JqZWN0KG9iailcbiAgICAgICAgICAgICAgICA/IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoXG4gICAgICAgICAgICAgICAgOiBmYWxzZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdm9pZCAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQm9vbGVhbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNCb29sZWFuKHZhbHVlKVxuICAgICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgICAgOiB2YWx1ZSA9PT0gJ3RydWUnIHx8IHZhbHVlID09PSAnMScgfHwgdmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgOiB2YWx1ZSA9PT0gJ2ZhbHNlJyB8fCB2YWx1ZSA9PT0gJzAnXG4gICAgICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgICB2YXIgbnVtYmVyID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICFpc05hTihudW1iZXIpID8gbnVtYmVyIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vZGUoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gaXNOb2RlKGVsZW1lbnQpXG4gICAgICAgICAgICA/IGVsZW1lbnRcbiAgICAgICAgICAgIDogaXNOb2RlQ29sbGVjdGlvbihlbGVtZW50KSB8fCBpc0pRdWVyeShlbGVtZW50KVxuICAgICAgICAgICAgICAgID8gZWxlbWVudFswXVxuICAgICAgICAgICAgICAgIDogaXNBcnJheShlbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICA/IHRvTm9kZShlbGVtZW50WzBdKVxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob2RlcyhlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBpc05vZGUoZWxlbWVudClcbiAgICAgICAgICAgID8gW2VsZW1lbnRdXG4gICAgICAgICAgICA6IGlzTm9kZUNvbGxlY3Rpb24oZWxlbWVudClcbiAgICAgICAgICAgICAgICA/IGFyclByb3RvdHlwZS5zbGljZS5jYWxsKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgOiBpc0FycmF5KGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgID8gZWxlbWVudC5tYXAodG9Ob2RlKS5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAgICAgOiBpc0pRdWVyeShlbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBlbGVtZW50LnRvQXJyYXkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b1dpbmRvdyhlbGVtZW50KSB7XG4gICAgICAgIGlmIChpc1dpbmRvdyhlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50ID0gdG9Ob2RlKGVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybiBlbGVtZW50XG4gICAgICAgICAgICA/IChpc0RvY3VtZW50KGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgPyBlbGVtZW50XG4gICAgICAgICAgICAgICAgOiBlbGVtZW50Lm93bmVyRG9jdW1lbnRcbiAgICAgICAgICAgICkuZGVmYXVsdFZpZXdcbiAgICAgICAgICAgIDogd2luZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTGlzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICAgIDogaXNTdHJpbmcodmFsdWUpXG4gICAgICAgICAgICAgICAgPyB2YWx1ZS5zcGxpdCgvLCg/IVteKF0qXFwpKS8pLm1hcChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGlzTnVtZXJpYyh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgPyB0b051bWJlcih2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiB0b0Jvb2xlYW4odmFsdWUudHJpbSgpKTsgfSlcbiAgICAgICAgICAgICAgICA6IFt2YWx1ZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ncyh0aW1lKSB7XG4gICAgICAgIHJldHVybiAhdGltZVxuICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICA6IGVuZHNXaXRoKHRpbWUsICdtcycpXG4gICAgICAgICAgICAgICAgPyB0b0Zsb2F0KHRpbWUpXG4gICAgICAgICAgICAgICAgOiB0b0Zsb2F0KHRpbWUpICogMTAwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyXG4gICAgICAgICAgICB8fCBpc09iamVjdCh2YWx1ZSlcbiAgICAgICAgICAgICYmIGlzT2JqZWN0KG90aGVyKVxuICAgICAgICAgICAgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aFxuICAgICAgICAgICAgJiYgZWFjaCh2YWx1ZSwgZnVuY3Rpb24gKHZhbCwga2V5KSB7IHJldHVybiB2YWwgPT09IG90aGVyW2tleV07IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN3YXAodmFsdWUsIGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoXG4gICAgICAgICAgICBuZXcgUmVnRXhwKChhICsgXCJ8XCIgKyBiKSwgJ2cnKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2ggPT09IGEgPyBiIDogYTsgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICB0YXJnZXQgPSBPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJnc1tpXTtcbiAgICAgICAgICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd24oc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVhY2gob2JqLCBjYikge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoZmFsc2UgPT09IGNiKG9ialtrZXldLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNvcnRCeShhcnJheSwgcHJvcCkge1xuICAgICAgICByZXR1cm4gYXJyYXkuc29ydChmdW5jdGlvbiAocmVmLCByZWYkMSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wQSA9IHJlZltwcm9wXTsgaWYgKCBwcm9wQSA9PT0gdm9pZCAwICkgcHJvcEEgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBwcm9wQiA9IHJlZiQxW3Byb3BdOyBpZiAoIHByb3BCID09PSB2b2lkIDAgKSBwcm9wQiA9IDA7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcEEgPiBwcm9wQlxuICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgIDogcHJvcEIgPiBwcm9wQVxuICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaXF1ZUJ5KGFycmF5LCBwcm9wKSB7XG4gICAgICAgIHZhciBzZWVuID0gbmV3IFNldCgpO1xuICAgICAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBjaGVjayA9IHJlZltwcm9wXTtcblxuICAgICAgICAgICAgcmV0dXJuIHNlZW4uaGFzKGNoZWNrKVxuICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgOiBzZWVuLmFkZChjaGVjaykgfHwgdHJ1ZTtcbiAgICAgICAgfSAvLyBJRSAxMSBkb2VzIG5vdCByZXR1cm4gdGhlIFNldCBvYmplY3RcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIG1pbiwgbWF4KSB7XG4gICAgICAgIGlmICggbWluID09PSB2b2lkIDAgKSBtaW4gPSAwO1xuICAgICAgICBpZiAoIG1heCA9PT0gdm9pZCAwICkgbWF4ID0gMTtcblxuICAgICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodG9OdW1iZXIobnVtYmVyKSB8fCAwLCBtaW4pLCBtYXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0UmVjdChyMSwgcjIpIHtcbiAgICAgICAgcmV0dXJuIHIxLmxlZnQgPCByMi5yaWdodCAmJlxuICAgICAgICAgICAgcjEucmlnaHQgPiByMi5sZWZ0ICYmXG4gICAgICAgICAgICByMS50b3AgPCByMi5ib3R0b20gJiZcbiAgICAgICAgICAgIHIxLmJvdHRvbSA+IHIyLnRvcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludEluUmVjdChwb2ludCwgcmVjdCkge1xuICAgICAgICByZXR1cm4gcG9pbnQueCA8PSByZWN0LnJpZ2h0ICYmXG4gICAgICAgICAgICBwb2ludC54ID49IHJlY3QubGVmdCAmJlxuICAgICAgICAgICAgcG9pbnQueSA8PSByZWN0LmJvdHRvbSAmJlxuICAgICAgICAgICAgcG9pbnQueSA+PSByZWN0LnRvcDtcbiAgICB9XG5cbiAgICB2YXIgRGltZW5zaW9ucyA9IHtcblxuICAgICAgICByYXRpbzogZnVuY3Rpb24oZGltZW5zaW9ucywgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBvYmo7XG5cblxuICAgICAgICAgICAgdmFyIGFQcm9wID0gcHJvcCA9PT0gJ3dpZHRoJyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgICAgICAgICAgcmV0dXJuICggb2JqID0ge30sIG9ialthUHJvcF0gPSBkaW1lbnNpb25zW3Byb3BdID8gTWF0aC5yb3VuZCh2YWx1ZSAqIGRpbWVuc2lvbnNbYVByb3BdIC8gZGltZW5zaW9uc1twcm9wXSkgOiBkaW1lbnNpb25zW2FQcm9wXSwgb2JqW3Byb3BdID0gdmFsdWUsIG9iaiApO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbnRhaW46IGZ1bmN0aW9uKGRpbWVuc2lvbnMsIG1heERpbWVuc2lvbnMpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICBkaW1lbnNpb25zID0gYXNzaWduKHt9LCBkaW1lbnNpb25zKTtcblxuICAgICAgICAgICAgZWFjaChkaW1lbnNpb25zLCBmdW5jdGlvbiAoXywgcHJvcCkgeyByZXR1cm4gZGltZW5zaW9ucyA9IGRpbWVuc2lvbnNbcHJvcF0gPiBtYXhEaW1lbnNpb25zW3Byb3BdXG4gICAgICAgICAgICAgICAgPyB0aGlzJDEucmF0aW8oZGltZW5zaW9ucywgcHJvcCwgbWF4RGltZW5zaW9uc1twcm9wXSlcbiAgICAgICAgICAgICAgICA6IGRpbWVuc2lvbnM7IH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBkaW1lbnNpb25zO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvdmVyOiBmdW5jdGlvbihkaW1lbnNpb25zLCBtYXhEaW1lbnNpb25zKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgZGltZW5zaW9ucyA9IHRoaXMuY29udGFpbihkaW1lbnNpb25zLCBtYXhEaW1lbnNpb25zKTtcblxuICAgICAgICAgICAgZWFjaChkaW1lbnNpb25zLCBmdW5jdGlvbiAoXywgcHJvcCkgeyByZXR1cm4gZGltZW5zaW9ucyA9IGRpbWVuc2lvbnNbcHJvcF0gPCBtYXhEaW1lbnNpb25zW3Byb3BdXG4gICAgICAgICAgICAgICAgPyB0aGlzJDEucmF0aW8oZGltZW5zaW9ucywgcHJvcCwgbWF4RGltZW5zaW9uc1twcm9wXSlcbiAgICAgICAgICAgICAgICA6IGRpbWVuc2lvbnM7IH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBkaW1lbnNpb25zO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYXR0cihlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuXG4gICAgICAgIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHtcbiAgICAgICAgICAgICAgICBhdHRyKGVsZW1lbnQsIGtleSwgbmFtZVtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvTm9kZXMoZWxlbWVudCkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuY2FsbChlbGVtZW50LCBhdHRyKGVsZW1lbnQsIG5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXR0cihlbGVtZW50LCBuYW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0F0dHIoZWxlbWVudCwgbmFtZSkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShuYW1lKTsgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlQXR0cihlbGVtZW50LCBuYW1lKSB7XG4gICAgICAgIGVsZW1lbnQgPSB0b05vZGVzKGVsZW1lbnQpO1xuICAgICAgICBuYW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZWxlbWVudC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShuYW1lKSAmJiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsgfVxuICAgICAgICAgICAgKTsgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRhdGEoZWxlbWVudCwgYXR0cmlidXRlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBhdHRycyA9IFthdHRyaWJ1dGUsIChcImRhdGEtXCIgKyBhdHRyaWJ1dGUpXTsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaGFzQXR0cihlbGVtZW50LCBhdHRyc1tpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0cihlbGVtZW50LCBhdHRyc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBnbG9iYWwgRG9jdW1lbnRUb3VjaCAqL1xuXG4gICAgdmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuICAgIHZhciBpc0lFID0gaW5Ccm93c2VyICYmIC9tc2llfHRyaWRlbnQvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB2YXIgaXNSdGwgPSBpbkJyb3dzZXIgJiYgYXR0cihkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICdkaXInKSA9PT0gJ3J0bCc7XG5cbiAgICB2YXIgaGFzVG91Y2hFdmVudHMgPSBpbkJyb3dzZXIgJiYgJ29udG91Y2hzdGFydCcgaW4gd2luZG93O1xuICAgIHZhciBoYXNQb2ludGVyRXZlbnRzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5Qb2ludGVyRXZlbnQ7XG4gICAgdmFyIGhhc1RvdWNoID0gaW5Ccm93c2VyICYmIChoYXNUb3VjaEV2ZW50c1xuICAgICAgICB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2hcbiAgICAgICAgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzKTsgLy8gSUUgPj0xMVxuXG4gICAgdmFyIHBvaW50ZXJEb3duID0gaGFzUG9pbnRlckV2ZW50cyA/ICdwb2ludGVyZG93bicgOiBoYXNUb3VjaEV2ZW50cyA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nO1xuICAgIHZhciBwb2ludGVyTW92ZSA9IGhhc1BvaW50ZXJFdmVudHMgPyAncG9pbnRlcm1vdmUnIDogaGFzVG91Y2hFdmVudHMgPyAndG91Y2htb3ZlJyA6ICdtb3VzZW1vdmUnO1xuICAgIHZhciBwb2ludGVyVXAgPSBoYXNQb2ludGVyRXZlbnRzID8gJ3BvaW50ZXJ1cCcgOiBoYXNUb3VjaEV2ZW50cyA/ICd0b3VjaGVuZCcgOiAnbW91c2V1cCc7XG4gICAgdmFyIHBvaW50ZXJFbnRlciA9IGhhc1BvaW50ZXJFdmVudHMgPyAncG9pbnRlcmVudGVyJyA6IGhhc1RvdWNoRXZlbnRzID8gJycgOiAnbW91c2VlbnRlcic7XG4gICAgdmFyIHBvaW50ZXJMZWF2ZSA9IGhhc1BvaW50ZXJFdmVudHMgPyAncG9pbnRlcmxlYXZlJyA6IGhhc1RvdWNoRXZlbnRzID8gJycgOiAnbW91c2VsZWF2ZSc7XG4gICAgdmFyIHBvaW50ZXJDYW5jZWwgPSBoYXNQb2ludGVyRXZlbnRzID8gJ3BvaW50ZXJjYW5jZWwnIDogJ3RvdWNoY2FuY2VsJztcblxuICAgIGZ1bmN0aW9uIHF1ZXJ5KHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0b05vZGUoc2VsZWN0b3IpIHx8IGZpbmQoc2VsZWN0b3IsIGdldENvbnRleHQoc2VsZWN0b3IsIGNvbnRleHQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBxdWVyeUFsbChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICB2YXIgbm9kZXMgPSB0b05vZGVzKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIG5vZGVzLmxlbmd0aCAmJiBub2RlcyB8fCBmaW5kQWxsKHNlbGVjdG9yLCBnZXRDb250ZXh0KHNlbGVjdG9yLCBjb250ZXh0KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29udGV4dChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICBpZiAoIGNvbnRleHQgPT09IHZvaWQgMCApIGNvbnRleHQgPSBkb2N1bWVudDtcblxuICAgICAgICByZXR1cm4gaXNDb250ZXh0U2VsZWN0b3Ioc2VsZWN0b3IpIHx8IGlzRG9jdW1lbnQoY29udGV4dClcbiAgICAgICAgICAgID8gY29udGV4dFxuICAgICAgICAgICAgOiBjb250ZXh0Lm93bmVyRG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluZChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlKF9xdWVyeShzZWxlY3RvciwgY29udGV4dCwgJ3F1ZXJ5U2VsZWN0b3InKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluZEFsbChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlcyhfcXVlcnkoc2VsZWN0b3IsIGNvbnRleHQsICdxdWVyeVNlbGVjdG9yQWxsJykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9xdWVyeShzZWxlY3RvciwgY29udGV4dCwgcXVlcnlGbikge1xuICAgICAgICBpZiAoIGNvbnRleHQgPT09IHZvaWQgMCApIGNvbnRleHQgPSBkb2N1bWVudDtcblxuXG4gICAgICAgIGlmICghc2VsZWN0b3IgfHwgIWlzU3RyaW5nKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoY29udGV4dFNhbml0aXplUmUsICckMSAqJyk7XG5cbiAgICAgICAgdmFyIHJlbW92ZXM7XG5cbiAgICAgICAgaWYgKGlzQ29udGV4dFNlbGVjdG9yKHNlbGVjdG9yKSkge1xuXG4gICAgICAgICAgICByZW1vdmVzID0gW107XG5cbiAgICAgICAgICAgIHNlbGVjdG9yID0gc3BsaXRTZWxlY3RvcihzZWxlY3RvcikubWFwKGZ1bmN0aW9uIChzZWxlY3RvciwgaSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGN0eCA9IGNvbnRleHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3JbMF0gPT09ICchJykge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvcnMgPSBzZWxlY3Rvci5zdWJzdHIoMSkudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IGNsb3Nlc3QocGFyZW50KGNvbnRleHQpLCBzZWxlY3RvcnNbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9ycy5zbGljZSgxKS5qb2luKCcgJykudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yWzBdID09PSAnLScpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JzJDEgPSBzZWxlY3Rvci5zdWJzdHIoMSkudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gKGN0eCB8fCBjb250ZXh0KS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICBjdHggPSBtYXRjaGVzKHByZXYsIHNlbGVjdG9yLnN1YnN0cigxKSkgPyBwcmV2IDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvcnMkMS5zbGljZSgxKS5qb2luKCcgJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWN0eCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWN0eC5pZCkge1xuICAgICAgICAgICAgICAgICAgICBjdHguaWQgPSBcInVrLVwiICsgKERhdGUubm93KCkpICsgaTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3Zlcy5wdXNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZUF0dHIoY3R4LCAnaWQnKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcIiNcIiArIChlc2NhcGUoY3R4LmlkKSkgKyBcIiBcIiArIHNlbGVjdG9yKTtcblxuICAgICAgICAgICAgfSkuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJywnKTtcblxuICAgICAgICAgICAgY29udGV4dCA9IGRvY3VtZW50O1xuXG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dFtxdWVyeUZuXShzZWxlY3Rvcik7XG5cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICB9IGZpbmFsbHkge1xuXG4gICAgICAgICAgICByZW1vdmVzICYmIHJlbW92ZXMuZm9yRWFjaChmdW5jdGlvbiAocmVtb3ZlKSB7IHJldHVybiByZW1vdmUoKTsgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdmFyIGNvbnRleHRTZWxlY3RvclJlID0gLyhefFteXFxcXF0sKVxccypbIT4rfi1dLztcbiAgICB2YXIgY29udGV4dFNhbml0aXplUmUgPSAvKFshPit+LV0pKD89XFxzK1shPit+LV18XFxzKiQpL2c7XG5cbiAgICBmdW5jdGlvbiBpc0NvbnRleHRTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoc2VsZWN0b3IpICYmIHNlbGVjdG9yLm1hdGNoKGNvbnRleHRTZWxlY3RvclJlKTtcbiAgICB9XG5cbiAgICB2YXIgc2VsZWN0b3JSZSA9IC8uKj9bXlxcXFxdKD86LHwkKS9nO1xuXG4gICAgZnVuY3Rpb24gc3BsaXRTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IubWF0Y2goc2VsZWN0b3JSZSkubWFwKGZ1bmN0aW9uIChzZWxlY3RvcikgeyByZXR1cm4gc2VsZWN0b3IucmVwbGFjZSgvLCQvLCAnJykudHJpbSgpOyB9KTtcbiAgICB9XG5cbiAgICB2YXIgZWxQcm90byA9IGluQnJvd3NlciA/IEVsZW1lbnQucHJvdG90eXBlIDoge307XG4gICAgdmFyIG1hdGNoZXNGbiA9IGVsUHJvdG8ubWF0Y2hlcyB8fCBlbFByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBlbFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IG5vb3A7XG5cbiAgICBmdW5jdGlvbiBtYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIG1hdGNoZXNGbi5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKTsgfSk7XG4gICAgfVxuXG4gICAgdmFyIGNsb3Nlc3RGbiA9IGVsUHJvdG8uY2xvc2VzdCB8fCBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIGFuY2VzdG9yID0gdGhpcztcblxuICAgICAgICBkbyB7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaGVzKGFuY2VzdG9yLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5jZXN0b3I7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSB3aGlsZSAoKGFuY2VzdG9yID0gcGFyZW50KGFuY2VzdG9yKSkpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjbG9zZXN0KGVsZW1lbnQsIHNlbGVjdG9yKSB7XG5cbiAgICAgICAgaWYgKHN0YXJ0c1dpdGgoc2VsZWN0b3IsICc+JykpIHtcbiAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNFbGVtZW50KGVsZW1lbnQpXG4gICAgICAgICAgICA/IGNsb3Nlc3RGbi5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKVxuICAgICAgICAgICAgOiB0b05vZGVzKGVsZW1lbnQpLm1hcChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcik7IH0pLmZpbHRlcihCb29sZWFuKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJlbnQoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50ID0gdG9Ob2RlKGVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBpc0VsZW1lbnQoZWxlbWVudC5wYXJlbnROb2RlKSAmJiBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgdmFyIGVzY2FwZUZuID0gaW5Ccm93c2VyICYmIHdpbmRvdy5DU1MgJiYgQ1NTLmVzY2FwZSB8fCBmdW5jdGlvbiAoY3NzKSB7IHJldHVybiBjc3MucmVwbGFjZSgvKFteXFx4N2YtXFx1RkZGRlxcdy1dKS9nLCBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIChcIlxcXFxcIiArIG1hdGNoKTsgfSk7IH07XG4gICAgZnVuY3Rpb24gZXNjYXBlKGNzcykge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY3NzKSA/IGVzY2FwZUZuLmNhbGwobnVsbCwgY3NzKSA6ICcnO1xuICAgIH1cblxuICAgIHZhciB2b2lkRWxlbWVudHMgPSB7XG4gICAgICAgIGFyZWE6IHRydWUsXG4gICAgICAgIGJhc2U6IHRydWUsXG4gICAgICAgIGJyOiB0cnVlLFxuICAgICAgICBjb2w6IHRydWUsXG4gICAgICAgIGVtYmVkOiB0cnVlLFxuICAgICAgICBocjogdHJ1ZSxcbiAgICAgICAgaW1nOiB0cnVlLFxuICAgICAgICBpbnB1dDogdHJ1ZSxcbiAgICAgICAga2V5Z2VuOiB0cnVlLFxuICAgICAgICBsaW5rOiB0cnVlLFxuICAgICAgICBtZW51aXRlbTogdHJ1ZSxcbiAgICAgICAgbWV0YTogdHJ1ZSxcbiAgICAgICAgcGFyYW06IHRydWUsXG4gICAgICAgIHNvdXJjZTogdHJ1ZSxcbiAgICAgICAgdHJhY2s6IHRydWUsXG4gICAgICAgIHdicjogdHJ1ZVxuICAgIH07XG4gICAgZnVuY3Rpb24gaXNWb2lkRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHZvaWRFbGVtZW50c1tlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKV07IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmlzaWJsZShlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgZWxlbWVudC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aDsgfSk7XG4gICAgfVxuXG4gICAgdmFyIHNlbElucHV0ID0gJ2lucHV0LHNlbGVjdCx0ZXh0YXJlYSxidXR0b24nO1xuICAgIGZ1bmN0aW9uIGlzSW5wdXQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBtYXRjaGVzKGVsZW1lbnQsIHNlbElucHV0KTsgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsdGVyKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcik7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdpdGhpbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICAgICAgPyBlbGVtZW50ID09PSBzZWxlY3RvciB8fCAoaXNEb2N1bWVudChzZWxlY3RvcilcbiAgICAgICAgICAgICAgICA/IHNlbGVjdG9yLmRvY3VtZW50RWxlbWVudFxuICAgICAgICAgICAgICAgIDogdG9Ob2RlKHNlbGVjdG9yKSkuY29udGFpbnModG9Ob2RlKGVsZW1lbnQpKSAvLyBJRSAxMSBkb2N1bWVudCBkb2VzIG5vdCBpbXBsZW1lbnQgY29udGFpbnNcbiAgICAgICAgICAgIDogbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3RvcikgfHwgY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyZW50cyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBbXTtcblxuICAgICAgICB3aGlsZSAoKGVsZW1lbnQgPSBwYXJlbnQoZWxlbWVudCkpKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdG9yIHx8IG1hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICBlbGVtZW50ID0gdG9Ob2RlKGVsZW1lbnQpO1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50ID8gdG9Ob2RlcyhlbGVtZW50LmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IgPyBmaWx0ZXIoY2hpbGRyZW4sIHNlbGVjdG9yKSA6IGNoaWxkcmVuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG5cbiAgICAgICAgdmFyIHJlZiA9IGdldEFyZ3MoYXJncyk7XG4gICAgICAgIHZhciB0YXJnZXRzID0gcmVmWzBdO1xuICAgICAgICB2YXIgdHlwZSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVmWzJdO1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSByZWZbM107XG4gICAgICAgIHZhciB1c2VDYXB0dXJlID0gcmVmWzRdO1xuXG4gICAgICAgIHRhcmdldHMgPSB0b0V2ZW50VGFyZ2V0cyh0YXJnZXRzKTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbGlzdGVuZXIgPSBkZXRhaWwobGlzdGVuZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZUNhcHR1cmUgJiYgdXNlQ2FwdHVyZS5zZWxmKSB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IHNlbGZGaWx0ZXIobGlzdGVuZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IGRlbGVnYXRlKHRhcmdldHMsIHNlbGVjdG9yLCBsaXN0ZW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICB1c2VDYXB0dXJlID0gdXNlQ2FwdHVyZUZpbHRlcih1c2VDYXB0dXJlKTtcblxuICAgICAgICB0eXBlLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gdGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTsgfVxuICAgICAgICAgICAgKTsgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gb2ZmKHRhcmdldHMsIHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTsgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvZmYodGFyZ2V0cywgdHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgaWYgKCB1c2VDYXB0dXJlID09PSB2b2lkIDAgKSB1c2VDYXB0dXJlID0gZmFsc2U7XG5cbiAgICAgICAgdXNlQ2FwdHVyZSA9IHVzZUNhcHR1cmVGaWx0ZXIodXNlQ2FwdHVyZSk7XG4gICAgICAgIHRhcmdldHMgPSB0b0V2ZW50VGFyZ2V0cyh0YXJnZXRzKTtcbiAgICAgICAgdHlwZS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIHRhcmdldHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7IHJldHVybiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSk7IH1cbiAgICAgICAgICAgICk7IH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmNlKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG5cbiAgICAgICAgdmFyIHJlZiA9IGdldEFyZ3MoYXJncyk7XG4gICAgICAgIHZhciBlbGVtZW50ID0gcmVmWzBdO1xuICAgICAgICB2YXIgdHlwZSA9IHJlZlsxXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVmWzJdO1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSByZWZbM107XG4gICAgICAgIHZhciB1c2VDYXB0dXJlID0gcmVmWzRdO1xuICAgICAgICB2YXIgY29uZGl0aW9uID0gcmVmWzVdO1xuICAgICAgICB2YXIgb2ZmID0gb24oZWxlbWVudCwgdHlwZSwgc2VsZWN0b3IsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gIWNvbmRpdGlvbiB8fCBjb25kaXRpb24oZSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgb2ZmKCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdXNlQ2FwdHVyZSk7XG5cbiAgICAgICAgcmV0dXJuIG9mZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmlnZ2VyKHRhcmdldHMsIGV2ZW50LCBkZXRhaWwpIHtcbiAgICAgICAgcmV0dXJuIHRvRXZlbnRUYXJnZXRzKHRhcmdldHMpLnJlZHVjZShmdW5jdGlvbiAobm90Q2FuY2VsZWQsIHRhcmdldCkgeyByZXR1cm4gbm90Q2FuY2VsZWQgJiYgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoZXZlbnQsIHRydWUsIHRydWUsIGRldGFpbCkpOyB9XG4gICAgICAgICAgICAsIHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRldGFpbCkge1xuICAgICAgICBpZiAoIGJ1YmJsZXMgPT09IHZvaWQgMCApIGJ1YmJsZXMgPSB0cnVlO1xuICAgICAgICBpZiAoIGNhbmNlbGFibGUgPT09IHZvaWQgMCApIGNhbmNlbGFibGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoaXNTdHJpbmcoZSkpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpOyAvLyBJRSAxMVxuICAgICAgICAgICAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRldGFpbCk7XG4gICAgICAgICAgICBlID0gZXZlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBcmdzKGFyZ3MpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oYXJnc1syXSkpIHtcbiAgICAgICAgICAgIGFyZ3Muc3BsaWNlKDIsIDAsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJncztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxlZ2F0ZShkZWxlZ2F0ZXMsIHNlbGVjdG9yLCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgZGVsZWdhdGVzLmZvckVhY2goZnVuY3Rpb24gKGRlbGVnYXRlKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGVjdG9yWzBdID09PSAnPidcbiAgICAgICAgICAgICAgICAgICAgPyBmaW5kQWxsKHNlbGVjdG9yLCBkZWxlZ2F0ZSkucmV2ZXJzZSgpLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gd2l0aGluKGUudGFyZ2V0LCBlbGVtZW50KTsgfSlbMF1cbiAgICAgICAgICAgICAgICAgICAgOiBjbG9zZXN0KGUudGFyZ2V0LCBzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBlLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICAgICAgICAgICAgICAgIGUuY3VycmVudCA9IGN1cnJlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzJDEsIGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXRhaWwobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHJldHVybiBpc0FycmF5KGUuZGV0YWlsKSA/IGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgWyBlIF0uY29uY2F0KCBlLmRldGFpbCApKSA6IGxpc3RlbmVyKGUpOyB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbGZGaWx0ZXIobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldCA9PT0gZS5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyLmNhbGwobnVsbCwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXNlQ2FwdHVyZUZpbHRlcihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zICYmIGlzSUUgJiYgIWlzQm9vbGVhbihvcHRpb25zKVxuICAgICAgICAgICAgPyAhIW9wdGlvbnMuY2FwdHVyZVxuICAgICAgICAgICAgOiBvcHRpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRXZlbnRUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQgJiYgJ2FkZEV2ZW50TGlzdGVuZXInIGluIHRhcmdldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0V2ZW50VGFyZ2V0KHRhcmdldCkge1xuICAgICAgICByZXR1cm4gaXNFdmVudFRhcmdldCh0YXJnZXQpID8gdGFyZ2V0IDogdG9Ob2RlKHRhcmdldCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9FdmVudFRhcmdldHModGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRhcmdldClcbiAgICAgICAgICAgICAgICA/IHRhcmdldC5tYXAodG9FdmVudFRhcmdldCkuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgICAgOiBpc1N0cmluZyh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgID8gZmluZEFsbCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgIDogaXNFdmVudFRhcmdldCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFt0YXJnZXRdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRvTm9kZXModGFyZ2V0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1RvdWNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGUucG9pbnRlclR5cGUgPT09ICd0b3VjaCcgfHwgISFlLnRvdWNoZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXZlbnRQb3MoZSkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGUudG91Y2hlcztcbiAgICAgICAgdmFyIGNoYW5nZWRUb3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlcztcbiAgICAgICAgdmFyIHJlZiA9IHRvdWNoZXMgJiYgdG91Y2hlc1swXSB8fCBjaGFuZ2VkVG91Y2hlcyAmJiBjaGFuZ2VkVG91Y2hlc1swXSB8fCBlO1xuICAgICAgICB2YXIgeCA9IHJlZi5jbGllbnRYO1xuICAgICAgICB2YXIgeSA9IHJlZi5jbGllbnRZO1xuXG4gICAgICAgIHJldHVybiB7eDogeCwgeTogeX07XG4gICAgfVxuXG4gICAgLyogZ2xvYmFsIHNldEltbWVkaWF0ZSAqL1xuXG4gICAgdmFyIFByb21pc2UgPSBpbkJyb3dzZXIgJiYgd2luZG93LlByb21pc2UgfHwgUHJvbWlzZUZuO1xuXG4gICAgdmFyIERlZmVycmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHRoaXMkMS5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgICAgICB0aGlzJDEucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcm9taXNlcy9BKyBwb2x5ZmlsbCB2MS4xLjQgKGh0dHBzOi8vZ2l0aHViLmNvbS9icmFtc3RlaW4vcHJvbWlzKVxuICAgICAqL1xuXG4gICAgdmFyIFJFU09MVkVEID0gMDtcbiAgICB2YXIgUkVKRUNURUQgPSAxO1xuICAgIHZhciBQRU5ESU5HID0gMjtcblxuICAgIHZhciBhc3luYyA9IGluQnJvd3NlciAmJiB3aW5kb3cuc2V0SW1tZWRpYXRlIHx8IHNldFRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBQcm9taXNlRm4oZXhlY3V0b3IpIHtcblxuICAgICAgICB0aGlzLnN0YXRlID0gUEVORElORztcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kZWZlcnJlZCA9IFtdO1xuXG4gICAgICAgIHZhciBwcm9taXNlID0gdGhpcztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXhlY3V0b3IoXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3Qocik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBQcm9taXNlRm4ucmVqZWN0ID0gZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlRm4oZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcmVqZWN0KHIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgUHJvbWlzZUZuLnJlc29sdmUgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VGbihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICByZXNvbHZlKHgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgUHJvbWlzZUZuLmFsbCA9IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VGbihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICAgICAgICBpZiAoaXRlcmFibGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlcihpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHg7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlcmFibGUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBQcm9taXNlRm4ucmVzb2x2ZShpdGVyYWJsZVtpXSkudGhlbihyZXNvbHZlcihpKSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFByb21pc2VGbi5yYWNlID0gZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VGbihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZXJhYmxlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZUZuLnJlc29sdmUoaXRlcmFibGVbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBwID0gUHJvbWlzZUZuLnByb3RvdHlwZTtcblxuICAgIHAucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHByb21pc2Uuc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgICAgICAgIGlmICh4ID09PSBwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZSBzZXR0bGVkIHdpdGggaXRzZWxmLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoZW4gPSB4ICYmIHgudGhlbjtcblxuICAgICAgICAgICAgICAgIGlmICh4ICE9PSBudWxsICYmIGlzT2JqZWN0KHgpICYmIGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhlbi5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3Qocik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJvbWlzZS5zdGF0ZSA9IFJFU09MVkVEO1xuICAgICAgICAgICAgcHJvbWlzZS52YWx1ZSA9IHg7XG4gICAgICAgICAgICBwcm9taXNlLm5vdGlmeSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAucmVqZWN0ID0gZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHByb21pc2Uuc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgICAgICAgIGlmIChyZWFzb24gPT09IHByb21pc2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm9taXNlIHNldHRsZWQgd2l0aCBpdHNlbGYuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByb21pc2Uuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgICAgICAgICAgIHByb21pc2UudmFsdWUgPSByZWFzb247XG4gICAgICAgICAgICBwcm9taXNlLm5vdGlmeSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHAubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICBhc3luYyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcyQxLnN0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMkMS5kZWZlcnJlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMkMS5kZWZlcnJlZC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb25SZXNvbHZlZCA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uUmVqZWN0ZWQgPSByZWZbMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNvbHZlID0gcmVmWzJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVqZWN0ID0gcmVmWzNdO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyQxLnN0YXRlID09PSBSRVNPTFZFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uUmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25SZXNvbHZlZC5jYWxsKHVuZGVmaW5lZCwgdGhpcyQxLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzJDEudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcyQxLnN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uUmVqZWN0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25SZWplY3RlZC5jYWxsKHVuZGVmaW5lZCwgdGhpcyQxLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHRoaXMkMS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uUmVzb2x2ZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlRm4oZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdGhpcyQxLmRlZmVycmVkLnB1c2goW29uUmVzb2x2ZWQsIG9uUmVqZWN0ZWQsIHJlc29sdmUsIHJlamVjdF0pO1xuICAgICAgICAgICAgdGhpcyQxLm5vdGlmeSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcC5jYXRjaCA9IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWpheCh1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgdmFyIGVudiA9IGFzc2lnbih7XG4gICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICAgICAgICAgIHhocjogbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogbm9vcCxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6ICcnXG4gICAgICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICAgICAgZW52LmJlZm9yZVNlbmQoZW52KTtcblxuICAgICAgICAgICAgdmFyIHhociA9IGVudi54aHI7XG5cbiAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gZW52KSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3AgaW4geGhyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHhocltwcm9wXSA9IGVudltwcm9wXTtcblxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgeGhyLm9wZW4oZW52Lm1ldGhvZC50b1VwcGVyQ2FzZSgpLCB1cmwpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBoZWFkZXIgaW4gZW52LmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIGVudi5oZWFkZXJzW2hlYWRlcl0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvbih4aHIsICdsb2FkJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDAgfHwgeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCB8fCB4aHIuc3RhdHVzID09PSAzMDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChhc3NpZ24oRXJyb3IoeGhyLnN0YXR1c1RleHQpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4aHI6IHhocixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogeGhyLnN0YXR1c1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb24oeGhyLCAnZXJyb3InLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QoYXNzaWduKEVycm9yKCdOZXR3b3JrIEVycm9yJyksIHt4aHI6IHhocn0pKTsgfSk7XG4gICAgICAgICAgICBvbih4aHIsICd0aW1lb3V0JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVqZWN0KGFzc2lnbihFcnJvcignTmV0d29yayBUaW1lb3V0JyksIHt4aHI6IHhocn0pKTsgfSk7XG5cbiAgICAgICAgICAgIHhoci5zZW5kKGVudi5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SW1hZ2Uoc3JjLCBzcmNzZXQsIHNpemVzKSB7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZShpbWcpOyB9O1xuXG4gICAgICAgICAgICBzaXplcyAmJiAoaW1nLnNpemVzID0gc2l6ZXMpO1xuICAgICAgICAgICAgc3Jjc2V0ICYmIChpbWcuc3Jjc2V0ID0gc3Jjc2V0KTtcbiAgICAgICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZHkoZm4pIHtcblxuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVuYmluZCA9IG9uKGRvY3VtZW50LCAnRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHVuYmluZCgpO1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5kZXgoZWxlbWVudCwgcmVmKSB7XG4gICAgICAgIHJldHVybiByZWZcbiAgICAgICAgICAgID8gdG9Ob2RlcyhlbGVtZW50KS5pbmRleE9mKHRvTm9kZShyZWYpKVxuICAgICAgICAgICAgOiBjaGlsZHJlbihwYXJlbnQoZWxlbWVudCkpLmluZGV4T2YoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SW5kZXgoaSwgZWxlbWVudHMsIGN1cnJlbnQsIGZpbml0ZSkge1xuICAgICAgICBpZiAoIGN1cnJlbnQgPT09IHZvaWQgMCApIGN1cnJlbnQgPSAwO1xuICAgICAgICBpZiAoIGZpbml0ZSA9PT0gdm9pZCAwICkgZmluaXRlID0gZmFsc2U7XG5cblxuICAgICAgICBlbGVtZW50cyA9IHRvTm9kZXMoZWxlbWVudHMpO1xuXG4gICAgICAgIHZhciBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgaSA9IGlzTnVtZXJpYyhpKVxuICAgICAgICAgICAgPyB0b051bWJlcihpKVxuICAgICAgICAgICAgOiBpID09PSAnbmV4dCdcbiAgICAgICAgICAgICAgICA/IGN1cnJlbnQgKyAxXG4gICAgICAgICAgICAgICAgOiBpID09PSAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgICAgID8gY3VycmVudCAtIDFcbiAgICAgICAgICAgICAgICAgICAgOiBpbmRleChlbGVtZW50cywgaSk7XG5cbiAgICAgICAgaWYgKGZpbml0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNsYW1wKGksIDAsIGxlbmd0aCAtIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaSAlPSBsZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGkgPCAwID8gaSArIGxlbmd0aCA6IGk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW1wdHkoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHRtbChwYXJlbnQsIGh0bWwpIHtcbiAgICAgICAgcGFyZW50ID0gJChwYXJlbnQpO1xuICAgICAgICByZXR1cm4gaXNVbmRlZmluZWQoaHRtbClcbiAgICAgICAgICAgID8gcGFyZW50LmlubmVySFRNTFxuICAgICAgICAgICAgOiBhcHBlbmQocGFyZW50Lmhhc0NoaWxkTm9kZXMoKSA/IGVtcHR5KHBhcmVudCkgOiBwYXJlbnQsIGh0bWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBlbmQocGFyZW50LCBlbGVtZW50KSB7XG5cbiAgICAgICAgcGFyZW50ID0gJChwYXJlbnQpO1xuXG4gICAgICAgIGlmICghcGFyZW50Lmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGVuZChwYXJlbnQsIGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluc2VydE5vZGVzKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIHBhcmVudC5maXJzdENoaWxkKTsgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBlbmQocGFyZW50LCBlbGVtZW50KSB7XG4gICAgICAgIHBhcmVudCA9ICQocGFyZW50KTtcbiAgICAgICAgcmV0dXJuIGluc2VydE5vZGVzKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJlZm9yZShyZWYsIGVsZW1lbnQpIHtcbiAgICAgICAgcmVmID0gJChyZWYpO1xuICAgICAgICByZXR1cm4gaW5zZXJ0Tm9kZXMoZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHJlZi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCByZWYpOyB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZnRlcihyZWYsIGVsZW1lbnQpIHtcbiAgICAgICAgcmVmID0gJChyZWYpO1xuICAgICAgICByZXR1cm4gaW5zZXJ0Tm9kZXMoZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHJlZi5uZXh0U2libGluZ1xuICAgICAgICAgICAgPyBiZWZvcmUocmVmLm5leHRTaWJsaW5nLCBlbGVtZW50KVxuICAgICAgICAgICAgOiBhcHBlbmQocmVmLnBhcmVudE5vZGUsIGVsZW1lbnQpOyB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zZXJ0Tm9kZXMoZWxlbWVudCwgZm4pIHtcbiAgICAgICAgZWxlbWVudCA9IGlzU3RyaW5nKGVsZW1lbnQpID8gZnJhZ21lbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuICAgICAgICByZXR1cm4gZWxlbWVudFxuICAgICAgICAgICAgPyAnbGVuZ3RoJyBpbiBlbGVtZW50XG4gICAgICAgICAgICAgICAgPyB0b05vZGVzKGVsZW1lbnQpLm1hcChmbilcbiAgICAgICAgICAgICAgICA6IGZuKGVsZW1lbnQpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQpIHtcbiAgICAgICAgdG9Ob2RlcyhlbGVtZW50KS5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSAmJiBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyYXBBbGwoZWxlbWVudCwgc3RydWN0dXJlKSB7XG5cbiAgICAgICAgc3RydWN0dXJlID0gdG9Ob2RlKGJlZm9yZShlbGVtZW50LCBzdHJ1Y3R1cmUpKTtcblxuICAgICAgICB3aGlsZSAoc3RydWN0dXJlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIHN0cnVjdHVyZSA9IHN0cnVjdHVyZS5maXJzdENoaWxkO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwZW5kKHN0cnVjdHVyZSwgZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIHN0cnVjdHVyZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cmFwSW5uZXIoZWxlbWVudCwgc3RydWN0dXJlKSB7XG4gICAgICAgIHJldHVybiB0b05vZGVzKHRvTm9kZXMoZWxlbWVudCkubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50Lmhhc0NoaWxkTm9kZXMgPyB3cmFwQWxsKHRvTm9kZXMoZWxlbWVudC5jaGlsZE5vZGVzKSwgc3RydWN0dXJlKSA6IGFwcGVuZChlbGVtZW50LCBzdHJ1Y3R1cmUpOyB9XG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVud3JhcChlbGVtZW50KSB7XG4gICAgICAgIHRvTm9kZXMoZWxlbWVudClcbiAgICAgICAgICAgIC5tYXAocGFyZW50KVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBzZWxmKSB7IHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDsgfSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBiZWZvcmUocGFyZW50LCBwYXJlbnQuY2hpbGROb2Rlcyk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKHBhcmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgZnJhZ21lbnRSZSA9IC9eXFxzKjwoXFx3K3whKVtePl0qPi87XG4gICAgdmFyIHNpbmdsZVRhZ1JlID0gL148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT4pPyQvO1xuXG4gICAgZnVuY3Rpb24gZnJhZ21lbnQoaHRtbCkge1xuXG4gICAgICAgIHZhciBtYXRjaGVzID0gc2luZ2xlVGFnUmUuZXhlYyhodG1sKTtcbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG1hdGNoZXNbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBpZiAoZnJhZ21lbnRSZS50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBodG1sLnRyaW0oKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250YWluZXIudGV4dENvbnRlbnQgPSBodG1sO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5jaGlsZE5vZGVzLmxlbmd0aCA+IDEgPyB0b05vZGVzKGNvbnRhaW5lci5jaGlsZE5vZGVzKSA6IGNvbnRhaW5lci5maXJzdENoaWxkO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHkobm9kZSwgZm4pIHtcblxuICAgICAgICBpZiAoIWlzRWxlbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm4obm9kZSk7XG4gICAgICAgIG5vZGUgPSBub2RlLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICAgICAgdmFyIG5leHQgPSBub2RlLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIGFwcGx5KG5vZGUsIGZuKTtcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICAgICAgPyB0b05vZGUoc2VsZWN0b3IpXG4gICAgICAgICAgICA6IGlzSHRtbChzZWxlY3RvcilcbiAgICAgICAgICAgICAgICA/IHRvTm9kZShmcmFnbWVudChzZWxlY3RvcikpXG4gICAgICAgICAgICAgICAgOiBmaW5kKHNlbGVjdG9yLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkJChzZWxlY3RvciwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICAgICAgPyB0b05vZGVzKHNlbGVjdG9yKVxuICAgICAgICAgICAgOiBpc0h0bWwoc2VsZWN0b3IpXG4gICAgICAgICAgICAgICAgPyB0b05vZGVzKGZyYWdtZW50KHNlbGVjdG9yKSlcbiAgICAgICAgICAgICAgICA6IGZpbmRBbGwoc2VsZWN0b3IsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSHRtbChzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0clswXSA9PT0gJzwnIHx8IHN0ci5tYXRjaCgvXlxccyo8Lyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgICAgIGFwcGx5JDEoZWxlbWVudCwgYXJncywgJ2FkZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICBhcHBseSQxKGVsZW1lbnQsIGFyZ3MsICdyZW1vdmUnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKGVsZW1lbnQsIGNscykge1xuICAgICAgICBhdHRyKGVsZW1lbnQsICdjbGFzcycsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKHZhbHVlIHx8ICcnKS5yZXBsYWNlKG5ldyBSZWdFeHAoKFwiXFxcXGJcIiArIGNscyArIFwiXFxcXGJcIiksICdnJyksICcnKTsgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVwbGFjZUNsYXNzKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICBhcmdzWzBdICYmIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGFyZ3NbMF0pO1xuICAgICAgICBhcmdzWzFdICYmIGFkZENsYXNzKGVsZW1lbnQsIGFyZ3NbMV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNscykge1xuICAgICAgICByZXR1cm4gY2xzICYmIHRvTm9kZXMoZWxlbWVudCkuc29tZShmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xzLnNwbGl0KCcgJylbMF0pOyB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVDbGFzcyhlbGVtZW50KSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cblxuICAgICAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzID0gZ2V0QXJncyQxKGFyZ3MpO1xuXG4gICAgICAgIHZhciBmb3JjZSA9ICFpc1N0cmluZyhsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiBbXTsgLy8gaW4gaU9TIDkuMyBmb3JjZSA9PT0gdW5kZWZpbmVkIGV2YWx1YXRlcyB0byBmYWxzZVxuXG4gICAgICAgIGFyZ3MgPSBhcmdzLmZpbHRlcihCb29sZWFuKTtcblxuICAgICAgICB0b05vZGVzKGVsZW1lbnQpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgdmFyIGNsYXNzTGlzdCA9IHJlZi5jbGFzc0xpc3Q7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRzLkZvcmNlXG4gICAgICAgICAgICAgICAgICAgID8gY2xhc3NMaXN0LnRvZ2dsZS5hcHBseShjbGFzc0xpc3QsIFthcmdzW2ldXS5jb25jYXQoZm9yY2UpKVxuICAgICAgICAgICAgICAgICAgICA6IChjbGFzc0xpc3RbKCFpc1VuZGVmaW5lZChmb3JjZSkgPyBmb3JjZSA6ICFjbGFzc0xpc3QuY29udGFpbnMoYXJnc1tpXSkpID8gJ2FkZCcgOiAncmVtb3ZlJ10oYXJnc1tpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5JDEoZWxlbWVudCwgYXJncywgZm4pIHtcbiAgICAgICAgYXJncyA9IGdldEFyZ3MkMShhcmdzKS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICAgICAgYXJncy5sZW5ndGggJiYgdG9Ob2RlcyhlbGVtZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc0xpc3QgPSByZWYuY2xhc3NMaXN0O1xuXG4gICAgICAgICAgICBzdXBwb3J0cy5NdWx0aXBsZVxuICAgICAgICAgICAgICAgID8gY2xhc3NMaXN0W2ZuXS5hcHBseShjbGFzc0xpc3QsIGFyZ3MpXG4gICAgICAgICAgICAgICAgOiBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZXR1cm4gY2xhc3NMaXN0W2ZuXShjbHMpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QXJncyQxKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3MucmVkdWNlKGZ1bmN0aW9uIChhcmdzLCBhcmcpIHsgcmV0dXJuIGFyZ3MuY29uY2F0LmNhbGwoYXJncywgaXNTdHJpbmcoYXJnKSAmJiBpbmNsdWRlcyhhcmcsICcgJykgPyBhcmcudHJpbSgpLnNwbGl0KCcgJykgOiBhcmcpOyB9XG4gICAgICAgICAgICAsIFtdKTtcbiAgICB9XG5cbiAgICAvLyBJRSAxMVxuICAgIHZhciBzdXBwb3J0cyA9IHtcblxuICAgICAgICBnZXQgTXVsdGlwbGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ19tdWx0aXBsZScpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldCBGb3JjZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldCgnX2ZvcmNlJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcblxuICAgICAgICAgICAgaWYgKCFoYXNPd24odGhpcywga2V5KSkge1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdfJyk7XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzTGlzdCA9IHJlZi5jbGFzc0xpc3Q7XG4gICAgICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgnYScsICdiJyk7XG4gICAgICAgICAgICAgICAgY2xhc3NMaXN0LnRvZ2dsZSgnYycsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tdWx0aXBsZSA9IGNsYXNzTGlzdC5jb250YWlucygnYicpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZvcmNlID0gIWNsYXNzTGlzdC5jb250YWlucygnYycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpc1trZXldO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIGNzc051bWJlciA9IHtcbiAgICAgICAgJ2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQnOiB0cnVlLFxuICAgICAgICAnY29sdW1uLWNvdW50JzogdHJ1ZSxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IHRydWUsXG4gICAgICAgICdmbGV4LWdyb3cnOiB0cnVlLFxuICAgICAgICAnZmxleC1zaHJpbmsnOiB0cnVlLFxuICAgICAgICAnZm9udC13ZWlnaHQnOiB0cnVlLFxuICAgICAgICAnbGluZS1oZWlnaHQnOiB0cnVlLFxuICAgICAgICAnb3BhY2l0eSc6IHRydWUsXG4gICAgICAgICdvcmRlcic6IHRydWUsXG4gICAgICAgICdvcnBoYW5zJzogdHJ1ZSxcbiAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiB0cnVlLFxuICAgICAgICAnc3Ryb2tlLWRhc2hvZmZzZXQnOiB0cnVlLFxuICAgICAgICAnd2lkb3dzJzogdHJ1ZSxcbiAgICAgICAgJ3otaW5kZXgnOiB0cnVlLFxuICAgICAgICAnem9vbSc6IHRydWVcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY3NzKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSkge1xuXG4gICAgICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuXG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcocHJvcGVydHkpKSB7XG5cbiAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BOYW1lKHByb3BlcnR5KTtcblxuICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF2YWx1ZSAmJiAhaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gaXNOdW1lcmljKHZhbHVlKSAmJiAhY3NzTnVtYmVyW3Byb3BlcnR5XSA/ICh2YWx1ZSArIFwicHhcIikgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShwcm9wZXJ0eSkpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHkucmVkdWNlKGZ1bmN0aW9uIChwcm9wcywgcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcHNbcHJvcGVydHldID0gc3R5bGVzW3Byb3BOYW1lKHByb3BlcnR5KV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgICAgICAgICAgICB9LCB7fSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgZWFjaChwcm9wZXJ0eSwgZnVuY3Rpb24gKHZhbHVlLCBwcm9wZXJ0eSkgeyByZXR1cm4gY3NzKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcblxuICAgICAgICB9KVswXTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN0eWxlcyhlbGVtZW50LCBwc2V1ZG9FbHQpIHtcbiAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIHBzZXVkb0VsdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHksIHBzZXVkb0VsdCkge1xuICAgICAgICByZXR1cm4gZ2V0U3R5bGVzKGVsZW1lbnQsIHBzZXVkb0VsdClbcHJvcGVydHldO1xuICAgIH1cblxuICAgIHZhciB2YXJzID0ge307XG5cbiAgICBmdW5jdGlvbiBnZXRDc3NWYXIobmFtZSkge1xuXG4gICAgICAgIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICBpZiAoIWlzSUUpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRTdHlsZXMoZG9jRWwpLmdldFByb3BlcnR5VmFsdWUoKFwiLS11ay1cIiArIG5hbWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghKG5hbWUgaW4gdmFycykpIHtcblxuICAgICAgICAgICAgLyogdXNhZ2UgaW4gY3NzOiAudWstbmFtZTpiZWZvcmUgeyBjb250ZW50OlwieHl6XCIgfSAqL1xuXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGFwcGVuZChkb2NFbCwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuXG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCAoXCJ1ay1cIiArIG5hbWUpKTtcblxuICAgICAgICAgICAgdmFyc1tuYW1lXSA9IGdldFN0eWxlKGVsZW1lbnQsICdjb250ZW50JywgJzpiZWZvcmUnKS5yZXBsYWNlKC9eW1wiJ10oLiopW1wiJ10kLywgJyQxJyk7XG5cbiAgICAgICAgICAgIHJlbW92ZShlbGVtZW50KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhcnNbbmFtZV07XG5cbiAgICB9XG5cbiAgICB2YXIgY3NzUHJvcHMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHByb3BOYW1lKG5hbWUpIHtcblxuICAgICAgICB2YXIgcmV0ID0gY3NzUHJvcHNbbmFtZV07XG4gICAgICAgIGlmICghcmV0KSB7XG4gICAgICAgICAgICByZXQgPSBjc3NQcm9wc1tuYW1lXSA9IHZlbmRvclByb3BOYW1lKG5hbWUpIHx8IG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICB2YXIgY3NzUHJlZml4ZXMgPSBbJ3dlYmtpdCcsICdtb3onLCAnbXMnXTtcblxuICAgIGZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKG5hbWUpIHtcblxuICAgICAgICBuYW1lID0gaHlwaGVuYXRlKG5hbWUpO1xuXG4gICAgICAgIHZhciByZWYgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBzdHlsZSA9IHJlZi5zdHlsZTtcblxuICAgICAgICBpZiAobmFtZSBpbiBzdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IGNzc1ByZWZpeGVzLmxlbmd0aCwgcHJlZml4ZWROYW1lO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIHByZWZpeGVkTmFtZSA9IFwiLVwiICsgKGNzc1ByZWZpeGVzW2ldKSArIFwiLVwiICsgbmFtZTtcbiAgICAgICAgICAgIGlmIChwcmVmaXhlZE5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ZWROYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNpdGlvbihlbGVtZW50LCBwcm9wcywgZHVyYXRpb24sIHRpbWluZykge1xuICAgICAgICBpZiAoIGR1cmF0aW9uID09PSB2b2lkIDAgKSBkdXJhdGlvbiA9IDQwMDtcbiAgICAgICAgaWYgKCB0aW1pbmcgPT09IHZvaWQgMCApIHRpbWluZyA9ICdsaW5lYXInO1xuXG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRvTm9kZXMoZWxlbWVudCkubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNzcyhlbGVtZW50LCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJpZ2dlcihlbGVtZW50LCAndHJhbnNpdGlvbmVuZCcpOyB9LCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICBvbmNlKGVsZW1lbnQsICd0cmFuc2l0aW9uZW5kIHRyYW5zaXRpb25jYW5jZWxlZCcsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcblxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCAndWstdHJhbnNpdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246ICcnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0eXBlID09PSAndHJhbnNpdGlvbmNhbmNlbGVkJyA/IHJlamVjdCgpIDogcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0sIHtzZWxmOiB0cnVlfSk7XG5cbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCAndWstdHJhbnNpdGlvbicpO1xuICAgICAgICAgICAgICAgIGNzcyhlbGVtZW50LCBhc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcE5hbWUpLmpvaW4oJywnKSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiAoZHVyYXRpb24gKyBcIm1zXCIpLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IHRpbWluZ1xuICAgICAgICAgICAgICAgIH0sIHByb3BzKSk7XG5cbiAgICAgICAgICAgIH0pOyB9XG4gICAgICAgICkpO1xuXG4gICAgfVxuXG4gICAgdmFyIFRyYW5zaXRpb24gPSB7XG5cbiAgICAgICAgc3RhcnQ6IHRyYW5zaXRpb24sXG5cbiAgICAgICAgc3RvcDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAndHJhbnNpdGlvbmVuZCcpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAndHJhbnNpdGlvbmNhbmNlbGVkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5Qcm9ncmVzczogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc0NsYXNzKGVsZW1lbnQsICd1ay10cmFuc2l0aW9uJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgYW5pbWF0aW9uUHJlZml4ID0gJ3VrLWFuaW1hdGlvbi0nO1xuXG4gICAgZnVuY3Rpb24gYW5pbWF0ZShlbGVtZW50LCBhbmltYXRpb24sIGR1cmF0aW9uLCBvcmlnaW4sIG91dCkge1xuICAgICAgICBpZiAoIGR1cmF0aW9uID09PSB2b2lkIDAgKSBkdXJhdGlvbiA9IDIwMDtcblxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0b05vZGVzKGVsZW1lbnQpLm1hcChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgcmVzZXQoKTtcblxuICAgICAgICAgICAgICAgIG9uY2UoZWxlbWVudCwgJ2FuaW1hdGlvbmVuZCBhbmltYXRpb25jYW5jZWwnLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2FuaW1hdGlvbmNhbmNlbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzZXQoKTtcblxuICAgICAgICAgICAgICAgIH0sIHtzZWxmOiB0cnVlfSk7XG5cbiAgICAgICAgICAgICAgICBjc3MoZWxlbWVudCwgJ2FuaW1hdGlvbkR1cmF0aW9uJywgKGR1cmF0aW9uICsgXCJtc1wiKSk7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgYW5pbWF0aW9uLCBhbmltYXRpb25QcmVmaXggKyAob3V0ID8gJ2xlYXZlJyA6ICdlbnRlcicpKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGFydHNXaXRoKGFuaW1hdGlvbiwgYW5pbWF0aW9uUHJlZml4KSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBvcmlnaW4gJiYgKFwidWstdHJhbnNmb3JtLW9yaWdpbi1cIiArIG9yaWdpbiksIG91dCAmJiAoYW5pbWF0aW9uUHJlZml4ICsgXCJyZXZlcnNlXCIpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsICdhbmltYXRpb25EdXJhdGlvbicsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhlbGVtZW50LCAoYW5pbWF0aW9uUHJlZml4ICsgXCJcXFxcUypcIikpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7IH1cbiAgICAgICAgKSk7XG5cbiAgICB9XG5cbiAgICB2YXIgaW5Qcm9ncmVzcyA9IG5ldyBSZWdFeHAoKGFuaW1hdGlvblByZWZpeCArIFwiKGVudGVyfGxlYXZlKVwiKSk7XG4gICAgdmFyIEFuaW1hdGlvbiA9IHtcblxuICAgICAgICBpbjogZnVuY3Rpb24oZWxlbWVudCwgYW5pbWF0aW9uLCBkdXJhdGlvbiwgb3JpZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0ZShlbGVtZW50LCBhbmltYXRpb24sIGR1cmF0aW9uLCBvcmlnaW4sIGZhbHNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgZHVyYXRpb24sIG9yaWdpbikge1xuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGUoZWxlbWVudCwgYW5pbWF0aW9uLCBkdXJhdGlvbiwgb3JpZ2luLCB0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpblByb2dyZXNzOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5Qcm9ncmVzcy50ZXN0KGF0dHIoZWxlbWVudCwgJ2NsYXNzJykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAnYW5pbWF0aW9uY2FuY2VsJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgZGlycyA9IHtcbiAgICAgICAgd2lkdGg6IFsneCcsICdsZWZ0JywgJ3JpZ2h0J10sXG4gICAgICAgIGhlaWdodDogWyd5JywgJ3RvcCcsICdib3R0b20nXVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb3NpdGlvbkF0KGVsZW1lbnQsIHRhcmdldCwgZWxBdHRhY2gsIHRhcmdldEF0dGFjaCwgZWxPZmZzZXQsIHRhcmdldE9mZnNldCwgZmxpcCwgYm91bmRhcnkpIHtcblxuICAgICAgICBlbEF0dGFjaCA9IGdldFBvcyhlbEF0dGFjaCk7XG4gICAgICAgIHRhcmdldEF0dGFjaCA9IGdldFBvcyh0YXJnZXRBdHRhY2gpO1xuXG4gICAgICAgIHZhciBmbGlwcGVkID0ge2VsZW1lbnQ6IGVsQXR0YWNoLCB0YXJnZXQ6IHRhcmdldEF0dGFjaH07XG5cbiAgICAgICAgaWYgKCFlbGVtZW50IHx8ICF0YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmbGlwcGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpbSA9IGdldERpbWVuc2lvbnMoZWxlbWVudCk7XG4gICAgICAgIHZhciB0YXJnZXREaW0gPSBnZXREaW1lbnNpb25zKHRhcmdldCk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHRhcmdldERpbTtcblxuICAgICAgICBtb3ZlVG8ocG9zaXRpb24sIGVsQXR0YWNoLCBkaW0sIC0xKTtcbiAgICAgICAgbW92ZVRvKHBvc2l0aW9uLCB0YXJnZXRBdHRhY2gsIHRhcmdldERpbSwgMSk7XG5cbiAgICAgICAgZWxPZmZzZXQgPSBnZXRPZmZzZXRzKGVsT2Zmc2V0LCBkaW0ud2lkdGgsIGRpbS5oZWlnaHQpO1xuICAgICAgICB0YXJnZXRPZmZzZXQgPSBnZXRPZmZzZXRzKHRhcmdldE9mZnNldCwgdGFyZ2V0RGltLndpZHRoLCB0YXJnZXREaW0uaGVpZ2h0KTtcblxuICAgICAgICBlbE9mZnNldFsneCddICs9IHRhcmdldE9mZnNldFsneCddO1xuICAgICAgICBlbE9mZnNldFsneSddICs9IHRhcmdldE9mZnNldFsneSddO1xuXG4gICAgICAgIHBvc2l0aW9uLmxlZnQgKz0gZWxPZmZzZXRbJ3gnXTtcbiAgICAgICAgcG9zaXRpb24udG9wICs9IGVsT2Zmc2V0Wyd5J107XG5cbiAgICAgICAgaWYgKGZsaXApIHtcblxuICAgICAgICAgICAgdmFyIGJvdW5kYXJpZXMgPSBbZ2V0RGltZW5zaW9ucyh0b1dpbmRvdyhlbGVtZW50KSldO1xuXG4gICAgICAgICAgICBpZiAoYm91bmRhcnkpIHtcbiAgICAgICAgICAgICAgICBib3VuZGFyaWVzLnVuc2hpZnQoZ2V0RGltZW5zaW9ucyhib3VuZGFyeSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlYWNoKGRpcnMsIGZ1bmN0aW9uIChyZWYsIHByb3ApIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyID0gcmVmWzBdO1xuICAgICAgICAgICAgICAgIHZhciBhbGlnbiA9IHJlZlsxXTtcbiAgICAgICAgICAgICAgICB2YXIgYWxpZ25GbGlwID0gcmVmWzJdO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoIShmbGlwID09PSB0cnVlIHx8IGluY2x1ZGVzKGZsaXAsIGRpcikpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBib3VuZGFyaWVzLnNvbWUoZnVuY3Rpb24gKGJvdW5kYXJ5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1PZmZzZXQgPSBlbEF0dGFjaFtkaXJdID09PSBhbGlnblxuICAgICAgICAgICAgICAgICAgICAgICAgPyAtZGltW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGVsQXR0YWNoW2Rpcl0gPT09IGFsaWduRmxpcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZGltW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRPZmZzZXQgPSB0YXJnZXRBdHRhY2hbZGlyXSA9PT0gYWxpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGFyZ2V0RGltW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRhcmdldEF0dGFjaFtkaXJdID09PSBhbGlnbkZsaXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC10YXJnZXREaW1bcHJvcF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uW2FsaWduXSA8IGJvdW5kYXJ5W2FsaWduXSB8fCBwb3NpdGlvblthbGlnbl0gKyBkaW1bcHJvcF0gPiBib3VuZGFyeVthbGlnbkZsaXBdKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjZW50ZXJPZmZzZXQgPSBkaW1bcHJvcF0gLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNlbnRlclRhcmdldE9mZnNldCA9IHRhcmdldEF0dGFjaFtkaXJdID09PSAnY2VudGVyJyA/IC10YXJnZXREaW1bcHJvcF0gLyAyIDogMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsQXR0YWNoW2Rpcl0gPT09ICdjZW50ZXInICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBseShjZW50ZXJPZmZzZXQsIGNlbnRlclRhcmdldE9mZnNldClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBhcHBseSgtY2VudGVyT2Zmc2V0LCAtY2VudGVyVGFyZ2V0T2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB8fCBhcHBseShlbGVtT2Zmc2V0LCB0YXJnZXRPZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhcHBseShlbGVtT2Zmc2V0LCB0YXJnZXRPZmZzZXQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZhbCA9IHBvc2l0aW9uW2FsaWduXSArIGVsZW1PZmZzZXQgKyB0YXJnZXRPZmZzZXQgLSBlbE9mZnNldFtkaXJdICogMjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbCA+PSBib3VuZGFyeVthbGlnbl0gJiYgbmV3VmFsICsgZGltW3Byb3BdIDw9IGJvdW5kYXJ5W2FsaWduRmxpcF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblthbGlnbl0gPSBuZXdWYWw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ2VsZW1lbnQnLCAndGFyZ2V0J10uZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxpcHBlZFtlbF1bZGlyXSA9ICFlbGVtT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZsaXBwZWRbZWxdW2Rpcl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmxpcHBlZFtlbF1bZGlyXSA9PT0gZGlyc1twcm9wXVsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZGlyc1twcm9wXVsyXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZGlyc1twcm9wXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9mZnNldChlbGVtZW50LCBwb3NpdGlvbik7XG5cbiAgICAgICAgcmV0dXJuIGZsaXBwZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KGVsZW1lbnQsIGNvb3JkaW5hdGVzKSB7XG5cbiAgICAgICAgaWYgKCFjb29yZGluYXRlcykge1xuICAgICAgICAgICAgcmV0dXJuIGdldERpbWVuc2lvbnMoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VycmVudE9mZnNldCA9IG9mZnNldChlbGVtZW50KTtcbiAgICAgICAgdmFyIHBvcyA9IGNzcyhlbGVtZW50LCAncG9zaXRpb24nKTtcblxuICAgICAgICBbJ2xlZnQnLCAndG9wJ10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgaWYgKHByb3AgaW4gY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBjc3MoZWxlbWVudCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsIHByb3AsIGNvb3JkaW5hdGVzW3Byb3BdIC0gY3VycmVudE9mZnNldFtwcm9wXVxuICAgICAgICAgICAgICAgICAgICArIHRvRmxvYXQocG9zID09PSAnYWJzb2x1dGUnICYmIHZhbHVlID09PSAnYXV0bydcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcG9zaXRpb24oZWxlbWVudClbcHJvcF1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyhlbGVtZW50KSB7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVmID0gdG9XaW5kb3coZWxlbWVudCk7XG4gICAgICAgIHZhciB0b3AgPSByZWYucGFnZVlPZmZzZXQ7XG4gICAgICAgIHZhciBsZWZ0ID0gcmVmLnBhZ2VYT2Zmc2V0O1xuXG4gICAgICAgIGlmIChpc1dpbmRvdyhlbGVtZW50KSkge1xuXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5pbm5lckhlaWdodDtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGVsZW1lbnQuaW5uZXJXaWR0aDtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICBib3R0b206IHRvcCArIGhlaWdodCxcbiAgICAgICAgICAgICAgICByaWdodDogbGVmdCArIHdpZHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0eWxlLCBoaWRkZW47XG5cbiAgICAgICAgaWYgKCFpc1Zpc2libGUoZWxlbWVudCkgJiYgY3NzKGVsZW1lbnQsICdkaXNwbGF5JykgPT09ICdub25lJykge1xuXG4gICAgICAgICAgICBzdHlsZSA9IGF0dHIoZWxlbWVudCwgJ3N0eWxlJyk7XG4gICAgICAgICAgICBoaWRkZW4gPSBhdHRyKGVsZW1lbnQsICdoaWRkZW4nKTtcblxuICAgICAgICAgICAgYXR0cihlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgc3R5bGU6ICgoc3R5bGUgfHwgJycpICsgXCI7ZGlzcGxheTpibG9jayAhaW1wb3J0YW50O1wiKSxcbiAgICAgICAgICAgICAgICBoaWRkZW46IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcblxuICAgICAgICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChzdHlsZSkpIHtcbiAgICAgICAgICAgIGF0dHIoZWxlbWVudCwge3N0eWxlOiBzdHlsZSwgaGlkZGVuOiBoaWRkZW59KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgICAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICAgICAgICB0b3A6IHJlY3QudG9wICsgdG9wLFxuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgbGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyB0b3AsXG4gICAgICAgICAgICByaWdodDogcmVjdC5yaWdodCArIGxlZnRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGlvbihlbGVtZW50LCBwYXJlbnQpIHtcblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgdG9Ob2RlKGVsZW1lbnQpLm9mZnNldFBhcmVudCB8fCB0b1dpbmRvdyhlbGVtZW50KS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICAgICAgdmFyIGVsZW1lbnRPZmZzZXQgPSBvZmZzZXQoZWxlbWVudCk7XG4gICAgICAgIHZhciBwYXJlbnRPZmZzZXQgPSBvZmZzZXQocGFyZW50KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9wOiBlbGVtZW50T2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSB0b0Zsb2F0KGNzcyhwYXJlbnQsICdib3JkZXJUb3BXaWR0aCcpKSxcbiAgICAgICAgICAgIGxlZnQ6IGVsZW1lbnRPZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0gdG9GbG9hdChjc3MocGFyZW50LCAnYm9yZGVyTGVmdFdpZHRoJykpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2Zmc2V0UG9zaXRpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gWzAsIDBdO1xuXG4gICAgICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG5cbiAgICAgICAgZG8ge1xuXG4gICAgICAgICAgICBvZmZzZXRbMF0gKz0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICAgICAgICBvZmZzZXRbMV0gKz0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuXG4gICAgICAgICAgICBpZiAoY3NzKGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpbiA9IHRvV2luZG93KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIG9mZnNldFswXSArPSB3aW4ucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgICAgICAgb2Zmc2V0WzFdICs9IHdpbi5wYWdlWE9mZnNldDtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gd2hpbGUgKChlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQpKTtcblxuICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cblxuICAgIHZhciBoZWlnaHQgPSBkaW1lbnNpb24oJ2hlaWdodCcpO1xuICAgIHZhciB3aWR0aCA9IGRpbWVuc2lvbignd2lkdGgnKTtcblxuICAgIGZ1bmN0aW9uIGRpbWVuc2lvbihwcm9wKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IHVjZmlyc3QocHJvcCk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWUpIHtcblxuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzV2luZG93KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50WyhcImlubmVyXCIgKyBwcm9wTmFtZSldO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0RvY3VtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb2MgPSBlbGVtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGRvY1soXCJvZmZzZXRcIiArIHByb3BOYW1lKV0sIGRvY1soXCJzY3JvbGxcIiArIHByb3BOYW1lKV0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNzcyhlbGVtZW50LCBwcm9wKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSAnYXV0bycgPyBlbGVtZW50WyhcIm9mZnNldFwiICsgcHJvcE5hbWUpXSA6IHRvRmxvYXQodmFsdWUpIHx8IDA7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLSBib3hNb2RlbEFkanVzdChlbGVtZW50LCBwcm9wKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGNzcyhlbGVtZW50LCBwcm9wLCAhdmFsdWUgJiYgdmFsdWUgIT09IDBcbiAgICAgICAgICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgICAgICAgICA6ICt2YWx1ZSArIGJveE1vZGVsQWRqdXN0KGVsZW1lbnQsIHByb3ApICsgJ3B4J1xuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0KGVsZW1lbnQsIHByb3AsIHNpemluZykge1xuICAgICAgICBpZiAoIHNpemluZyA9PT0gdm9pZCAwICkgc2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuXG4gICAgICAgIHJldHVybiBjc3MoZWxlbWVudCwgJ2JveFNpemluZycpID09PSBzaXppbmdcbiAgICAgICAgICAgID8gZGlyc1twcm9wXS5zbGljZSgxKS5tYXAodWNmaXJzdCkucmVkdWNlKGZ1bmN0aW9uICh2YWx1ZSwgcHJvcCkgeyByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgICAgICArIHRvRmxvYXQoY3NzKGVsZW1lbnQsIChcInBhZGRpbmdcIiArIHByb3ApKSlcbiAgICAgICAgICAgICAgICArIHRvRmxvYXQoY3NzKGVsZW1lbnQsIChcImJvcmRlclwiICsgcHJvcCArIFwiV2lkdGhcIikpKTsgfVxuICAgICAgICAgICAgICAgICwgMClcbiAgICAgICAgICAgIDogMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlVG8ocG9zaXRpb24sIGF0dGFjaCwgZGltLCBmYWN0b3IpIHtcbiAgICAgICAgZWFjaChkaXJzLCBmdW5jdGlvbiAocmVmLCBwcm9wKSB7XG4gICAgICAgICAgICB2YXIgZGlyID0gcmVmWzBdO1xuICAgICAgICAgICAgdmFyIGFsaWduID0gcmVmWzFdO1xuICAgICAgICAgICAgdmFyIGFsaWduRmxpcCA9IHJlZlsyXTtcblxuICAgICAgICAgICAgaWYgKGF0dGFjaFtkaXJdID09PSBhbGlnbkZsaXApIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblthbGlnbl0gKz0gZGltW3Byb3BdICogZmFjdG9yO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRhY2hbZGlyXSA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblthbGlnbl0gKz0gZGltW3Byb3BdICogZmFjdG9yIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UG9zKHBvcykge1xuXG4gICAgICAgIHZhciB4ID0gL2xlZnR8Y2VudGVyfHJpZ2h0LztcbiAgICAgICAgdmFyIHkgPSAvdG9wfGNlbnRlcnxib3R0b20vO1xuXG4gICAgICAgIHBvcyA9IChwb3MgfHwgJycpLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgaWYgKHBvcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHBvcyA9IHgudGVzdChwb3NbMF0pXG4gICAgICAgICAgICAgICAgPyBwb3MuY29uY2F0KCdjZW50ZXInKVxuICAgICAgICAgICAgICAgIDogeS50ZXN0KHBvc1swXSlcbiAgICAgICAgICAgICAgICAgICAgPyBbJ2NlbnRlciddLmNvbmNhdChwb3MpXG4gICAgICAgICAgICAgICAgICAgIDogWydjZW50ZXInLCAnY2VudGVyJ107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeC50ZXN0KHBvc1swXSkgPyBwb3NbMF0gOiAnY2VudGVyJyxcbiAgICAgICAgICAgIHk6IHkudGVzdChwb3NbMV0pID8gcG9zWzFdIDogJ2NlbnRlcidcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRPZmZzZXRzKG9mZnNldHMsIHdpZHRoLCBoZWlnaHQpIHtcblxuICAgICAgICB2YXIgcmVmID0gKG9mZnNldHMgfHwgJycpLnNwbGl0KCcgJyk7XG4gICAgICAgIHZhciB4ID0gcmVmWzBdO1xuICAgICAgICB2YXIgeSA9IHJlZlsxXTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCA/IHRvRmxvYXQoeCkgKiAoZW5kc1dpdGgoeCwgJyUnKSA/IHdpZHRoIC8gMTAwIDogMSkgOiAwLFxuICAgICAgICAgICAgeTogeSA/IHRvRmxvYXQoeSkgKiAoZW5kc1dpdGgoeSwgJyUnKSA/IGhlaWdodCAvIDEwMCA6IDEpIDogMFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZsaXBQb3NpdGlvbihwb3MpIHtcbiAgICAgICAgc3dpdGNoIChwb3MpIHtcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9QeCh2YWx1ZSwgcHJvcGVydHksIGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCBwcm9wZXJ0eSA9PT0gdm9pZCAwICkgcHJvcGVydHkgPSAnd2lkdGgnO1xuICAgICAgICBpZiAoIGVsZW1lbnQgPT09IHZvaWQgMCApIGVsZW1lbnQgPSB3aW5kb3c7XG5cbiAgICAgICAgcmV0dXJuIGlzTnVtZXJpYyh2YWx1ZSlcbiAgICAgICAgICAgID8gK3ZhbHVlXG4gICAgICAgICAgICA6IGVuZHNXaXRoKHZhbHVlLCAndmgnKVxuICAgICAgICAgICAgICAgID8gcGVyY2VudChoZWlnaHQodG9XaW5kb3coZWxlbWVudCkpLCB2YWx1ZSlcbiAgICAgICAgICAgICAgICA6IGVuZHNXaXRoKHZhbHVlLCAndncnKVxuICAgICAgICAgICAgICAgICAgICA/IHBlcmNlbnQod2lkdGgodG9XaW5kb3coZWxlbWVudCkpLCB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiBlbmRzV2l0aCh2YWx1ZSwgJyUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwZXJjZW50KGdldERpbWVuc2lvbnMoZWxlbWVudClbcHJvcGVydHldLCB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdG9GbG9hdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVyY2VudChiYXNlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYmFzZSAqIHRvRmxvYXQodmFsdWUpIC8gMTAwO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIEJhc2VkIG9uOlxuICAgICAgICBDb3B5cmlnaHQgKGMpIDIwMTYgV2lsc29uIFBhZ2Ugd2lsc29ucGFnZUBtZS5jb21cbiAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL3dpbHNvbnBhZ2UvZmFzdGRvbVxuICAgICovXG5cbiAgICB2YXIgZmFzdGRvbSA9IHtcblxuICAgICAgICByZWFkczogW10sXG4gICAgICAgIHdyaXRlczogW10sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24odGFzaykge1xuICAgICAgICAgICAgdGhpcy5yZWFkcy5wdXNoKHRhc2spO1xuICAgICAgICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgICAgIH0sXG5cbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHRhc2spIHtcbiAgICAgICAgICAgIHRoaXMud3JpdGVzLnB1c2godGFzayk7XG4gICAgICAgICAgICBzY2hlZHVsZUZsdXNoKCk7XG4gICAgICAgICAgICByZXR1cm4gdGFzaztcbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhcjogZnVuY3Rpb24odGFzaykge1xuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZSQxKHRoaXMucmVhZHMsIHRhc2spIHx8IHJlbW92ZSQxKHRoaXMud3JpdGVzLCB0YXNrKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmbHVzaDogZmx1c2hcblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBmbHVzaChyZWN1cnNpb24pIHtcbiAgICAgICAgaWYgKCByZWN1cnNpb24gPT09IHZvaWQgMCApIHJlY3Vyc2lvbiA9IDE7XG5cbiAgICAgICAgcnVuVGFza3MoZmFzdGRvbS5yZWFkcyk7XG4gICAgICAgIHJ1blRhc2tzKGZhc3Rkb20ud3JpdGVzLnNwbGljZSgwLCBmYXN0ZG9tLndyaXRlcy5sZW5ndGgpKTtcblxuICAgICAgICBmYXN0ZG9tLnNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChmYXN0ZG9tLnJlYWRzLmxlbmd0aCB8fCBmYXN0ZG9tLndyaXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlRmx1c2gocmVjdXJzaW9uICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgUkVDVVJTSU9OX0xJTUlUID0gNTtcbiAgICBmdW5jdGlvbiBzY2hlZHVsZUZsdXNoKHJlY3Vyc2lvbikge1xuICAgICAgICBpZiAoIWZhc3Rkb20uc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICBmYXN0ZG9tLnNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAocmVjdXJzaW9uID4gUkVDVVJTSU9OX0xJTUlUKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXhpbXVtIHJlY3Vyc2lvbiBsaW1pdCByZWFjaGVkLicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZWN1cnNpb24pIHtcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZsdXNoKHJlY3Vyc2lvbik7IH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZmx1c2goKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5UYXNrcyh0YXNrcykge1xuICAgICAgICB2YXIgdGFzaztcbiAgICAgICAgd2hpbGUgKCh0YXNrID0gdGFza3Muc2hpZnQoKSkpIHtcbiAgICAgICAgICAgIHRhc2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZSQxKGFycmF5LCBpdGVtKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gICAgICAgIHJldHVybiAhIX5pbmRleCAmJiAhIWFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTW91c2VUcmFja2VyKCkge31cblxuICAgIE1vdXNlVHJhY2tlci5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgcG9zaXRpb25zOiBbXSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25zID0gW107XG5cbiAgICAgICAgICAgIHZhciBwb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kID0gb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gcG9zaXRpb24gPSBnZXRFdmVudFBvcyhlKTsgfSk7XG4gICAgICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcyQxLnBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzJDEucG9zaXRpb25zLmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLnBvc2l0aW9ucy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDUwKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZCAmJiB0aGlzLnVuYmluZCgpO1xuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCAmJiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1vdmVzVG86IGZ1bmN0aW9uKHRhcmdldCkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wb3NpdGlvbnMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHAgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgbGVmdCA9IHAubGVmdDtcbiAgICAgICAgICAgIHZhciByaWdodCA9IHAucmlnaHQ7XG4gICAgICAgICAgICB2YXIgdG9wID0gcC50b3A7XG4gICAgICAgICAgICB2YXIgYm90dG9tID0gcC5ib3R0b207XG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLnBvc2l0aW9ucztcbiAgICAgICAgICAgIHZhciBwcmV2UG9zaXRpb24gPSByZWZbMF07XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBsYXN0KHRoaXMucG9zaXRpb25zKTtcbiAgICAgICAgICAgIHZhciBwYXRoID0gW3ByZXZQb3NpdGlvbiwgcG9zaXRpb25dO1xuXG4gICAgICAgICAgICBpZiAocG9pbnRJblJlY3QocG9zaXRpb24sIHApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGlhZ29uYWxzID0gW1t7eDogbGVmdCwgeTogdG9wfSwge3g6IHJpZ2h0LCB5OiBib3R0b219XSwgW3t4OiBsZWZ0LCB5OiBib3R0b219LCB7eDogcmlnaHQsIHk6IHRvcH1dXTtcblxuICAgICAgICAgICAgcmV0dXJuIGRpYWdvbmFscy5zb21lKGZ1bmN0aW9uIChkaWFnb25hbCkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3QocGF0aCwgZGlhZ29uYWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb24gJiYgcG9pbnRJblJlY3QoaW50ZXJzZWN0aW9uLCBwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgLy8gSW5zcGlyZWQgYnkgaHR0cDovL3BhdWxib3Vya2UubmV0L2dlb21ldHJ5L3BvaW50bGluZXBsYW5lL1xuICAgIGZ1bmN0aW9uIGludGVyc2VjdChyZWYsIHJlZiQxKSB7XG4gICAgICAgIHZhciByZWZfMCA9IHJlZlswXTtcbiAgICAgICAgdmFyIHgxID0gcmVmXzAueDtcbiAgICAgICAgdmFyIHkxID0gcmVmXzAueTtcbiAgICAgICAgdmFyIHJlZl8xID0gcmVmWzFdO1xuICAgICAgICB2YXIgeDIgPSByZWZfMS54O1xuICAgICAgICB2YXIgeTIgPSByZWZfMS55O1xuICAgICAgICB2YXIgcmVmJDFfMCA9IHJlZiQxWzBdO1xuICAgICAgICB2YXIgeDMgPSByZWYkMV8wLng7XG4gICAgICAgIHZhciB5MyA9IHJlZiQxXzAueTtcbiAgICAgICAgdmFyIHJlZiQxXzEgPSByZWYkMVsxXTtcbiAgICAgICAgdmFyIHg0ID0gcmVmJDFfMS54O1xuICAgICAgICB2YXIgeTQgPSByZWYkMV8xLnk7XG5cblxuICAgICAgICB2YXIgZGVub21pbmF0b3IgPSAoeTQgLSB5MykgKiAoeDIgLSB4MSkgLSAoeDQgLSB4MykgKiAoeTIgLSB5MSk7XG5cbiAgICAgICAgLy8gTGluZXMgYXJlIHBhcmFsbGVsXG4gICAgICAgIGlmIChkZW5vbWluYXRvciA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVhID0gKCh4NCAtIHgzKSAqICh5MSAtIHkzKSAtICh5NCAtIHkzKSAqICh4MSAtIHgzKSkgLyBkZW5vbWluYXRvcjtcblxuICAgICAgICBpZiAodWEgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gYW4gb2JqZWN0IHdpdGggdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgb2YgdGhlIGludGVyc2VjdGlvblxuICAgICAgICByZXR1cm4ge3g6IHgxICsgdWEgKiAoeDIgLSB4MSksIHk6IHkxICsgdWEgKiAoeTIgLSB5MSl9O1xuICAgIH1cblxuICAgIHZhciBzdHJhdHMgPSB7fTtcblxuICAgIHN0cmF0cy5ldmVudHMgPVxuICAgIHN0cmF0cy5jcmVhdGVkID1cbiAgICBzdHJhdHMuYmVmb3JlQ29ubmVjdCA9XG4gICAgc3RyYXRzLmNvbm5lY3RlZCA9XG4gICAgc3RyYXRzLmJlZm9yZURpc2Nvbm5lY3QgPVxuICAgIHN0cmF0cy5kaXNjb25uZWN0ZWQgPVxuICAgIHN0cmF0cy5kZXN0cm95ID0gY29uY2F0U3RyYXQ7XG5cbiAgICAvLyBhcmdzIHN0cmF0ZWd5XG4gICAgc3RyYXRzLmFyZ3MgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gY2hpbGRWYWwgIT09IGZhbHNlICYmIGNvbmNhdFN0cmF0KGNoaWxkVmFsIHx8IHBhcmVudFZhbCk7XG4gICAgfTtcblxuICAgIC8vIHVwZGF0ZSBzdHJhdGVneVxuICAgIHN0cmF0cy51cGRhdGUgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gc29ydEJ5KGNvbmNhdFN0cmF0KHBhcmVudFZhbCwgaXNGdW5jdGlvbihjaGlsZFZhbCkgPyB7cmVhZDogY2hpbGRWYWx9IDogY2hpbGRWYWwpLCAnb3JkZXInKTtcbiAgICB9O1xuXG4gICAgLy8gcHJvcGVydHkgc3RyYXRlZ3lcbiAgICBzdHJhdHMucHJvcHMgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuXG4gICAgICAgIGlmIChpc0FycmF5KGNoaWxkVmFsKSkge1xuICAgICAgICAgICAgY2hpbGRWYWwgPSBjaGlsZFZhbC5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gU3RyaW5nO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHJhdHMubWV0aG9kcyhwYXJlbnRWYWwsIGNoaWxkVmFsKTtcbiAgICB9O1xuXG4gICAgLy8gZXh0ZW5kIHN0cmF0ZWd5XG4gICAgc3RyYXRzLmNvbXB1dGVkID1cbiAgICBzdHJhdHMubWV0aG9kcyA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgICAgICAgICAgPyBwYXJlbnRWYWxcbiAgICAgICAgICAgICAgICA/IGFzc2lnbih7fSwgcGFyZW50VmFsLCBjaGlsZFZhbClcbiAgICAgICAgICAgICAgICA6IGNoaWxkVmFsXG4gICAgICAgICAgICA6IHBhcmVudFZhbDtcbiAgICB9O1xuXG4gICAgLy8gZGF0YSBzdHJhdGVneVxuICAgIHN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKSB7XG5cbiAgICAgICAgaWYgKCF2bSkge1xuXG4gICAgICAgICAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFZhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRWYWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodm0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVyZ2VGbkRhdGEocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lcmdlRm5EYXRhKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWVyZ2VGbkRhdGEocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pIHtcbiAgICAgICAgcmV0dXJuIHN0cmF0cy5jb21wdXRlZChcbiAgICAgICAgICAgIGlzRnVuY3Rpb24ocGFyZW50VmFsKVxuICAgICAgICAgICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICAgICAgICAgIDogcGFyZW50VmFsLFxuICAgICAgICAgICAgaXNGdW5jdGlvbihjaGlsZFZhbClcbiAgICAgICAgICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICAgICAgICAgIDogY2hpbGRWYWxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb25jYXQgc3RyYXRlZ3lcbiAgICBmdW5jdGlvbiBjb25jYXRTdHJhdChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG5cbiAgICAgICAgcGFyZW50VmFsID0gcGFyZW50VmFsICYmICFpc0FycmF5KHBhcmVudFZhbCkgPyBbcGFyZW50VmFsXSA6IHBhcmVudFZhbDtcblxuICAgICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICAgICAgICAgID8gcGFyZW50VmFsXG4gICAgICAgICAgICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgICAgICAgICAgIDogaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgICAgICAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICAgICAgICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICAgICAgICAgIDogcGFyZW50VmFsO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgc3RyYXRlZ3lcbiAgICBmdW5jdGlvbiBkZWZhdWx0U3RyYXQocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gaXNVbmRlZmluZWQoY2hpbGRWYWwpID8gcGFyZW50VmFsIDogY2hpbGRWYWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQsIHZtKSB7XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHtcbiAgICAgICAgICAgIG1lcmdlS2V5KGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkkMSkpIHtcbiAgICAgICAgICAgICAgICBtZXJnZUtleShrZXkkMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtZXJnZUtleShrZXkpIHtcbiAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IChzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQpKHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU9wdGlvbnMob3B0aW9ucywgYXJncykge1xuICAgICAgICB2YXIgb2JqO1xuXG4gICAgICAgIGlmICggYXJncyA9PT0gdm9pZCAwICkgYXJncyA9IFtdO1xuXG4gICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgIHJldHVybiAhb3B0aW9uc1xuICAgICAgICAgICAgICAgID8ge31cbiAgICAgICAgICAgICAgICA6IHN0YXJ0c1dpdGgob3B0aW9ucywgJ3snKVxuICAgICAgICAgICAgICAgICAgICA/IEpTT04ucGFyc2Uob3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgOiBhcmdzLmxlbmd0aCAmJiAhaW5jbHVkZXMob3B0aW9ucywgJzonKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKCBvYmogPSB7fSwgb2JqW2FyZ3NbMF1dID0gb3B0aW9ucywgb2JqICkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbnMuc3BsaXQoJzsnKS5yZWR1Y2UoZnVuY3Rpb24gKG9wdGlvbnMsIG9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBvcHRpb24uc3BsaXQoLzooLiopLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByZWZbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAmJiAhaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNba2V5LnRyaW0oKV0gPSB2YWx1ZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdmFyIGlkID0gMDtcblxuICAgIHZhciBQbGF5ZXIgPSBmdW5jdGlvbihlbCkge1xuICAgICAgICB0aGlzLmlkID0gKytpZDtcbiAgICAgICAgdGhpcy5lbCA9IHRvTm9kZShlbCk7XG4gICAgfTtcblxuICAgIFBsYXllci5wcm90b3R5cGUuaXNWaWRlbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNZb3V0dWJlKCkgfHwgdGhpcy5pc1ZpbWVvKCkgfHwgdGhpcy5pc0hUTUw1KCk7XG4gICAgfTtcblxuICAgIFBsYXllci5wcm90b3R5cGUuaXNIVE1MNSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwudGFnTmFtZSA9PT0gJ1ZJREVPJztcbiAgICB9O1xuXG4gICAgUGxheWVyLnByb3RvdHlwZS5pc0lGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwudGFnTmFtZSA9PT0gJ0lGUkFNRSc7XG4gICAgfTtcblxuICAgIFBsYXllci5wcm90b3R5cGUuaXNZb3V0dWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0lGcmFtZSgpICYmICEhdGhpcy5lbC5zcmMubWF0Y2goL1xcL1xcLy4qP3lvdXR1YmUoLW5vY29va2llKT9cXC5bYS16XStcXC8od2F0Y2hcXD92PVteJlxcc10rfGVtYmVkKXx5b3V0dVxcLmJlXFwvLiovKTtcbiAgICB9O1xuXG4gICAgUGxheWVyLnByb3RvdHlwZS5pc1ZpbWVvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0lGcmFtZSgpICYmICEhdGhpcy5lbC5zcmMubWF0Y2goL3ZpbWVvXFwuY29tXFwvdmlkZW9cXC8uKi8pO1xuICAgIH07XG5cbiAgICBQbGF5ZXIucHJvdG90eXBlLmVuYWJsZUFwaSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgaWYgKHRoaXMucmVhZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWR5O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHlvdXR1YmUgPSB0aGlzLmlzWW91dHViZSgpO1xuICAgICAgICB2YXIgdmltZW8gPSB0aGlzLmlzVmltZW8oKTtcblxuICAgICAgICB2YXIgcG9sbGVyO1xuXG4gICAgICAgIGlmICh5b3V0dWJlIHx8IHZpbWVvKSB7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWR5ID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblxuICAgICAgICAgICAgICAgIG9uY2UodGhpcyQxLmVsLCAnbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHlvdXR1YmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBvc3QodGhpcyQxLmVsLCB7ZXZlbnQ6ICdsaXN0ZW5pbmcnLCBpZDogdGhpcyQxLmlkfSk7IH07XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xsZXIgPSBzZXRJbnRlcnZhbChsaXN0ZW5lciwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGxpc3RlbihmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4geW91dHViZSAmJiBkYXRhLmlkID09PSB0aGlzJDEuaWQgJiYgZGF0YS5ldmVudCA9PT0gJ29uUmVhZHknIHx8IHZpbWVvICYmIE51bWJlcihkYXRhLnBsYXllcl9pZCkgPT09IHRoaXMkMS5pZDsgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9sbGVyICYmIGNsZWFySW50ZXJ2YWwocG9sbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBhdHRyKHRoaXMkMS5lbCwgJ3NyYycsIChcIlwiICsgKHRoaXMkMS5lbC5zcmMpICsgKGluY2x1ZGVzKHRoaXMkMS5lbC5zcmMsICc/JykgPyAnJicgOiAnPycpICsgKHlvdXR1YmUgPyAnZW5hYmxlanNhcGk9MScgOiAoXCJhcGk9MSZwbGF5ZXJfaWQ9XCIgKyAodGhpcyQxLmlkKSkpKSk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICB9O1xuXG4gICAgUGxheWVyLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICBpZiAoIXRoaXMuaXNWaWRlbygpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc0lGcmFtZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZUFwaSgpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gcG9zdCh0aGlzJDEuZWwsIHtmdW5jOiAncGxheVZpZGVvJywgbWV0aG9kOiAncGxheSd9KTsgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0hUTUw1KCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLmVsLnBsYXkoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UuY2F0Y2gobm9vcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBQbGF5ZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICBpZiAoIXRoaXMuaXNWaWRlbygpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc0lGcmFtZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZUFwaSgpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gcG9zdCh0aGlzJDEuZWwsIHtmdW5jOiAncGF1c2VWaWRlbycsIG1ldGhvZDogJ3BhdXNlJ30pOyB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzSFRNTDUoKSkge1xuICAgICAgICAgICAgdGhpcy5lbC5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFBsYXllci5wcm90b3R5cGUubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmlkZW8oKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNJRnJhbWUoKSkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGVBcGkoKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBvc3QodGhpcyQxLmVsLCB7ZnVuYzogJ211dGUnLCBtZXRob2Q6ICdzZXRWb2x1bWUnLCB2YWx1ZTogMH0pOyB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzSFRNTDUoKSkge1xuICAgICAgICAgICAgdGhpcy5lbC5tdXRlZCA9IHRydWU7XG4gICAgICAgICAgICBhdHRyKHRoaXMuZWwsICdtdXRlZCcsICcnKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvc3QoZWwsIGNtZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZWwuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShhc3NpZ24oe2V2ZW50OiAnY29tbWFuZCd9LCBjbWQpKSwgJyonKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW4oY2IpIHtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIG9uY2Uod2luZG93LCAnbWVzc2FnZScsIGZ1bmN0aW9uIChfLCBkYXRhKSB7IHJldHVybiByZXNvbHZlKGRhdGEpOyB9LCBmYWxzZSwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG5cblxuICAgICAgICAgICAgICAgIGlmICghZGF0YSB8fCAhaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhICYmIGNiKGRhdGEpO1xuXG4gICAgICAgICAgICB9KTsgfVxuXG4gICAgICAgICk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0luVmlldyhlbGVtZW50LCBvZmZzZXRUb3AsIG9mZnNldExlZnQpIHtcbiAgICAgICAgaWYgKCBvZmZzZXRUb3AgPT09IHZvaWQgMCApIG9mZnNldFRvcCA9IDA7XG4gICAgICAgIGlmICggb2Zmc2V0TGVmdCA9PT0gdm9pZCAwICkgb2Zmc2V0TGVmdCA9IDA7XG5cblxuICAgICAgICBpZiAoIWlzVmlzaWJsZShlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcmVudHMgPSBvdmVyZmxvd1BhcmVudHMoZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIHBhcmVudHMuZXZlcnkoZnVuY3Rpb24gKHBhcmVudCwgaSkge1xuXG4gICAgICAgICAgICB2YXIgY2xpZW50ID0gb2Zmc2V0KHBhcmVudHNbaSArIDFdIHx8IGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIHJlZiA9IG9mZnNldChnZXRWaWV3cG9ydChwYXJlbnQpKTtcbiAgICAgICAgICAgIHZhciB0b3AgPSByZWYudG9wO1xuICAgICAgICAgICAgdmFyIGxlZnQgPSByZWYubGVmdDtcbiAgICAgICAgICAgIHZhciBib3R0b20gPSByZWYuYm90dG9tO1xuICAgICAgICAgICAgdmFyIHJpZ2h0ID0gcmVmLnJpZ2h0O1xuXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0UmVjdChjbGllbnQsIHtcbiAgICAgICAgICAgICAgICB0b3A6IHRvcCAtIG9mZnNldFRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0IC0gb2Zmc2V0TGVmdCxcbiAgICAgICAgICAgICAgICBib3R0b206IGJvdHRvbSArIG9mZnNldFRvcCxcbiAgICAgICAgICAgICAgICByaWdodDogcmlnaHQgKyBvZmZzZXRMZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsVG9wKGVsZW1lbnQsIHRvcCkge1xuXG4gICAgICAgIGlmIChpc1dpbmRvdyhlbGVtZW50KSB8fCBpc0RvY3VtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gZ2V0U2Nyb2xsaW5nRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnNjcm9sbFRvcCA9IHRvcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxJbnRvVmlldyhlbGVtZW50LCByZWYpIHtcbiAgICAgICAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9O1xuICAgICAgICB2YXIgb2Zmc2V0QnkgPSByZWYub2Zmc2V0OyBpZiAoIG9mZnNldEJ5ID09PSB2b2lkIDAgKSBvZmZzZXRCeSA9IDA7XG5cblxuICAgICAgICBpZiAoIWlzVmlzaWJsZShlbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcmVudHMgPSBvdmVyZmxvd1BhcmVudHMoZWxlbWVudCkuY29uY2F0KGVsZW1lbnQpO1xuXG4gICAgICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBpICkge1xuICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxFbGVtZW50ID0gcGFyZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBwYXJlbnRzW2kgKyAxXTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsID0gc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3AgPSBNYXRoLmNlaWwocG9zaXRpb24oZWxlbWVudCwgZ2V0Vmlld3BvcnQoc2Nyb2xsRWxlbWVudCkpLnRvcCAtIG9mZnNldEJ5KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gZ2V0RHVyYXRpb24oTWF0aC5hYnModG9wKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwZXJjZW50ID0gZWFzZShjbGFtcCgoRGF0ZS5ub3coKSAtIHN0YXJ0KSAvIGR1cmF0aW9uKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcChzY3JvbGxFbGVtZW50LCBzY3JvbGwgKyB0b3AgKiBwZXJjZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2Nyb2xsIG1vcmUgaWYgd2UgaGF2ZSBub3QgcmVhY2hlZCBvdXIgZGVzdGluYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZXJjZW50ICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBzdGVwKCk7XG4gICAgICAgICAgICAgICAgfSk7IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRzLmxlbmd0aCAtIDE7IGkrKykgbG9vcCggaSApO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldER1cmF0aW9uKGRpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiA0MCAqIE1hdGgucG93KGRpc3QsIC4zNzUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZWFzZShrKSB7XG4gICAgICAgICAgICByZXR1cm4gMC41ICogKDEgLSBNYXRoLmNvcyhNYXRoLlBJICogaykpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxlZE92ZXIoZWxlbWVudCwgaGVpZ2h0T2Zmc2V0KSB7XG4gICAgICAgIGlmICggaGVpZ2h0T2Zmc2V0ID09PSB2b2lkIDAgKSBoZWlnaHRPZmZzZXQgPSAwO1xuXG5cbiAgICAgICAgaWYgKCFpc1Zpc2libGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNjcm9sbEVsZW1lbnQgPSBsYXN0KHNjcm9sbFBhcmVudHMoZWxlbWVudCkpO1xuICAgICAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSBzY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgdmFyIHZpZXdwb3J0ID0gZ2V0Vmlld3BvcnQoc2Nyb2xsRWxlbWVudCk7XG4gICAgICAgIHZhciB2aWV3cG9ydEhlaWdodCA9IG9mZnNldCh2aWV3cG9ydCkuaGVpZ2h0O1xuICAgICAgICB2YXIgdmlld3BvcnRUb3AgPSBvZmZzZXRQb3NpdGlvbihlbGVtZW50KVswXSAtIHNjcm9sbFRvcCAtIG9mZnNldFBvc2l0aW9uKHNjcm9sbEVsZW1lbnQpWzBdO1xuICAgICAgICB2YXIgdmlld3BvcnREaXN0ID0gTWF0aC5taW4odmlld3BvcnRIZWlnaHQsIHZpZXdwb3J0VG9wICsgc2Nyb2xsVG9wKTtcblxuICAgICAgICB2YXIgdG9wID0gdmlld3BvcnRUb3AgLSB2aWV3cG9ydERpc3Q7XG4gICAgICAgIHZhciBkaXN0ID0gTWF0aC5taW4oXG4gICAgICAgICAgICBvZmZzZXQoZWxlbWVudCkuaGVpZ2h0ICsgaGVpZ2h0T2Zmc2V0ICsgdmlld3BvcnREaXN0LFxuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0IC0gKHZpZXdwb3J0VG9wICsgc2Nyb2xsVG9wKSxcbiAgICAgICAgICAgIHNjcm9sbEhlaWdodCAtIHZpZXdwb3J0SGVpZ2h0XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGNsYW1wKC0xICogdG9wIC8gZGlzdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsUGFyZW50cyhlbGVtZW50LCBvdmVyZmxvd1JlKSB7XG4gICAgICAgIGlmICggb3ZlcmZsb3dSZSA9PT0gdm9pZCAwICkgb3ZlcmZsb3dSZSA9IC9hdXRvfHNjcm9sbC87XG5cbiAgICAgICAgdmFyIHNjcm9sbEVsID0gZ2V0U2Nyb2xsaW5nRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgdmFyIHNjcm9sbFBhcmVudHMgPSBwYXJlbnRzKGVsZW1lbnQpLmZpbHRlcihmdW5jdGlvbiAocGFyZW50KSB7IHJldHVybiBwYXJlbnQgPT09IHNjcm9sbEVsXG4gICAgICAgICAgICB8fCBvdmVyZmxvd1JlLnRlc3QoY3NzKHBhcmVudCwgJ292ZXJmbG93JykpXG4gICAgICAgICAgICAmJiBwYXJlbnQuc2Nyb2xsSGVpZ2h0ID4gTWF0aC5yb3VuZChvZmZzZXQocGFyZW50KS5oZWlnaHQpOyB9XG4gICAgICAgICkucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gc2Nyb2xsUGFyZW50cy5sZW5ndGggPyBzY3JvbGxQYXJlbnRzIDogW3Njcm9sbEVsXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWaWV3cG9ydChzY3JvbGxFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBzY3JvbGxFbGVtZW50ID09PSBnZXRTY3JvbGxpbmdFbGVtZW50KHNjcm9sbEVsZW1lbnQpID8gd2luZG93IDogc2Nyb2xsRWxlbWVudDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvdmVyZmxvd1BhcmVudHMoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsUGFyZW50cyhlbGVtZW50LCAvYXV0b3xzY3JvbGx8aGlkZGVuLyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2Nyb2xsaW5nRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHZhciByZWYgPSB0b1dpbmRvdyhlbGVtZW50KTtcbiAgICAgICAgdmFyIGRvY3VtZW50ID0gcmVmLmRvY3VtZW50O1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIEludGVyc2VjdGlvbk9ic2VydmVyID0gaW5Ccm93c2VyICYmIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlclxuICAgICAgICB8fCAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDbGFzcyhjYWxsYmFjaywgcmVmKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgIGlmICggcmVmID09PSB2b2lkIDAgKSByZWYgPSB7fTtcbiAgICAgICAgICAgIHZhciByb290TWFyZ2luID0gcmVmLnJvb3RNYXJnaW47IGlmICggcm9vdE1hcmdpbiA9PT0gdm9pZCAwICkgcm9vdE1hcmdpbiA9ICcwIDAnO1xuXG5cbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldHMgPSBbXTtcblxuICAgICAgICAgICAgICAgIHZhciByZWYkMSA9IChyb290TWFyZ2luIHx8ICcwIDAnKS5zcGxpdCgnICcpLm1hcCh0b0Zsb2F0KTtcbiAgICAgICAgICAgIHZhciBvZmZzZXRUb3AgPSByZWYkMVswXTtcbiAgICAgICAgICAgIHZhciBvZmZzZXRMZWZ0ID0gcmVmJDFbMV07XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldFRvcCA9IG9mZnNldFRvcDtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldExlZnQgPSBvZmZzZXRMZWZ0O1xuXG4gICAgICAgICAgICAgICAgdmFyIHBlbmRpbmc7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWNvcmRzID0gdGhpcyQxLnRha2VSZWNvcmRzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlY29yZHMsIHRoaXMkMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7IH0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHRoaXMub2ZmID0gb24od2luZG93LCAnc2Nyb2xsIHJlc2l6ZSBsb2FkJywgdGhpcy5hcHBseSwge3Bhc3NpdmU6IHRydWUsIGNhcHR1cmU6IHRydWV9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBJbnRlcnNlY3Rpb25PYnNlcnZlckNsYXNzLnByb3RvdHlwZS50YWtlUmVjb3JkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhcmdldHMuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpblZpZXcgPSBpc0luVmlldyhlbnRyeS50YXJnZXQsIHRoaXMkMS5vZmZzZXRUb3AsIHRoaXMkMS5vZmZzZXRMZWZ0KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcgPT09IG51bGwgfHwgaW5WaWV3IF4gZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LmlzSW50ZXJzZWN0aW5nID0gaW5WaWV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDbGFzcy5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICBpc0ludGVyc2VjdGluZzogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHkoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIEludGVyc2VjdGlvbk9ic2VydmVyQ2xhc3MucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEludGVyc2VjdGlvbk9ic2VydmVyQ2xhc3M7XG4gICAgfSgpKTtcblxuICAgIHZhciB1dGlsID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICAgICAgICBfX3Byb3RvX186IG51bGwsXG4gICAgICAgIGFqYXg6IGFqYXgsXG4gICAgICAgIGdldEltYWdlOiBnZXRJbWFnZSxcbiAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgICAgICAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgICAgICAgYW5pbWF0ZTogYW5pbWF0ZSxcbiAgICAgICAgQW5pbWF0aW9uOiBBbmltYXRpb24sXG4gICAgICAgIGF0dHI6IGF0dHIsXG4gICAgICAgIGhhc0F0dHI6IGhhc0F0dHIsXG4gICAgICAgIHJlbW92ZUF0dHI6IHJlbW92ZUF0dHIsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGFkZENsYXNzOiBhZGRDbGFzcyxcbiAgICAgICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxuICAgICAgICByZW1vdmVDbGFzc2VzOiByZW1vdmVDbGFzc2VzLFxuICAgICAgICByZXBsYWNlQ2xhc3M6IHJlcGxhY2VDbGFzcyxcbiAgICAgICAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxuICAgICAgICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gICAgICAgIHBvc2l0aW9uQXQ6IHBvc2l0aW9uQXQsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgIG9mZnNldFBvc2l0aW9uOiBvZmZzZXRQb3NpdGlvbixcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgYm94TW9kZWxBZGp1c3Q6IGJveE1vZGVsQWRqdXN0LFxuICAgICAgICBmbGlwUG9zaXRpb246IGZsaXBQb3NpdGlvbixcbiAgICAgICAgdG9QeDogdG9QeCxcbiAgICAgICAgcmVhZHk6IHJlYWR5LFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGdldEluZGV4OiBnZXRJbmRleCxcbiAgICAgICAgZW1wdHk6IGVtcHR5LFxuICAgICAgICBodG1sOiBodG1sLFxuICAgICAgICBwcmVwZW5kOiBwcmVwZW5kLFxuICAgICAgICBhcHBlbmQ6IGFwcGVuZCxcbiAgICAgICAgYmVmb3JlOiBiZWZvcmUsXG4gICAgICAgIGFmdGVyOiBhZnRlcixcbiAgICAgICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgICAgIHdyYXBBbGw6IHdyYXBBbGwsXG4gICAgICAgIHdyYXBJbm5lcjogd3JhcElubmVyLFxuICAgICAgICB1bndyYXA6IHVud3JhcCxcbiAgICAgICAgZnJhZ21lbnQ6IGZyYWdtZW50LFxuICAgICAgICBhcHBseTogYXBwbHksXG4gICAgICAgICQ6ICQsXG4gICAgICAgICQkOiAkJCxcbiAgICAgICAgaW5Ccm93c2VyOiBpbkJyb3dzZXIsXG4gICAgICAgIGlzSUU6IGlzSUUsXG4gICAgICAgIGlzUnRsOiBpc1J0bCxcbiAgICAgICAgaGFzVG91Y2g6IGhhc1RvdWNoLFxuICAgICAgICBwb2ludGVyRG93bjogcG9pbnRlckRvd24sXG4gICAgICAgIHBvaW50ZXJNb3ZlOiBwb2ludGVyTW92ZSxcbiAgICAgICAgcG9pbnRlclVwOiBwb2ludGVyVXAsXG4gICAgICAgIHBvaW50ZXJFbnRlcjogcG9pbnRlckVudGVyLFxuICAgICAgICBwb2ludGVyTGVhdmU6IHBvaW50ZXJMZWF2ZSxcbiAgICAgICAgcG9pbnRlckNhbmNlbDogcG9pbnRlckNhbmNlbCxcbiAgICAgICAgb246IG9uLFxuICAgICAgICBvZmY6IG9mZixcbiAgICAgICAgb25jZTogb25jZSxcbiAgICAgICAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgICAgICAgY3JlYXRlRXZlbnQ6IGNyZWF0ZUV2ZW50LFxuICAgICAgICB0b0V2ZW50VGFyZ2V0czogdG9FdmVudFRhcmdldHMsXG4gICAgICAgIGlzVG91Y2g6IGlzVG91Y2gsXG4gICAgICAgIGdldEV2ZW50UG9zOiBnZXRFdmVudFBvcyxcbiAgICAgICAgZmFzdGRvbTogZmFzdGRvbSxcbiAgICAgICAgaXNWb2lkRWxlbWVudDogaXNWb2lkRWxlbWVudCxcbiAgICAgICAgaXNWaXNpYmxlOiBpc1Zpc2libGUsXG4gICAgICAgIHNlbElucHV0OiBzZWxJbnB1dCxcbiAgICAgICAgaXNJbnB1dDogaXNJbnB1dCxcbiAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgIHdpdGhpbjogd2l0aGluLFxuICAgICAgICBwYXJlbnRzOiBwYXJlbnRzLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgIGhhc093bjogaGFzT3duLFxuICAgICAgICBoeXBoZW5hdGU6IGh5cGhlbmF0ZSxcbiAgICAgICAgY2FtZWxpemU6IGNhbWVsaXplLFxuICAgICAgICB1Y2ZpcnN0OiB1Y2ZpcnN0LFxuICAgICAgICBzdGFydHNXaXRoOiBzdGFydHNXaXRoLFxuICAgICAgICBlbmRzV2l0aDogZW5kc1dpdGgsXG4gICAgICAgIGluY2x1ZGVzOiBpbmNsdWRlcyxcbiAgICAgICAgZmluZEluZGV4OiBmaW5kSW5kZXgsXG4gICAgICAgIGlzQXJyYXk6IGlzQXJyYXksXG4gICAgICAgIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gICAgICAgIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgICAgICAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgICAgICAgaXNXaW5kb3c6IGlzV2luZG93LFxuICAgICAgICBpc0RvY3VtZW50OiBpc0RvY3VtZW50LFxuICAgICAgICBpc0pRdWVyeTogaXNKUXVlcnksXG4gICAgICAgIGlzTm9kZTogaXNOb2RlLFxuICAgICAgICBpc0VsZW1lbnQ6IGlzRWxlbWVudCxcbiAgICAgICAgaXNOb2RlQ29sbGVjdGlvbjogaXNOb2RlQ29sbGVjdGlvbixcbiAgICAgICAgaXNCb29sZWFuOiBpc0Jvb2xlYW4sXG4gICAgICAgIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgICAgICAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICAgICAgICBpc051bWVyaWM6IGlzTnVtZXJpYyxcbiAgICAgICAgaXNFbXB0eTogaXNFbXB0eSxcbiAgICAgICAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICAgICAgICB0b0Jvb2xlYW46IHRvQm9vbGVhbixcbiAgICAgICAgdG9OdW1iZXI6IHRvTnVtYmVyLFxuICAgICAgICB0b0Zsb2F0OiB0b0Zsb2F0LFxuICAgICAgICB0b05vZGU6IHRvTm9kZSxcbiAgICAgICAgdG9Ob2RlczogdG9Ob2RlcyxcbiAgICAgICAgdG9XaW5kb3c6IHRvV2luZG93LFxuICAgICAgICB0b0xpc3Q6IHRvTGlzdCxcbiAgICAgICAgdG9NczogdG9NcyxcbiAgICAgICAgaXNFcXVhbDogaXNFcXVhbCxcbiAgICAgICAgc3dhcDogc3dhcCxcbiAgICAgICAgYXNzaWduOiBhc3NpZ24sXG4gICAgICAgIGxhc3Q6IGxhc3QsXG4gICAgICAgIGVhY2g6IGVhY2gsXG4gICAgICAgIHNvcnRCeTogc29ydEJ5LFxuICAgICAgICB1bmlxdWVCeTogdW5pcXVlQnksXG4gICAgICAgIGNsYW1wOiBjbGFtcCxcbiAgICAgICAgbm9vcDogbm9vcCxcbiAgICAgICAgaW50ZXJzZWN0UmVjdDogaW50ZXJzZWN0UmVjdCxcbiAgICAgICAgcG9pbnRJblJlY3Q6IHBvaW50SW5SZWN0LFxuICAgICAgICBEaW1lbnNpb25zOiBEaW1lbnNpb25zLFxuICAgICAgICBNb3VzZVRyYWNrZXI6IE1vdXNlVHJhY2tlcixcbiAgICAgICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgICAgIHBhcnNlT3B0aW9uczogcGFyc2VPcHRpb25zLFxuICAgICAgICBQbGF5ZXI6IFBsYXllcixcbiAgICAgICAgUHJvbWlzZTogUHJvbWlzZSxcbiAgICAgICAgRGVmZXJyZWQ6IERlZmVycmVkLFxuICAgICAgICBJbnRlcnNlY3Rpb25PYnNlcnZlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXIsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgcXVlcnlBbGw6IHF1ZXJ5QWxsLFxuICAgICAgICBmaW5kOiBmaW5kLFxuICAgICAgICBmaW5kQWxsOiBmaW5kQWxsLFxuICAgICAgICBtYXRjaGVzOiBtYXRjaGVzLFxuICAgICAgICBjbG9zZXN0OiBjbG9zZXN0LFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgZXNjYXBlOiBlc2NhcGUsXG4gICAgICAgIGNzczogY3NzLFxuICAgICAgICBnZXRTdHlsZXM6IGdldFN0eWxlcyxcbiAgICAgICAgZ2V0U3R5bGU6IGdldFN0eWxlLFxuICAgICAgICBnZXRDc3NWYXI6IGdldENzc1ZhcixcbiAgICAgICAgcHJvcE5hbWU6IHByb3BOYW1lLFxuICAgICAgICBpc0luVmlldzogaXNJblZpZXcsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICBzY3JvbGxJbnRvVmlldzogc2Nyb2xsSW50b1ZpZXcsXG4gICAgICAgIHNjcm9sbGVkT3Zlcjogc2Nyb2xsZWRPdmVyLFxuICAgICAgICBzY3JvbGxQYXJlbnRzOiBzY3JvbGxQYXJlbnRzLFxuICAgICAgICBnZXRWaWV3cG9ydDogZ2V0Vmlld3BvcnRcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGdsb2JhbEFQSSAoVUlraXQpIHtcblxuICAgICAgICB2YXIgREFUQSA9IFVJa2l0LmRhdGE7XG5cbiAgICAgICAgVUlraXQudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuXG4gICAgICAgICAgICBpZiAocGx1Z2luLmluc3RhbGxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGx1Z2luLmNhbGwobnVsbCwgdGhpcyk7XG4gICAgICAgICAgICBwbHVnaW4uaW5zdGFsbGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4sIGNvbXBvbmVudCkge1xuICAgICAgICAgICAgY29tcG9uZW50ID0gKGlzU3RyaW5nKGNvbXBvbmVudCkgPyBVSWtpdC5jb21wb25lbnQoY29tcG9uZW50KSA6IGNvbXBvbmVudCkgfHwgdGhpcztcbiAgICAgICAgICAgIGNvbXBvbmVudC5vcHRpb25zID0gbWVyZ2VPcHRpb25zKGNvbXBvbmVudC5vcHRpb25zLCBtaXhpbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQuZXh0ZW5kID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgU3ViID0gZnVuY3Rpb24gVUlraXRDb21wb25lbnQob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgICAgICAgICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICAgICAgICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFN1cGVyLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICBTdWIuc3VwZXIgPSBTdXBlcjtcbiAgICAgICAgICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG5cbiAgICAgICAgICAgIHJldHVybiBTdWI7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQudXBkYXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGUpIHtcblxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQgPyB0b05vZGUoZWxlbWVudCkgOiBkb2N1bWVudC5ib2R5O1xuXG4gICAgICAgICAgICBwYXJlbnRzKGVsZW1lbnQpLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiB1cGRhdGUoZWxlbWVudFtEQVRBXSwgZSk7IH0pO1xuICAgICAgICAgICAgYXBwbHkoZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIHVwZGF0ZShlbGVtZW50W0RBVEFdLCBlKTsgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY29udGFpbmVyO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVUlraXQsICdjb250YWluZXInLCB7XG5cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGUoZGF0YSwgZSkge1xuXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhW25hbWVdLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtuYW1lXS5fY2FsbFVwZGF0ZShlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhvb2tzQVBJIChVSWtpdCkge1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbEhvb2sgPSBmdW5jdGlvbiAoaG9vaykge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy4kb3B0aW9uc1tob29rXTtcblxuICAgICAgICAgICAgaWYgKGhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlci5jYWxsKHRoaXMkMSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbENvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgICAgICAgICAgdGhpcy5fY29tcHV0ZWRzID0ge307XG4gICAgICAgICAgICB0aGlzLl9mcmFtZXMgPSB7cmVhZHM6IHt9LCB3cml0ZXM6IHt9fTtcblxuICAgICAgICAgICAgdGhpcy5faW5pdFByb3BzKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxIb29rKCdiZWZvcmVDb25uZWN0Jyk7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLl9pbml0RXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLl9pbml0T2JzZXJ2ZXIoKTtcblxuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbFVwZGF0ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbERpc2Nvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxIb29rKCdiZWZvcmVEaXNjb25uZWN0Jyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vYnNlcnZlciA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3VuYmluZEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2Rpc2Nvbm5lY3RlZCcpO1xuXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbFVwZGF0ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgIGlmICggZSA9PT0gdm9pZCAwICkgZSA9ICd1cGRhdGUnO1xuXG5cbiAgICAgICAgICAgIHZhciB0eXBlID0gZS50eXBlIHx8IGU7XG5cbiAgICAgICAgICAgIGlmIChpbmNsdWRlcyhbJ3VwZGF0ZScsICdyZXNpemUnXSwgdHlwZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsV2F0Y2hlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdXBkYXRlcyA9IHRoaXMuJG9wdGlvbnMudXBkYXRlO1xuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuX2ZyYW1lcztcbiAgICAgICAgICAgIHZhciByZWFkcyA9IHJlZi5yZWFkcztcbiAgICAgICAgICAgIHZhciB3cml0ZXMgPSByZWYud3JpdGVzO1xuXG4gICAgICAgICAgICBpZiAoIXVwZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAocmVmLCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlYWQgPSByZWYucmVhZDtcbiAgICAgICAgICAgICAgICB2YXIgd3JpdGUgPSByZWYud3JpdGU7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHJlZi5ldmVudHM7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSAndXBkYXRlJyAmJiAhaW5jbHVkZXMoZXZlbnRzLCB0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlYWQgJiYgIWluY2x1ZGVzKGZhc3Rkb20ucmVhZHMsIHJlYWRzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZWFkc1tpXSA9IGZhc3Rkb20ucmVhZChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzJDEuX2Nvbm5lY3RlZCAmJiByZWFkLmNhbGwodGhpcyQxLCB0aGlzJDEuX2RhdGEsIHR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSAmJiB3cml0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhc3Rkb20uY2xlYXIod3JpdGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduKHRoaXMkMS5fZGF0YSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHdyaXRlICYmICFpbmNsdWRlcyhmYXN0ZG9tLndyaXRlcywgd3JpdGVzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICB3cml0ZXNbaV0gPSBmYXN0ZG9tLndyaXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5fY29ubmVjdGVkICYmIHdyaXRlLmNhbGwodGhpcyQxLCB0aGlzJDEuX2RhdGEsIHR5cGUpOyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9jYWxsV2F0Y2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIF9mcmFtZXMgPSByZWYuX2ZyYW1lcztcblxuICAgICAgICAgICAgaWYgKF9mcmFtZXMuX3dhdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaW5pdGl0YWwgPSAhaGFzT3duKF9mcmFtZXMsICdfd2F0Y2gnKTtcblxuICAgICAgICAgICAgX2ZyYW1lcy5fd2F0Y2ggPSBmYXN0ZG9tLnJlYWQoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzJDEuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMkMTtcbiAgICAgICAgICAgICAgICB2YXIgY29tcHV0ZWQgPSByZWYuJG9wdGlvbnMuY29tcHV0ZWQ7XG4gICAgICAgICAgICAgICAgdmFyIF9jb21wdXRlZHMgPSByZWYuX2NvbXB1dGVkcztcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNQcmV2ID0gaGFzT3duKF9jb21wdXRlZHMsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gX2NvbXB1dGVkc1trZXldO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfY29tcHV0ZWRzW2tleV07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gY29tcHV0ZWRba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdhdGNoID0gcmVmJDEud2F0Y2g7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbW1lZGlhdGUgPSByZWYkMS5pbW1lZGlhdGU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aXRhbCAmJiBpbW1lZGlhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGhhc1ByZXYgJiYgIWlzRXF1YWwocHJldiwgdGhpcyQxW2tleV0pXG4gICAgICAgICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmNhbGwodGhpcyQxLCB0aGlzJDFba2V5XSwgcHJldik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9mcmFtZXMuX3dhdGNoID0gbnVsbDtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXRlQVBJIChVSWtpdCkge1xuXG4gICAgICAgIHZhciB1aWQgPSAwO1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgICAgb3B0aW9ucy5kYXRhID0gbm9ybWFsaXplRGF0YShvcHRpb25zLCB0aGlzLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuXG4gICAgICAgICAgICB0aGlzLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMuY29uc3RydWN0b3Iub3B0aW9ucywgb3B0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLiRlbCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLiRwcm9wcyA9IHt9O1xuXG4gICAgICAgICAgICB0aGlzLl91aWQgPSB1aWQrKztcbiAgICAgICAgICAgIHRoaXMuX2luaXREYXRhKCk7XG4gICAgICAgICAgICB0aGlzLl9pbml0TWV0aG9kcygpO1xuICAgICAgICAgICAgdGhpcy5faW5pdENvbXB1dGVkcygpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2NyZWF0ZWQnKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRtb3VudChvcHRpb25zLmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuX2luaXREYXRhID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7IGlmICggZGF0YSA9PT0gdm9pZCAwICkgZGF0YSA9IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzW2tleV0gPSB0aGlzW2tleV0gPSBkYXRhW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9pbml0TWV0aG9kcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJG9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgbWV0aG9kcyA9IHJlZi5tZXRob2RzO1xuXG4gICAgICAgICAgICBpZiAobWV0aG9kcykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IG1ldGhvZHNba2V5XS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuX2luaXRDb21wdXRlZHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLiRvcHRpb25zO1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkID0gcmVmLmNvbXB1dGVkO1xuXG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlZHMgPSB7fTtcblxuICAgICAgICAgICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQ29tcHV0ZWQodGhpcywga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9pbml0UHJvcHMgPSBmdW5jdGlvbiAocHJvcHMpIHtcblxuICAgICAgICAgICAgdmFyIGtleTtcblxuICAgICAgICAgICAgcHJvcHMgPSBwcm9wcyB8fCBnZXRQcm9wcyh0aGlzLiRvcHRpb25zLCB0aGlzLiRuYW1lKTtcblxuICAgICAgICAgICAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHByb3BzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGV4Y2x1ZGUgPSBbdGhpcy4kb3B0aW9ucy5jb21wdXRlZCwgdGhpcy4kb3B0aW9ucy5tZXRob2RzXTtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIHRoaXMuJHByb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBwcm9wcyAmJiBub3RJbihleGNsdWRlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IHRoaXMuJHByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS5faW5pdEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBldmVudHMgPSByZWYuZXZlbnRzO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnRzKSB7XG5cbiAgICAgICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093bihldmVudCwgJ2hhbmRsZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJFdmVudCh0aGlzJDEsIGV2ZW50W2tleV0sIGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlckV2ZW50KHRoaXMkMSwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuX3VuYmluZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh1bmJpbmQpIHsgcmV0dXJuIHVuYmluZCgpOyB9KTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gICAgICAgIH07XG5cbiAgICAgICAgVUlraXQucHJvdG90eXBlLl9pbml0T2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBhdHRycyA9IHJlZi5hdHRycztcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHJlZi5wcm9wcztcbiAgICAgICAgICAgIHZhciBlbCA9IHJlZi5lbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vYnNlcnZlciB8fCAhcHJvcHMgfHwgYXR0cnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRycyA9IGlzQXJyYXkoYXR0cnMpID8gYXR0cnMgOiBPYmplY3Qua2V5cyhwcm9wcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKHJlY29yZHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGdldFByb3BzKHRoaXMkMS4kb3B0aW9ucywgdGhpcyQxLiRuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3Jkcy5zb21lKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSByZWYuYXR0cmlidXRlTmFtZTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGF0dHJpYnV0ZU5hbWUucmVwbGFjZSgnZGF0YS0nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocHJvcCA9PT0gdGhpcyQxLiRuYW1lID8gYXR0cnMgOiBbY2FtZWxpemUocHJvcCldKS5zb21lKGZ1bmN0aW9uIChwcm9wKSB7IHJldHVybiAhaXNVbmRlZmluZWQoZGF0YVtwcm9wXSkgJiYgZGF0YVtwcm9wXSAhPT0gdGhpcyQxLiRwcm9wc1twcm9wXTsgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS4kcmVzZXQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gYXR0cnMubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGh5cGhlbmF0ZShrZXkpOyB9KS5jb25jYXQodGhpcy4kbmFtZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVyLm9ic2VydmUoZWwsIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogZmlsdGVyLmNvbmNhdChmaWx0ZXIubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIChcImRhdGEtXCIgKyBrZXkpOyB9KSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldFByb3BzKG9wdHMsIG5hbWUpIHtcblxuICAgICAgICAgICAgdmFyIGRhdGEkMSA9IHt9O1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBvcHRzLmFyZ3M7IGlmICggYXJncyA9PT0gdm9pZCAwICkgYXJncyA9IFtdO1xuICAgICAgICAgICAgdmFyIHByb3BzID0gb3B0cy5wcm9wczsgaWYgKCBwcm9wcyA9PT0gdm9pZCAwICkgcHJvcHMgPSB7fTtcbiAgICAgICAgICAgIHZhciBlbCA9IG9wdHMuZWw7XG5cbiAgICAgICAgICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YSQxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGEoZWwsIHByb3ApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BzW2tleV0gPT09IEJvb2xlYW4gJiYgdmFsdWUgPT09ICcnXG4gICAgICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICA6IGNvZXJjZShwcm9wc1trZXldLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3RhcmdldCcgJiYgKCF2YWx1ZSB8fCBzdGFydHNXaXRoKHZhbHVlLCAnXycpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkYXRhJDFba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhkYXRhKGVsLCBuYW1lKSwgYXJncyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGtleSQxIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcCQxID0gY2FtZWxpemUoa2V5JDEpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wc1twcm9wJDFdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSQxW3Byb3AkMV0gPSBjb2VyY2UocHJvcHNbcHJvcCQxXSwgb3B0aW9uc1trZXkkMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRhdGEkMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcHV0ZWQoY29tcG9uZW50LCBrZXksIGNiKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29tcG9uZW50LCBrZXksIHtcblxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfY29tcHV0ZWRzID0gY29tcG9uZW50Ll9jb21wdXRlZHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkcHJvcHMgPSBjb21wb25lbnQuJHByb3BzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGVsID0gY29tcG9uZW50LiRlbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093bihfY29tcHV0ZWRzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29tcHV0ZWRzW2tleV0gPSAoY2IuZ2V0IHx8IGNiKS5jYWxsKGNvbXBvbmVudCwgJHByb3BzLCAkZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb21wdXRlZHNba2V5XTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfY29tcHV0ZWRzID0gY29tcG9uZW50Ll9jb21wdXRlZHM7XG5cbiAgICAgICAgICAgICAgICAgICAgX2NvbXB1dGVkc1trZXldID0gY2Iuc2V0ID8gY2Iuc2V0LmNhbGwoY29tcG9uZW50LCB2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoX2NvbXB1dGVkc1trZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9jb21wdXRlZHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWdpc3RlckV2ZW50KGNvbXBvbmVudCwgZXZlbnQsIGtleSkge1xuXG4gICAgICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3QoZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQgPSAoe25hbWU6IGtleSwgaGFuZGxlcjogZXZlbnR9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG5hbWUgPSBldmVudC5uYW1lO1xuICAgICAgICAgICAgdmFyIGVsID0gZXZlbnQuZWw7XG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IGV2ZW50LmhhbmRsZXI7XG4gICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGV2ZW50LmNhcHR1cmU7XG4gICAgICAgICAgICB2YXIgcGFzc2l2ZSA9IGV2ZW50LnBhc3NpdmU7XG4gICAgICAgICAgICB2YXIgZGVsZWdhdGUgPSBldmVudC5kZWxlZ2F0ZTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBldmVudC5maWx0ZXI7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IGV2ZW50LnNlbGY7XG4gICAgICAgICAgICBlbCA9IGlzRnVuY3Rpb24oZWwpXG4gICAgICAgICAgICAgICAgPyBlbC5jYWxsKGNvbXBvbmVudClcbiAgICAgICAgICAgICAgICA6IGVsIHx8IGNvbXBvbmVudC4kZWw7XG5cbiAgICAgICAgICAgIGlmIChpc0FycmF5KGVsKSkge1xuICAgICAgICAgICAgICAgIGVsLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiByZWdpc3RlckV2ZW50KGNvbXBvbmVudCwgYXNzaWduKHt9LCBldmVudCwge2VsOiBlbH0pLCBrZXkpOyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZWwgfHwgZmlsdGVyICYmICFmaWx0ZXIuY2FsbChjb21wb25lbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb21wb25lbnQuX2V2ZW50cy5wdXNoKFxuICAgICAgICAgICAgICAgIG9uKFxuICAgICAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgIWRlbGVnYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaXNTdHJpbmcoZGVsZWdhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBkZWxlZ2F0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZGVsZWdhdGUuY2FsbChjb21wb25lbnQpLFxuICAgICAgICAgICAgICAgICAgICBpc1N0cmluZyhoYW5kbGVyKSA/IGNvbXBvbmVudFtoYW5kbGVyXSA6IGhhbmRsZXIuYmluZChjb21wb25lbnQpLFxuICAgICAgICAgICAgICAgICAgICB7cGFzc2l2ZTogcGFzc2l2ZSwgY2FwdHVyZTogY2FwdHVyZSwgc2VsZjogc2VsZn1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBub3RJbihvcHRpb25zLCBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuICFhcnIgfHwgIWhhc093bihhcnIsIGtleSk7IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29lcmNlKHR5cGUsIHZhbHVlKSB7XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSBCb29sZWFuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IE51bWJlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdsaXN0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b0xpc3QodmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHlwZSA/IHR5cGUodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBub3JtYWxpemVEYXRhKHJlZiwgcmVmJDEpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG4gICAgICAgICAgICB2YXIgZWwgPSByZWYuZWw7XG4gICAgICAgICAgICB2YXIgYXJncyA9IHJlZiQxLmFyZ3M7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSByZWYkMS5wcm9wczsgaWYgKCBwcm9wcyA9PT0gdm9pZCAwICkgcHJvcHMgPSB7fTtcblxuICAgICAgICAgICAgZGF0YSA9IGlzQXJyYXkoZGF0YSlcbiAgICAgICAgICAgICAgICA/ICFpc0VtcHR5KGFyZ3MpXG4gICAgICAgICAgICAgICAgICAgID8gZGF0YS5zbGljZSgwLCBhcmdzLmxlbmd0aCkucmVkdWNlKGZ1bmN0aW9uIChkYXRhLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbihkYXRhLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbYXJnc1tpbmRleF1dID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSwge30pXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiBkYXRhO1xuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChkYXRhW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtrZXldID0gcHJvcHNba2V5XSA/IGNvZXJjZShwcm9wc1trZXldLCBkYXRhW2tleV0pIDogZGF0YVtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbmNlQVBJIChVSWtpdCkge1xuXG4gICAgICAgIHZhciBEQVRBID0gVUlraXQuZGF0YTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJGNyZWF0ZSA9IGZ1bmN0aW9uIChjb21wb25lbnQsIGVsZW1lbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBVSWtpdFtjb21wb25lbnRdKGVsZW1lbnQsIGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoZWwpIHtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJG9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHJlZi5uYW1lO1xuXG4gICAgICAgICAgICBpZiAoIWVsW0RBVEFdKSB7XG4gICAgICAgICAgICAgICAgZWxbREFUQV0gPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVsW0RBVEFdW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbFtEQVRBXVtuYW1lXSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuJGVsID0gdGhpcy4kb3B0aW9ucy5lbCA9IHRoaXMuJG9wdGlvbnMuZWwgfHwgZWw7XG5cbiAgICAgICAgICAgIGlmICh3aXRoaW4oZWwsIGRvY3VtZW50KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxDb25uZWN0ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJHJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fY2FsbERpc2Nvbm5lY3RlZCgpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbENvbm5lY3RlZCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uIChyZW1vdmVFbCkge1xuICAgICAgICAgICAgaWYgKCByZW1vdmVFbCA9PT0gdm9pZCAwICkgcmVtb3ZlRWwgPSBmYWxzZTtcblxuXG4gICAgICAgICAgICB2YXIgcmVmID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgICAgIHZhciBlbCA9IHJlZi5lbDtcbiAgICAgICAgICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG5cbiAgICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxEaXNjb25uZWN0ZWQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2Rlc3Ryb3knKTtcblxuICAgICAgICAgICAgaWYgKCFlbCB8fCAhZWxbREFUQV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBlbFtEQVRBXVtuYW1lXTtcblxuICAgICAgICAgICAgaWYgKCFpc0VtcHR5KGVsW0RBVEFdKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbFtEQVRBXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlbW92ZUVsKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKHRoaXMuJGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FsbFVwZGF0ZShlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBVSWtpdC5wcm90b3R5cGUuJHVwZGF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBlKSB7XG4gICAgICAgICAgICBpZiAoIGVsZW1lbnQgPT09IHZvaWQgMCApIGVsZW1lbnQgPSB0aGlzLiRlbDtcblxuICAgICAgICAgICAgVUlraXQudXBkYXRlKGVsZW1lbnQsIGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LnByb3RvdHlwZS4kZ2V0Q29tcG9uZW50ID0gVUlraXQuZ2V0Q29tcG9uZW50O1xuXG4gICAgICAgIHZhciBuYW1lcyA9IHt9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhVSWtpdC5wcm90b3R5cGUsIHtcblxuICAgICAgICAgICAgJGNvbnRhaW5lcjogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihVSWtpdCwgJ2NvbnRhaW5lcicpLFxuXG4gICAgICAgICAgICAkbmFtZToge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJG9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuYW1lc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNbbmFtZV0gPSBVSWtpdC5wcmVmaXggKyBoeXBoZW5hdGUobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wb25lbnRBUEkgKFVJa2l0KSB7XG5cbiAgICAgICAgdmFyIERBVEEgPSBVSWtpdC5kYXRhO1xuXG4gICAgICAgIHZhciBjb21wb25lbnRzID0ge307XG5cbiAgICAgICAgVUlraXQuY29tcG9uZW50ID0gZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcblxuICAgICAgICAgICAgdmFyIGlkID0gaHlwaGVuYXRlKG5hbWUpO1xuXG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUoaWQpO1xuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KGNvbXBvbmVudHNbbmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHNbbmFtZV0gPSBVSWtpdC5leHRlbmQoY29tcG9uZW50c1tuYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNbbmFtZV07XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgVUlraXRbbmFtZV0gPSBmdW5jdGlvbiAoZWxlbWVudCwgZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCwgYXJnc0FycmF5ID0gQXJyYXkoaSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKCBpLS0gKSBhcmdzQXJyYXlbaV0gPSBhcmd1bWVudHNbaV07XG5cblxuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBVSWtpdC5jb21wb25lbnQobmFtZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbFxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBjb21wb25lbnQoe2RhdGE6IGlzUGxhaW5PYmplY3QoZWxlbWVudCkgPyBlbGVtZW50IDogW10uY29uY2F0KCBhcmdzQXJyYXkgKX0pXG4gICAgICAgICAgICAgICAgICAgIDogIWVsZW1lbnQgPyBpbml0KGVsZW1lbnQpIDogJCQoZWxlbWVudCkubWFwKGluaXQpWzBdO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5pdChlbGVtZW50KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gVUlraXQuZ2V0Q29tcG9uZW50KGVsZW1lbnQsIG5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBjb21wb25lbnQoe2VsOiBlbGVtZW50LCBkYXRhOiBkYXRhfSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBvcHQgPSBpc1BsYWluT2JqZWN0KG9wdGlvbnMpID8gYXNzaWduKHt9LCBvcHRpb25zKSA6IG9wdGlvbnMub3B0aW9ucztcblxuICAgICAgICAgICAgb3B0Lm5hbWUgPSBuYW1lO1xuXG4gICAgICAgICAgICBpZiAob3B0Lmluc3RhbGwpIHtcbiAgICAgICAgICAgICAgICBvcHQuaW5zdGFsbChVSWtpdCwgb3B0LCBuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFVJa2l0Ll9pbml0aWFsaXplZCAmJiAhb3B0LmZ1bmN0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICBmYXN0ZG9tLnJlYWQoZnVuY3Rpb24gKCkgeyByZXR1cm4gVUlraXRbbmFtZV0oKFwiW3VrLVwiICsgaWQgKyBcIl0sW2RhdGEtdWstXCIgKyBpZCArIFwiXVwiKSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50c1tuYW1lXSA9IGlzUGxhaW5PYmplY3Qob3B0aW9ucykgPyBvcHQgOiBvcHRpb25zO1xuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LmdldENvbXBvbmVudHMgPSBmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50W0RBVEFdIHx8IHt9OyB9O1xuICAgICAgICBVSWtpdC5nZXRDb21wb25lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgbmFtZSkgeyByZXR1cm4gVUlraXQuZ2V0Q29tcG9uZW50cyhlbGVtZW50KVtuYW1lXTsgfTtcblxuICAgICAgICBVSWtpdC5jb25uZWN0ID0gZnVuY3Rpb24gKG5vZGUpIHtcblxuICAgICAgICAgICAgaWYgKG5vZGVbREFUQV0pIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIG5vZGVbREFUQV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZVtEQVRBXVtuYW1lXS5fY2FsbENvbm5lY3RlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgIHZhciBuYW1lJDEgPSBnZXRDb21wb25lbnROYW1lKG5vZGUuYXR0cmlidXRlc1tpXS5uYW1lKTtcblxuICAgICAgICAgICAgICAgIGlmIChuYW1lJDEgJiYgbmFtZSQxIGluIGNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgVUlraXRbbmFtZSQxXShub2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIFVJa2l0LmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBub2RlW0RBVEFdKSB7XG4gICAgICAgICAgICAgICAgbm9kZVtEQVRBXVtuYW1lXS5fY2FsbERpc2Nvbm5lY3RlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShhdHRyaWJ1dGUpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0c1dpdGgoYXR0cmlidXRlLCAndWstJykgfHwgc3RhcnRzV2l0aChhdHRyaWJ1dGUsICdkYXRhLXVrLScpXG4gICAgICAgICAgICA/IGNhbWVsaXplKGF0dHJpYnV0ZS5yZXBsYWNlKCdkYXRhLXVrLScsICcnKS5yZXBsYWNlKCd1ay0nLCAnJykpXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBVSWtpdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcblxuICAgIFVJa2l0LnV0aWwgPSB1dGlsO1xuICAgIFVJa2l0LmRhdGEgPSAnX191aWtpdF9fJztcbiAgICBVSWtpdC5wcmVmaXggPSAndWstJztcbiAgICBVSWtpdC5vcHRpb25zID0ge307XG4gICAgVUlraXQudmVyc2lvbiA9ICczLjQuNic7XG5cbiAgICBnbG9iYWxBUEkoVUlraXQpO1xuICAgIGhvb2tzQVBJKFVJa2l0KTtcbiAgICBzdGF0ZUFQSShVSWtpdCk7XG4gICAgY29tcG9uZW50QVBJKFVJa2l0KTtcbiAgICBpbnN0YW5jZUFQSShVSWtpdCk7XG5cbiAgICBmdW5jdGlvbiBDb3JlIChVSWtpdCkge1xuXG4gICAgICAgIGluQnJvd3NlciAmJiByZWFkeShmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIFVJa2l0LnVwZGF0ZSgpO1xuICAgICAgICAgICAgb24od2luZG93LCAnbG9hZCByZXNpemUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBVSWtpdC51cGRhdGUobnVsbCwgJ3Jlc2l6ZScpOyB9KTtcbiAgICAgICAgICAgIG9uKGRvY3VtZW50LCAnbG9hZGVkbWV0YWRhdGEgbG9hZCcsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBVSWtpdC51cGRhdGUodGFyZ2V0LCAncmVzaXplJyk7XG4gICAgICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gdGhyb3R0bGUgYHNjcm9sbGAgZXZlbnQgKFNhZmFyaSB0cmlnZ2VycyBtdWx0aXBsZSBgc2Nyb2xsYCBldmVudHMgcGVyIGZyYW1lKVxuICAgICAgICAgICAgdmFyIHBlbmRpbmc7XG4gICAgICAgICAgICBvbih3aW5kb3csICdzY3JvbGwnLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmYXN0ZG9tLndyaXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlbmRpbmcgPSBmYWxzZTsgfSk7XG5cbiAgICAgICAgICAgICAgICBVSWtpdC51cGRhdGUobnVsbCwgZS50eXBlKTtcblxuICAgICAgICAgICAgfSwge3Bhc3NpdmU6IHRydWUsIGNhcHR1cmU6IHRydWV9KTtcblxuICAgICAgICAgICAgdmFyIHN0YXJ0ZWQgPSAwO1xuICAgICAgICAgICAgb24oZG9jdW1lbnQsICdhbmltYXRpb25zdGFydCcsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIGlmICgoY3NzKHRhcmdldCwgJ2FuaW1hdGlvbk5hbWUnKSB8fCAnJykubWF0Y2goL151ay0uKihsZWZ0fHJpZ2h0KS8pKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCsrO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ292ZXJmbG93WCcsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tc3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAnb3ZlcmZsb3dYJywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB0b01zKGNzcyh0YXJnZXQsICdhbmltYXRpb25EdXJhdGlvbicpKSArIDEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIHZhciBvZmY7XG4gICAgICAgICAgICBvbihkb2N1bWVudCwgcG9pbnRlckRvd24sIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICBvZmYgJiYgb2ZmKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzVG91Y2goZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBTd2lwZSBHZXN0dXJlXG4gICAgICAgICAgICAgICAgdmFyIHBvcyA9IGdldEV2ZW50UG9zKGUpO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAndGFnTmFtZScgaW4gZS50YXJnZXQgPyBlLnRhcmdldCA6IGUudGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgb2ZmID0gb25jZShkb2N1bWVudCwgKHBvaW50ZXJVcCArIFwiIFwiICsgcG9pbnRlckNhbmNlbCksIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IGdldEV2ZW50UG9zKGUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHJlZi54O1xuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHJlZi55O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHN3aXBlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgeCAmJiBNYXRoLmFicyhwb3MueCAtIHgpID4gMTAwIHx8IHkgJiYgTWF0aC5hYnMocG9zLnkgLSB5KSA+IDEwMCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgJ3N3aXBlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIChcInN3aXBlXCIgKyAoc3dpcGVEaXJlY3Rpb24ocG9zLngsIHBvcy55LCB4LCB5KSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LCB7cGFzc2l2ZTogdHJ1ZX0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3dpcGVEaXJlY3Rpb24oeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHgxIC0geDIpID49IE1hdGguYWJzKHkxIC0geTIpXG4gICAgICAgICAgICA/IHgxIC0geDIgPiAwXG4gICAgICAgICAgICAgICAgPyAnTGVmdCdcbiAgICAgICAgICAgICAgICA6ICdSaWdodCdcbiAgICAgICAgICAgIDogeTEgLSB5MiA+IDBcbiAgICAgICAgICAgICAgICA/ICdVcCdcbiAgICAgICAgICAgICAgICA6ICdEb3duJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBib290IChVSWtpdCkge1xuXG4gICAgICAgIHZhciBjb25uZWN0ID0gVUlraXQuY29ubmVjdDtcbiAgICAgICAgdmFyIGRpc2Nvbm5lY3QgPSBVSWtpdC5kaXNjb25uZWN0O1xuXG4gICAgICAgIGlmICghaW5Ccm93c2VyIHx8ICF3aW5kb3cuTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZmFzdGRvbS5yZWFkKGluaXQpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG5cbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICAgICAgYXBwbHkoZG9jdW1lbnQuYm9keSwgY29ubmVjdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIChuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHsgcmV0dXJuIGFwcGx5TXV0YXRpb24obXV0YXRpb24sIHVwZGF0ZXMpOyB9KTtcbiAgICAgICAgICAgICAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiBVSWtpdC51cGRhdGUoZWwpOyB9KTtcbiAgICAgICAgICAgIH0pKS5vYnNlcnZlKGRvY3VtZW50LCB7XG4gICAgICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgVUlraXQuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5TXV0YXRpb24obXV0YXRpb24sIHVwZGF0ZXMpIHtcblxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IG11dGF0aW9uLnRhcmdldDtcbiAgICAgICAgICAgIHZhciB0eXBlID0gbXV0YXRpb24udHlwZTtcblxuICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IHR5cGUgIT09ICdhdHRyaWJ1dGVzJ1xuICAgICAgICAgICAgICAgID8gYXBwbHlDaGlsZExpc3QobXV0YXRpb24pXG4gICAgICAgICAgICAgICAgOiBhcHBseUF0dHJpYnV0ZShtdXRhdGlvbik7XG5cbiAgICAgICAgICAgIGlmICh1cGRhdGUgJiYgIXVwZGF0ZXMuc29tZShmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5jb250YWlucyh0YXJnZXQpOyB9KSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZXMucHVzaCh0YXJnZXQuY29udGFpbnMgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZSk7IC8vIElFIDExIHRleHQgbm9kZSBkb2VzIG5vdCBpbXBsZW1lbnQgY29udGFpbnNcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlBdHRyaWJ1dGUocmVmKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gcmVmLmF0dHJpYnV0ZU5hbWU7XG5cblxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT09ICdocmVmJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoYXR0cmlidXRlTmFtZSk7XG5cbiAgICAgICAgICAgIGlmICghbmFtZSB8fCAhKG5hbWUgaW4gVUlraXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzQXR0cih0YXJnZXQsIGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgVUlraXRbbmFtZV0odGFyZ2V0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IFVJa2l0LmdldENvbXBvbmVudCh0YXJnZXQsIG5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LiRkZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5Q2hpbGRMaXN0KHJlZikge1xuICAgICAgICAgICAgdmFyIGFkZGVkTm9kZXMgPSByZWYuYWRkZWROb2RlcztcbiAgICAgICAgICAgIHZhciByZW1vdmVkTm9kZXMgPSByZWYucmVtb3ZlZE5vZGVzO1xuXG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWRkZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGFwcGx5KGFkZGVkTm9kZXNbaV0sIGNvbm5lY3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCByZW1vdmVkTm9kZXMubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICAgIGFwcGx5KHJlbW92ZWROb2Rlc1tpJDFdLCBkaXNjb25uZWN0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHZhciBDbGFzcyA9IHtcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgIWhhc0NsYXNzKHRoaXMuJGVsLCB0aGlzLiRuYW1lKSAmJiBhZGRDbGFzcyh0aGlzLiRlbCwgdGhpcy4kbmFtZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgVG9nZ2xhYmxlID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBjbHM6IEJvb2xlYW4sXG4gICAgICAgICAgICBhbmltYXRpb246ICdsaXN0JyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBOdW1iZXIsXG4gICAgICAgICAgICBvcmlnaW46IFN0cmluZyxcbiAgICAgICAgICAgIHRyYW5zaXRpb246IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNsczogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRpb246IFtmYWxzZV0sXG4gICAgICAgICAgICBkdXJhdGlvbjogMjAwLFxuICAgICAgICAgICAgb3JpZ2luOiBmYWxzZSxcbiAgICAgICAgICAgIHRyYW5zaXRpb246ICdsaW5lYXInLFxuXG4gICAgICAgICAgICBpbml0UHJvcHM6IHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJycsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiAnJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tOiAnJyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICcnLFxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJydcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhpZGVQcm9wczoge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tOiAwLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IDBcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGhhc0FuaW1hdGlvbjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHJlZi5hbmltYXRpb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gISFhbmltYXRpb25bMF07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYXNUcmFuc2l0aW9uOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gcmVmLmFuaW1hdGlvbjtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc0FuaW1hdGlvbiAmJiBhbmltYXRpb25bMF0gPT09IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHRvZ2dsZUVsZW1lbnQ6IGZ1bmN0aW9uKHRhcmdldHMsIHNob3csIGFuaW1hdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0b05vZGVzKHRhcmdldHMpLm1hcChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiB0aGlzJDEuX3RvZ2dsZUVsZW1lbnQoZWwsIHNob3csIGFuaW1hdGUpLnRoZW4ocmVzb2x2ZSwgbm9vcCk7IH1cbiAgICAgICAgICAgICAgICAgICAgKTsgfVxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXNUb2dnbGVkOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRvTm9kZXMoZWwgfHwgdGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsc1xuICAgICAgICAgICAgICAgICAgICA/IGhhc0NsYXNzKG5vZGVzLCB0aGlzLmNscy5zcGxpdCgnICcpWzBdKVxuICAgICAgICAgICAgICAgICAgICA6ICFoYXNBdHRyKG5vZGVzLCAnaGlkZGVuJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGVBcmlhOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNscyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cihlbCwgJ2FyaWEtaGlkZGVuJywgIXRoaXMuaXNUb2dnbGVkKGVsKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgX3RvZ2dsZUVsZW1lbnQ6IGZ1bmN0aW9uKGVsLCBzaG93LCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHNob3cgPSBpc0Jvb2xlYW4oc2hvdylcbiAgICAgICAgICAgICAgICAgICAgPyBzaG93XG4gICAgICAgICAgICAgICAgICAgIDogQW5pbWF0aW9uLmluUHJvZ3Jlc3MoZWwpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGhhc0NsYXNzKGVsLCAndWstYW5pbWF0aW9uLWxlYXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogVHJhbnNpdGlvbi5pblByb2dyZXNzKGVsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZWwuc3R5bGUuaGVpZ2h0ID09PSAnMHB4J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIXRoaXMuaXNUb2dnbGVkKGVsKTtcblxuICAgICAgICAgICAgICAgIGlmICghdHJpZ2dlcihlbCwgKFwiYmVmb3JlXCIgKyAoc2hvdyA/ICdzaG93JyA6ICdoaWRlJykpLCBbdGhpc10pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gKFxuICAgICAgICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGFuaW1hdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGFuaW1hdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYW5pbWF0ZSA9PT0gZmFsc2UgfHwgIXRoaXMuaGFzQW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl90b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuaGFzVHJhbnNpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRvZ2dsZUhlaWdodCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRvZ2dsZUFuaW1hdGlvbih0aGlzKVxuICAgICAgICAgICAgICAgICkoZWwsIHNob3cpO1xuXG4gICAgICAgICAgICAgICAgdHJpZ2dlcihlbCwgc2hvdyA/ICdzaG93JyA6ICdoaWRlJywgW3RoaXNdKTtcblxuICAgICAgICAgICAgICAgIHZhciBmaW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihlbCwgc2hvdyA/ICdzaG93bicgOiAnaGlkZGVuJywgW3RoaXMkMV0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzJDEuJHVwZGF0ZShlbCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlID8gcHJvbWlzZS50aGVuKGZpbmFsKSA6IFByb21pc2UucmVzb2x2ZShmaW5hbCgpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF90b2dnbGU6IGZ1bmN0aW9uKGVsLCB0b2dnbGVkKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0b2dnbGVkID0gQm9vbGVhbih0b2dnbGVkKTtcblxuICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNscykge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gaW5jbHVkZXModGhpcy5jbHMsICcgJykgfHwgdG9nZ2xlZCAhPT0gaGFzQ2xhc3MoZWwsIHRoaXMuY2xzKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCAmJiB0b2dnbGVDbGFzcyhlbCwgdGhpcy5jbHMsIGluY2x1ZGVzKHRoaXMuY2xzLCAnICcpID8gdW5kZWZpbmVkIDogdG9nZ2xlZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRvZ2dsZWQgPT09IGhhc0F0dHIoZWwsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCAmJiBhdHRyKGVsLCAnaGlkZGVuJywgIXRvZ2dsZWQgPyAnJyA6IG51bGwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQkKCdbYXV0b2ZvY3VzXScsIGVsKS5zb21lKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gaXNWaXNpYmxlKGVsKSA/IGVsLmZvY3VzKCkgfHwgdHJ1ZSA6IGVsLmJsdXIoKTsgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFyaWEoZWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihlbCwgJ3RvZ2dsZWQnLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUoZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdG9nZ2xlSGVpZ2h0KHJlZikge1xuICAgICAgICB2YXIgaXNUb2dnbGVkID0gcmVmLmlzVG9nZ2xlZDtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gcmVmLmR1cmF0aW9uO1xuICAgICAgICB2YXIgaW5pdFByb3BzID0gcmVmLmluaXRQcm9wcztcbiAgICAgICAgdmFyIGhpZGVQcm9wcyA9IHJlZi5oaWRlUHJvcHM7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gcmVmLnRyYW5zaXRpb247XG4gICAgICAgIHZhciBfdG9nZ2xlID0gcmVmLl90b2dnbGU7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbCwgc2hvdykge1xuXG4gICAgICAgICAgICB2YXIgaW5Qcm9ncmVzcyA9IFRyYW5zaXRpb24uaW5Qcm9ncmVzcyhlbCk7XG4gICAgICAgICAgICB2YXIgaW5uZXIgPSBlbC5oYXNDaGlsZE5vZGVzID8gdG9GbG9hdChjc3MoZWwuZmlyc3RFbGVtZW50Q2hpbGQsICdtYXJnaW5Ub3AnKSkgKyB0b0Zsb2F0KGNzcyhlbC5sYXN0RWxlbWVudENoaWxkLCAnbWFyZ2luQm90dG9tJykpIDogMDtcbiAgICAgICAgICAgIHZhciBjdXJyZW50SGVpZ2h0ID0gaXNWaXNpYmxlKGVsKSA/IGhlaWdodChlbCkgKyAoaW5Qcm9ncmVzcyA/IDAgOiBpbm5lcikgOiAwO1xuXG4gICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbChlbCk7XG5cbiAgICAgICAgICAgIGlmICghaXNUb2dnbGVkKGVsKSkge1xuICAgICAgICAgICAgICAgIF90b2dnbGUoZWwsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBoZWlnaHQoZWwsICcnKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIGNoaWxkIGNvbXBvbmVudHMgZmlyc3RcbiAgICAgICAgICAgIGZhc3Rkb20uZmx1c2goKTtcblxuICAgICAgICAgICAgdmFyIGVuZEhlaWdodCA9IGhlaWdodChlbCkgKyAoaW5Qcm9ncmVzcyA/IDAgOiBpbm5lcik7XG4gICAgICAgICAgICBoZWlnaHQoZWwsIGN1cnJlbnRIZWlnaHQpO1xuXG4gICAgICAgICAgICByZXR1cm4gKHNob3dcbiAgICAgICAgICAgICAgICAgICAgPyBUcmFuc2l0aW9uLnN0YXJ0KGVsLCBhc3NpZ24oe30sIGluaXRQcm9wcywge292ZXJmbG93OiAnaGlkZGVuJywgaGVpZ2h0OiBlbmRIZWlnaHR9KSwgTWF0aC5yb3VuZChkdXJhdGlvbiAqICgxIC0gY3VycmVudEhlaWdodCAvIGVuZEhlaWdodCkpLCB0cmFuc2l0aW9uKVxuICAgICAgICAgICAgICAgICAgICA6IFRyYW5zaXRpb24uc3RhcnQoZWwsIGhpZGVQcm9wcywgTWF0aC5yb3VuZChkdXJhdGlvbiAqIChjdXJyZW50SGVpZ2h0IC8gZW5kSGVpZ2h0KSksIHRyYW5zaXRpb24pLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RvZ2dsZShlbCwgZmFsc2UpOyB9KVxuICAgICAgICAgICAgKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNzcyhlbCwgaW5pdFByb3BzKTsgfSk7XG5cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVBbmltYXRpb24oY21wKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWwsIHNob3cpIHtcblxuICAgICAgICAgICAgQW5pbWF0aW9uLmNhbmNlbChlbCk7XG5cbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBjbXAuYW5pbWF0aW9uO1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gY21wLmR1cmF0aW9uO1xuICAgICAgICAgICAgdmFyIF90b2dnbGUgPSBjbXAuX3RvZ2dsZTtcblxuICAgICAgICAgICAgaWYgKHNob3cpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlKGVsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQW5pbWF0aW9uLmluKGVsLCBhbmltYXRpb25bMF0sIGR1cmF0aW9uLCBjbXAub3JpZ2luKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIEFuaW1hdGlvbi5vdXQoZWwsIGFuaW1hdGlvblsxXSB8fCBhbmltYXRpb25bMF0sIGR1cmF0aW9uLCBjbXAub3JpZ2luKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90b2dnbGUoZWwsIGZhbHNlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIEFjY29yZGlvbiA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgVG9nZ2xhYmxlXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgdGFyZ2V0czogU3RyaW5nLFxuICAgICAgICAgICAgYWN0aXZlOiBudWxsLFxuICAgICAgICAgICAgY29sbGFwc2libGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBtdWx0aXBsZTogQm9vbGVhbixcbiAgICAgICAgICAgIHRvZ2dsZTogU3RyaW5nLFxuICAgICAgICAgICAgY29udGVudDogU3RyaW5nLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogU3RyaW5nLFxuICAgICAgICAgICAgb2Zmc2V0OiBOdW1iZXJcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0YXJnZXRzOiAnPiAqJyxcbiAgICAgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBhbmltYXRpb246IFt0cnVlXSxcbiAgICAgICAgICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgbXVsdGlwbGU6IGZhbHNlLFxuICAgICAgICAgICAgY2xzT3BlbjogJ3VrLW9wZW4nLFxuICAgICAgICAgICAgdG9nZ2xlOiAnPiAudWstYWNjb3JkaW9uLXRpdGxlJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICc+IC51ay1hY2NvcmRpb24tY29udGVudCcsXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnZWFzZScsXG4gICAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBpdGVtczoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0cyA9IHJlZi50YXJnZXRzO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkJCh0YXJnZXRzLCAkZWwpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oaXRlbXMsIHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gaGlkZSgkKHRoaXMkMS5jb250ZW50LCBlbCksICFoYXNDbGFzcyhlbCwgdGhpcyQxLmNsc09wZW4pKTsgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYgfHwgaGFzQ2xhc3MoaXRlbXMsIHRoaXMuY2xzT3BlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmFjdGl2ZSAhPT0gZmFsc2UgJiYgaXRlbXNbTnVtYmVyKHRoaXMuYWN0aXZlKV1cbiAgICAgICAgICAgICAgICAgICAgICAgIHx8ICF0aGlzLmNvbGxhcHNpYmxlICYmIGl0ZW1zWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKGFjdGl2ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh0aGlzLnRhcmdldHMpICsgXCIgXCIgKyAodGhpcy4kcHJvcHMudG9nZ2xlKSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZShpbmRleCgkJCgoKHRoaXMudGFyZ2V0cykgKyBcIiBcIiArICh0aGlzLiRwcm9wcy50b2dnbGUpKSwgdGhpcy4kZWwpLCBlLmN1cnJlbnQpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbihpdGVtLCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IFt0aGlzLml0ZW1zW2dldEluZGV4KGl0ZW0sIHRoaXMuaXRlbXMpXV07XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUl0ZW1zID0gZmlsdGVyKHRoaXMuaXRlbXMsIChcIi5cIiArICh0aGlzLmNsc09wZW4pKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubXVsdGlwbGUgJiYgIWluY2x1ZGVzKGFjdGl2ZUl0ZW1zLCBpdGVtc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoYWN0aXZlSXRlbXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb2xsYXBzaWJsZSAmJiAhZmlsdGVyKGl0ZW1zLCAoXCI6bm90KC5cIiArICh0aGlzLmNsc09wZW4pICsgXCIpXCIpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiB0aGlzJDEudG9nZ2xlRWxlbWVudChlbCwgIWhhc0NsYXNzKGVsLCB0aGlzJDEuY2xzT3BlbiksIGZ1bmN0aW9uIChlbCwgc2hvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzJDEuY2xzT3Blbiwgc2hvdyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSAkKChcIlwiICsgKGVsLl93cmFwcGVyID8gJz4gKiAnIDogJycpICsgKHRoaXMkMS5jb250ZW50KSksIGVsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0ZSA9PT0gZmFsc2UgfHwgIXRoaXMkMS5oYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlKGNvbnRlbnQsICFzaG93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZWwuX3dyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl93cmFwcGVyID0gd3JhcEFsbChjb250ZW50LCAoXCI8ZGl2XCIgKyAoc2hvdyA/ICcgaGlkZGVuJyA6ICcnKSArIFwiPlwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBoaWRlKGNvbnRlbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvZ2dsZUhlaWdodCh0aGlzJDEpKGVsLl93cmFwcGVyLCBzaG93KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGUoY29udGVudCwgIXNob3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVsLl93cmFwcGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdW53cmFwKGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2dnbGUgPSAkKHRoaXMkMS4kcHJvcHMudG9nZ2xlLCBlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0luVmlldyh0b2dnbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbEludG9WaWV3KHRvZ2dsZSwge29mZnNldDogdGhpcyQxLm9mZnNldH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBoaWRlKGVsLCBoaWRlKSB7XG4gICAgICAgIGF0dHIoZWwsICdoaWRkZW4nLCBoaWRlID8gJycgOiBudWxsKTtcbiAgICB9XG5cbiAgICB2YXIgYWxlcnQgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3MsIFRvZ2dsYWJsZV0sXG5cbiAgICAgICAgYXJnczogJ2FuaW1hdGlvbicsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNsb3NlOiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IFt0cnVlXSxcbiAgICAgICAgICAgIHNlbENsb3NlOiAnLnVrLWFsZXJ0LWNsb3NlJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxNTAsXG4gICAgICAgICAgICBoaWRlUHJvcHM6IGFzc2lnbih7b3BhY2l0eTogMH0sIFRvZ2dsYWJsZS5kYXRhLmhpZGVQcm9wcylcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsQ2xvc2U7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRWxlbWVudCh0aGlzLiRlbCkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuJGRlc3Ryb3kodHJ1ZSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgVmlkZW8gPSB7XG5cbiAgICAgICAgYXJnczogJ2F1dG9wbGF5JyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgYXV0b211dGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBhdXRvcGxheTogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGF1dG9tdXRlOiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9wbGF5OiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgaW5WaWV3OiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXV0b3BsYXkgPSByZWYuYXV0b3BsYXk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYXV0b3BsYXkgPT09ICdpbnZpZXcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaW5WaWV3ICYmICFoYXNBdHRyKHRoaXMuJGVsLCAncHJlbG9hZCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWwucHJlbG9hZCA9ICdub25lJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKHRoaXMuJGVsKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYXV0b211dGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5tdXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMucGxheWVyXG4gICAgICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBpc1Zpc2libGUodGhpcy4kZWwpICYmIGNzcyh0aGlzLiRlbCwgJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBpblZpZXc6IHRoaXMuaW5WaWV3ICYmIGlzSW5WaWV3KHRoaXMuJGVsKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB2aXNpYmxlID0gcmVmLnZpc2libGU7XG4gICAgICAgICAgICAgICAgdmFyIGluVmlldyA9IHJlZi5pblZpZXc7XG5cblxuICAgICAgICAgICAgICAgIGlmICghdmlzaWJsZSB8fCB0aGlzLmluVmlldyAmJiAhaW5WaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmF1dG9wbGF5ID09PSB0cnVlIHx8IHRoaXMuaW5WaWV3ICYmIGluVmlldykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJywgJ3Njcm9sbCddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBjb3ZlciA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgVmlkZW9dLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICB3aWR0aDogTnVtYmVyLFxuICAgICAgICAgICAgaGVpZ2h0OiBOdW1iZXJcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhdXRvbXV0ZTogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBlbCA9IHRoaXMuJGVsO1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSBnZXRQb3NpdGlvbmVkUGFyZW50KGVsKSB8fCBlbC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgZGltID0gRGltZW5zaW9ucy5jb3ZlcihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGggfHwgZWwubmF0dXJhbFdpZHRoIHx8IGVsLnZpZGVvV2lkdGggfHwgZWwuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0IHx8IGVsLm5hdHVyYWxIZWlnaHQgfHwgZWwudmlkZW9IZWlnaHQgfHwgZWwuY2xpZW50SGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICh3aWR0aCAlIDIgPyAxIDogMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArIChoZWlnaHQgJSAyID8gMSA6IDApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFkaW0ud2lkdGggfHwgIWRpbS5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBkaW07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gcmVmLndpZHRoO1xuXG4gICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB7aGVpZ2h0OiBoZWlnaHQsIHdpZHRoOiB3aWR0aH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFBvc2l0aW9uZWRQYXJlbnQoZWwpIHtcbiAgICAgICAgd2hpbGUgKChlbCA9IHBhcmVudChlbCkpKSB7XG4gICAgICAgICAgICBpZiAoY3NzKGVsLCAncG9zaXRpb24nKSAhPT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgUG9zaXRpb24gPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHBvczogU3RyaW5nLFxuICAgICAgICAgICAgb2Zmc2V0OiBudWxsLFxuICAgICAgICAgICAgZmxpcDogQm9vbGVhbixcbiAgICAgICAgICAgIGNsc1BvczogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcG9zOiAoXCJib3R0b20tXCIgKyAoIWlzUnRsID8gJ2xlZnQnIDogJ3JpZ2h0JykpLFxuICAgICAgICAgICAgZmxpcDogdHJ1ZSxcbiAgICAgICAgICAgIG9mZnNldDogZmFsc2UsXG4gICAgICAgICAgICBjbHNQb3M6ICcnXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgcG9zOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gcmVmLnBvcztcblxuICAgICAgICAgICAgICAgIHJldHVybiAocG9zICsgKCFpbmNsdWRlcyhwb3MsICctJykgPyAnLWNlbnRlcicgOiAnJykpLnNwbGl0KCctJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkaXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc1swXTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFsaWduOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wb3NbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uQXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHRhcmdldCwgYm91bmRhcnkpIHtcblxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzZXMoZWxlbWVudCwgKCh0aGlzLmNsc1BvcykgKyBcIi0odG9wfGJvdHRvbXxsZWZ0fHJpZ2h0KSgtW2Etel0rKT9cIikpO1xuICAgICAgICAgICAgICAgIGNzcyhlbGVtZW50LCB7dG9wOiAnJywgbGVmdDogJyd9KTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlO1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQkMSA9IHJlZi5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIGF4aXMgPSB0aGlzLmdldEF4aXMoKTtcblxuICAgICAgICAgICAgICAgIGlmICghaXNOdW1lcmljKG9mZnNldCQxKSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gJChvZmZzZXQkMSk7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCQxID0gbm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvZmZzZXQobm9kZSlbYXhpcyA9PT0gJ3gnID8gJ2xlZnQnIDogJ3RvcCddIC0gb2Zmc2V0KHRhcmdldClbYXhpcyA9PT0gJ3gnID8gJ3JpZ2h0JyA6ICdib3R0b20nXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciByZWYkMSA9IHBvc2l0aW9uQXQoXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgYXhpcyA9PT0gJ3gnID8gKChmbGlwUG9zaXRpb24odGhpcy5kaXIpKSArIFwiIFwiICsgKHRoaXMuYWxpZ24pKSA6ICgodGhpcy5hbGlnbikgKyBcIiBcIiArIChmbGlwUG9zaXRpb24odGhpcy5kaXIpKSksXG4gICAgICAgICAgICAgICAgICAgIGF4aXMgPT09ICd4JyA/ICgodGhpcy5kaXIpICsgXCIgXCIgKyAodGhpcy5hbGlnbikpIDogKCh0aGlzLmFsaWduKSArIFwiIFwiICsgKHRoaXMuZGlyKSksXG4gICAgICAgICAgICAgICAgICAgIGF4aXMgPT09ICd4JyA/IChcIlwiICsgKHRoaXMuZGlyID09PSAnbGVmdCcgPyAtb2Zmc2V0JDEgOiBvZmZzZXQkMSkpIDogKFwiIFwiICsgKHRoaXMuZGlyID09PSAndG9wJyA/IC1vZmZzZXQkMSA6IG9mZnNldCQxKSksXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmxpcCxcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlcbiAgICAgICAgICAgICAgICApLnRhcmdldDtcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHJlZiQxLng7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSByZWYkMS55O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kaXIgPSBheGlzID09PSAneCcgPyB4IDogeTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsaWduID0gYXhpcyA9PT0gJ3gnID8geSA6IHg7XG5cbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbGVtZW50LCAoKHRoaXMuY2xzUG9zKSArIFwiLVwiICsgKHRoaXMuZGlyKSArIFwiLVwiICsgKHRoaXMuYWxpZ24pKSwgdGhpcy5vZmZzZXQgPT09IGZhbHNlKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0QXhpczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlyID09PSAndG9wJyB8fCB0aGlzLmRpciA9PT0gJ2JvdHRvbScgPyAneScgOiAneCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBhY3RpdmU7XG5cbiAgICB2YXIgZHJvcCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtQb3NpdGlvbiwgVG9nZ2xhYmxlXSxcblxuICAgICAgICBhcmdzOiAncG9zJyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgbW9kZTogJ2xpc3QnLFxuICAgICAgICAgICAgdG9nZ2xlOiBCb29sZWFuLFxuICAgICAgICAgICAgYm91bmRhcnk6IEJvb2xlYW4sXG4gICAgICAgICAgICBib3VuZGFyeUFsaWduOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVsYXlTaG93OiBOdW1iZXIsXG4gICAgICAgICAgICBkZWxheUhpZGU6IE51bWJlcixcbiAgICAgICAgICAgIGNsc0Ryb3A6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1vZGU6IFsnY2xpY2snLCAnaG92ZXInXSxcbiAgICAgICAgICAgIHRvZ2dsZTogJy0gKicsXG4gICAgICAgICAgICBib3VuZGFyeTogaW5Ccm93c2VyICYmIHdpbmRvdyxcbiAgICAgICAgICAgIGJvdW5kYXJ5QWxpZ246IGZhbHNlLFxuICAgICAgICAgICAgZGVsYXlTaG93OiAwLFxuICAgICAgICAgICAgZGVsYXlIaWRlOiA4MDAsXG4gICAgICAgICAgICBjbHNEcm9wOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogWyd1ay1hbmltYXRpb24tZmFkZSddLFxuICAgICAgICAgICAgY2xzOiAndWstb3BlbidcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBib3VuZGFyeTogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnkgPSByZWYuYm91bmRhcnk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnkoYm91bmRhcnksICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbHNEcm9wOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xzRHJvcCA9IHJlZi5jbHNEcm9wO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsc0Ryb3AgfHwgKFwidWstXCIgKyAodGhpcy4kb3B0aW9ucy5uYW1lKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbHNQb3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsc0Ryb3A7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudHJhY2tlciA9IG5ldyBNb3VzZVRyYWNrZXIoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNEcm9wKTtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuJHByb3BzO1xuICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IHJlZi50b2dnbGU7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZSA9IHRvZ2dsZSAmJiB0aGlzLiRjcmVhdGUoJ3RvZ2dsZScsIHF1ZXJ5KHRvZ2dsZSwgdGhpcy4kZWwpLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLiRlbCxcbiAgICAgICAgICAgICAgICBtb2RlOiB0aGlzLm1vZGVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAhdGhpcy50b2dnbGUgJiYgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIi5cIiArICh0aGlzLmNsc0Ryb3ApICsgXCItY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhW2hyZWZePVwiI1wiXSc7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IHJlZi5kZWZhdWx0UHJldmVudGVkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IHJlZi5jdXJyZW50Lmhhc2g7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmIGhhc2ggJiYgIXdpdGhpbihoYXNoLCB0aGlzLiRlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdiZWZvcmVzY3JvbGwnLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAndG9nZ2xlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlLCB0b2dnbGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3codG9nZ2xlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICd0b2dnbGVzaG93JyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlLCB0b2dnbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3codG9nZ2xlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICd0b2dnbGVoaWRlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiBwb2ludGVyRW50ZXIsXG5cbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnaG92ZXInKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVG91Y2goZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogcG9pbnRlckxlYXZlLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVzKHRoaXMubW9kZSwgJ2hvdmVyJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RvdWNoKGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3RvZ2dsZWQnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1RvZ2dsZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhclRpbWVycygpO1xuICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3cnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFja2VyLmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcblxuICAgICAgICAgICAgICAgICAgICBvbmNlKHRoaXMuJGVsLCAnaGlkZScsIG9uKGRvY3VtZW50LCBwb2ludGVyRG93biwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF3aXRoaW4odGFyZ2V0LCB0aGlzJDEuJGVsKSAmJiBvbmNlKGRvY3VtZW50LCAocG9pbnRlclVwICsgXCIgXCIgKyBwb2ludGVyQ2FuY2VsICsgXCIgc2Nyb2xsXCIpLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSByZWYuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdUYXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmIHR5cGUgPT09IHBvaW50ZXJVcCAmJiB0YXJnZXQgPT09IG5ld1RhcmdldCAmJiAhKHRoaXMkMS50b2dnbGUgJiYgd2l0aGluKHRhcmdldCwgdGhpcyQxLnRvZ2dsZS4kZWwpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKSwge3NlbGY6IHRydWV9KTtcblxuICAgICAgICAgICAgICAgICAgICBvbmNlKHRoaXMuJGVsLCAnaGlkZScsIG9uKGRvY3VtZW50LCAna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLCB7c2VsZjogdHJ1ZX0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnYmVmb3JlaGlkZScsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiRlbCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBhY3RpdmUgPT09IG51bGwgJiYgd2l0aGluKHRhcmdldCwgdGhpcy4kZWwpICYmIHRoaXMuaXNUb2dnbGVkKCkgPyB0aGlzIDogYWN0aXZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gdGhpcy5pc0FjdGl2ZSgpID8gbnVsbCA6IGFjdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFja2VyLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3VwZGF0ZWFyaWEnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUsIHRvZ2dsZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFyaWEodGhpcy4kZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2dnbGUgfHwgdGhpcy50b2dnbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIoKHRvZ2dsZSB8fCB0aGlzLnRvZ2dsZSkuJGVsLCAnYXJpYS1leHBhbmRlZCcsIHRoaXMuaXNUb2dnbGVkKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy50b2dnbGUuJGVsLCB0aGlzLmNscywgdGhpcy5pc1RvZ2dsZWQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkgJiYgIUFuaW1hdGlvbi5pblByb2dyZXNzKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24odG9nZ2xlLCBkZWxheSkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmICggdG9nZ2xlID09PSB2b2lkIDAgKSB0b2dnbGUgPSB0aGlzLnRvZ2dsZTtcbiAgICAgICAgICAgICAgICBpZiAoIGRlbGF5ID09PSB2b2lkIDAgKSBkZWxheSA9IHRydWU7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlZCgpICYmIHRvZ2dsZSAmJiB0aGlzLnRvZ2dsZSAmJiB0b2dnbGUuJGVsICE9PSB0aGlzLnRvZ2dsZS4kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZSA9IHRvZ2dsZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVsYXkgJiYgYWN0aXZlLmlzRGVsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RpbWVyID0gc2V0VGltZW91dCh0aGlzLnNob3csIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChhY3RpdmUgJiYgIXdpdGhpbih0aGlzLiRlbCwgYWN0aXZlLiRlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiAhdGhpcyQxLmlzVG9nZ2xlZCgpICYmIHRoaXMkMS50b2dnbGVFbGVtZW50KHRoaXMkMS4kZWwsIHRydWUpOyB9LCBkZWxheSAmJiB0aGlzLmRlbGF5U2hvdyB8fCAwKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGlkZTogZnVuY3Rpb24oZGVsYXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgICAgICBpZiAoIGRlbGF5ID09PSB2b2lkIDAgKSBkZWxheSA9IHRydWU7XG5cblxuICAgICAgICAgICAgICAgIHZhciBoaWRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnRvZ2dsZUVsZW1lbnQodGhpcyQxLiRlbCwgZmFsc2UsIGZhbHNlKTsgfTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaXNEZWxheWluZyA9IGdldFBvc2l0aW9uZWRFbGVtZW50cyh0aGlzLiRlbCkuc29tZShmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHRoaXMkMS50cmFja2VyLm1vdmVzVG8oZWwpOyB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChkZWxheSAmJiB0aGlzLmlzRGVsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlVGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuaGlkZSwgNTApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVsYXkgJiYgdGhpcy5kZWxheUhpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlVGltZXIgPSBzZXRUaW1lb3V0KGhpZGUsIHRoaXMuZGVsYXlIaWRlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2xlYXJUaW1lcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNob3dUaW1lcik7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaGlkZVRpbWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dUaW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNEZWxheWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXNBY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhY3RpdmUgPT09IHRoaXM7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzc2VzKHRoaXMuJGVsLCAoKHRoaXMuY2xzRHJvcCkgKyBcIi0oc3RhY2t8Ym91bmRhcnkpXCIpKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLiRlbCwgKCh0aGlzLmNsc0Ryb3ApICsgXCItYm91bmRhcnlcIiksIHRoaXMuYm91bmRhcnlBbGlnbik7XG5cbiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnkgPSBvZmZzZXQodGhpcy5ib3VuZGFyeSk7XG4gICAgICAgICAgICAgICAgdmFyIGFsaWduVG8gPSB0aGlzLmJvdW5kYXJ5QWxpZ24gPyBib3VuZGFyeSA6IG9mZnNldCh0aGlzLnRvZ2dsZS4kZWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWxpZ24gPT09ICdqdXN0aWZ5Jykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IHRoaXMuZ2V0QXhpcygpID09PSAneScgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgcHJvcCwgYWxpZ25Ub1twcm9wXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLiRlbC5vZmZzZXRXaWR0aCA+IE1hdGgubWF4KGJvdW5kYXJ5LnJpZ2h0IC0gYWxpZ25Uby5sZWZ0LCBhbGlnblRvLnJpZ2h0IC0gYm91bmRhcnkubGVmdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsICgodGhpcy5jbHNEcm9wKSArIFwiLXN0YWNrXCIpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uQXQodGhpcy4kZWwsIHRoaXMuYm91bmRhcnlBbGlnbiA/IHRoaXMuYm91bmRhcnkgOiB0aGlzLnRvZ2dsZS4kZWwsIHRoaXMuYm91bmRhcnkpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFBvc2l0aW9uZWRFbGVtZW50cyhlbCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGFwcGx5KGVsLCBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGNzcyhlbCwgJ3Bvc2l0aW9uJykgIT09ICdzdGF0aWMnICYmIHJlc3VsdC5wdXNoKGVsKTsgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1DdXN0b20gPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3NdLFxuXG4gICAgICAgIGFyZ3M6ICd0YXJnZXQnLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKF8sICRlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkKHNlbElucHV0LCAkZWwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRhcmdldDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQgJiYgKHRhcmdldCA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAmJiB0aGlzLmlucHV0LnBhcmVudE5vZGUgPT09ICRlbFxuICAgICAgICAgICAgICAgICAgICAmJiB0aGlzLmlucHV0Lm5leHRFbGVtZW50U2libGluZ1xuICAgICAgICAgICAgICAgICAgICB8fCBxdWVyeSh0YXJnZXQsICRlbCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHJlZi5pbnB1dDtcblxuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvcHRpb247XG4gICAgICAgICAgICB2YXIgcHJvcCA9IGlzSW5wdXQodGFyZ2V0KSA/ICd2YWx1ZScgOiAndGV4dENvbnRlbnQnO1xuICAgICAgICAgICAgdmFyIHByZXYgPSB0YXJnZXRbcHJvcF07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpbnB1dC5maWxlcyAmJiBpbnB1dC5maWxlc1swXVxuICAgICAgICAgICAgICAgID8gaW5wdXQuZmlsZXNbMF0ubmFtZVxuICAgICAgICAgICAgICAgIDogbWF0Y2hlcyhpbnB1dCwgJ3NlbGVjdCcpICYmIChvcHRpb24gPSAkJCgnb3B0aW9uJywgaW5wdXQpLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLnNlbGVjdGVkOyB9KVswXSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbi50ZXh0Q29udGVudFxuICAgICAgICAgICAgICAgICAgICA6IGlucHV0LnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAocHJldiAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2NoYW5nZScsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdyZXNldCcsXG5cbiAgICAgICAgICAgICAgICBlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9zZXN0KHRoaXMuJGVsLCAnZm9ybScpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH07XG5cbiAgICAvLyBEZXByZWNhdGVkXG4gICAgdmFyIGdpZiA9IHtcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGludmlldyA9IGlzSW5WaWV3KHRoaXMuJGVsKTtcblxuICAgICAgICAgICAgICAgIGlmICghaW52aWV3IHx8IGRhdGEuaXNJblZpZXcgPT09IGludmlldykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGF0YS5pc0luVmlldyA9IGludmlldztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbC5zcmMgPSB0aGlzLiRlbC5zcmM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1hc3NpZ25cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBNYXJnaW4gPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIG1hcmdpbjogU3RyaW5nLFxuICAgICAgICAgICAgZmlyc3RDb2x1bW46IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBtYXJnaW46ICd1ay1tYXJnaW4tc21hbGwtdG9wJyxcbiAgICAgICAgICAgIGZpcnN0Q29sdW1uOiAndWstZmlyc3QtY29sdW1uJ1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBnZXRDb2x1bW5zKHRoaXMuJGVsLmNoaWxkcmVuKSxcbiAgICAgICAgICAgICAgICAgICAgcm93czogZ2V0Um93cyh0aGlzLiRlbC5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBjb2x1bW5zID0gcmVmLmNvbHVtbnM7XG4gICAgICAgICAgICAgICAgdmFyIHJvd3MgPSByZWYucm93cztcblxuICAgICAgICAgICAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93LCBpKSB7IHJldHVybiByb3cuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzJDEubWFyZ2luLCBpICE9PSAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzJDEuZmlyc3RDb2x1bW4sIGluY2x1ZGVzKGNvbHVtbnNbMF0sIGVsKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pOyB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRSb3dzKGl0ZW1zKSB7XG4gICAgICAgIHJldHVybiBzb3J0QnkkMShpdGVtcywgJ3RvcCcsICdib3R0b20nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb2x1bW5zKGl0ZW1zKSB7XG4gICAgICAgIHZhciBjb2x1bW5zID0gc29ydEJ5JDEoaXRlbXMsICdsZWZ0JywgJ3JpZ2h0Jyk7XG4gICAgICAgIHJldHVybiBpc1J0bFxuICAgICAgICAgICAgPyBjb2x1bW5zLnJldmVyc2UoKVxuICAgICAgICAgICAgOiBjb2x1bW5zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNvcnRCeSQxKGl0ZW1zLCBzdGFydFByb3AsIGVuZFByb3ApIHtcblxuICAgICAgICB2YXIgc29ydGVkID0gW1tdXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIHZhciBlbCA9IGl0ZW1zW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWlzVmlzaWJsZShlbCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGRpbSA9IGdldE9mZnNldChlbCk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSBzb3J0ZWQubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcblxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gc29ydGVkW2pdO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50WzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQucHVzaChlbCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBzdGFydERpbSA9ICh2b2lkIDApO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50WzBdLm9mZnNldFBhcmVudCA9PT0gZWwub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGltID0gZ2V0T2Zmc2V0KGN1cnJlbnRbMF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IGdldE9mZnNldChlbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGltID0gZ2V0T2Zmc2V0KGN1cnJlbnRbMF0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkaW1bc3RhcnRQcm9wXSA+PSBzdGFydERpbVtlbmRQcm9wXSAtIDEgJiYgZGltW3N0YXJ0UHJvcF0gIT09IHN0YXJ0RGltW3N0YXJ0UHJvcF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkLnB1c2goW2VsXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkaW1bZW5kUHJvcF0gLSAxID4gc3RhcnREaW1bc3RhcnRQcm9wXSB8fCBkaW1bc3RhcnRQcm9wXSA9PT0gc3RhcnREaW1bc3RhcnRQcm9wXSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnB1c2goZWwpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzb3J0ZWQudW5zaGlmdChbZWxdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3J0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0T2Zmc2V0KGVsZW1lbnQsIG9mZnNldCkge1xuICAgICAgICB2YXIgYXNzaWduO1xuXG4gICAgICAgIGlmICggb2Zmc2V0ID09PSB2b2lkIDAgKSBvZmZzZXQgPSBmYWxzZTtcblxuICAgICAgICB2YXIgb2Zmc2V0VG9wID0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICAgIHZhciBvZmZzZXRMZWZ0ID0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuICAgICAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHZhciBvZmZzZXRXaWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgICAgKGFzc2lnbiA9IG9mZnNldFBvc2l0aW9uKGVsZW1lbnQpLCBvZmZzZXRUb3AgPSBhc3NpZ25bMF0sIG9mZnNldExlZnQgPSBhc3NpZ25bMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcDogb2Zmc2V0VG9wLFxuICAgICAgICAgICAgbGVmdDogb2Zmc2V0TGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogb2Zmc2V0VG9wICsgb2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgcmlnaHQ6IG9mZnNldExlZnQgKyBvZmZzZXRXaWR0aFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBncmlkID0ge1xuXG4gICAgICAgIGV4dGVuZHM6IE1hcmdpbixcblxuICAgICAgICBtaXhpbnM6IFtDbGFzc10sXG5cbiAgICAgICAgbmFtZTogJ2dyaWQnLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBtYXNvbnJ5OiBCb29sZWFuLFxuICAgICAgICAgICAgcGFyYWxsYXg6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1hcmdpbjogJ3VrLWdyaWQtbWFyZ2luJyxcbiAgICAgICAgICAgIGNsc1N0YWNrOiAndWstZ3JpZC1zdGFjaycsXG4gICAgICAgICAgICBtYXNvbnJ5OiBmYWxzZSxcbiAgICAgICAgICAgIHBhcmFsbGF4OiAwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWFzb25yeSAmJiBhZGRDbGFzcyh0aGlzLiRlbCwgJ3VrLWZsZXgtdG9wIHVrLWZsZXgtd3JhcC10b3AnKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1ucyA9IHJlZi5jb2x1bW5zO1xuXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc1N0YWNrLCBjb2x1bW5zLmxlbmd0aCA8IDIpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5zID0gcmVmLmNvbHVtbnM7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dzID0gcmVmLnJvd3M7XG5cblxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSBjaGlsZHJlbih0aGlzLiRlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub2Rlcy5sZW5ndGggfHwgIXRoaXMubWFzb25yeSAmJiAhdGhpcy5wYXJhbGxheCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25JblByb2dyZXNzID0gbm9kZXMuc29tZShUcmFuc2l0aW9uLmluUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxIZWlnaHQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSBNYXRoLmFicyh0aGlzLnBhcmFsbGF4KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXNvbnJ5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMgPSBjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7IHJldHVybiBzb3J0QnkoY29sdW1uLCAnb2Zmc2V0VG9wJyk7IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uSGVpZ2h0cyA9IGdldENvbHVtbkhlaWdodHMoY29sdW1ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFyZ2luID0gZ2V0TWFyZ2luVG9wKG5vZGVzLCB0aGlzLm1hcmdpbikgKiAocm93cy5sZW5ndGggLSAxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlcyA9IGdldFRyYW5zbGF0ZXMocm93cywgY29sdW1ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbEhlaWdodCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGNvbHVtbkhlaWdodHMpICsgbWFyZ2luO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFkZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmcgPSBjb2x1bW5IZWlnaHRzLnJlZHVjZShmdW5jdGlvbiAobmV3UGFkZGluZywgaGd0LCBpKSB7IHJldHVybiBNYXRoLm1heChuZXdQYWRkaW5nLCBoZ3QgKyBtYXJnaW4gKyAoaSAlIDIgPyBwYWRkaW5nIDogcGFkZGluZyAvIDgpIC0gZWxIZWlnaHQpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwYWRkaW5nOiBwYWRkaW5nLCBjb2x1bW5zOiBjb2x1bW5zLCB0cmFuc2xhdGVzOiB0cmFuc2xhdGVzLCBoZWlnaHQ6ICF0cmFuc2l0aW9uSW5Qcm9ncmVzcyA/IGVsSGVpZ2h0IDogZmFsc2V9O1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nID0gcmVmLnBhZGRpbmc7XG5cblxuICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsICdwYWRkaW5nQm90dG9tJywgcGFkZGluZyB8fCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCAhPT0gZmFsc2UgJiYgY3NzKHRoaXMuJGVsLCAnaGVpZ2h0JywgaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQkMSA9IHJlZi5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGVkOiB0aGlzLnBhcmFsbGF4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzY3JvbGxlZE92ZXIodGhpcy4kZWwsIGhlaWdodCQxID8gaGVpZ2h0JDEgLSBoZWlnaHQodGhpcy4kZWwpIDogMCkgKiBNYXRoLmFicyh0aGlzLnBhcmFsbGF4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1ucyA9IHJlZi5jb2x1bW5zO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsZWQgPSByZWYuc2Nyb2xsZWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGVzID0gcmVmLnRyYW5zbGF0ZXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsZWQgPT09IGZhbHNlICYmICF0cmFuc2xhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbiwgaSkgeyByZXR1cm4gY29sdW1uLmZvckVhY2goZnVuY3Rpb24gKGVsLCBqKSB7IHJldHVybiBjc3MoZWwsICd0cmFuc2Zvcm0nLCAhc2Nyb2xsZWQgJiYgIXRyYW5zbGF0ZXMgPyAnJyA6IChcInRyYW5zbGF0ZVkoXCIgKyAoKHRyYW5zbGF0ZXMgJiYgLXRyYW5zbGF0ZXNbaV1bal0pICsgKHNjcm9sbGVkID8gaSAlIDIgPyBzY3JvbGxlZCA6IHNjcm9sbGVkIC8gOCA6IDApKSArIFwicHgpXCIpKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTsgfVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRUcmFuc2xhdGVzKHJvd3MsIGNvbHVtbnMpIHtcblxuICAgICAgICB2YXIgcm93SGVpZ2h0cyA9IHJvd3MubWFwKGZ1bmN0aW9uIChyb3cpIHsgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIHJvdy5tYXAoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5vZmZzZXRIZWlnaHQ7IH0pKTsgfVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbiAoZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHZhciBwcmV2ID0gMDtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50cy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQsIHJvdykgeyByZXR1cm4gcHJldiArPSByb3dcbiAgICAgICAgICAgICAgICAgICAgPyByb3dIZWlnaHRzW3JvdyAtIDFdIC0gZWxlbWVudHNbcm93IC0gMV0ub2Zmc2V0SGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIDogMDsgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TWFyZ2luVG9wKG5vZGVzLCBjbHMpIHtcblxuICAgICAgICB2YXIgcmVmID0gbm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gaGFzQ2xhc3MoZWwsIGNscyk7IH0pO1xuICAgICAgICB2YXIgbm9kZSA9IHJlZlswXTtcblxuICAgICAgICByZXR1cm4gdG9GbG9hdChub2RlXG4gICAgICAgICAgICA/IGNzcyhub2RlLCAnbWFyZ2luVG9wJylcbiAgICAgICAgICAgIDogY3NzKG5vZGVzWzBdLCAncGFkZGluZ0xlZnQnKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29sdW1uSGVpZ2h0cyhjb2x1bW5zKSB7XG4gICAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7IHJldHVybiBjb2x1bW4ucmVkdWNlKGZ1bmN0aW9uIChzdW0sIGVsKSB7IHJldHVybiBzdW0gKyBlbC5vZmZzZXRIZWlnaHQ7IH0sIDApOyB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gSUUgMTEgZml4IChtaW4taGVpZ2h0IG9uIGEgZmxleCBjb250YWluZXIgd29uJ3QgYXBwbHkgdG8gaXRzIGZsZXggaXRlbXMpXG4gICAgdmFyIEZsZXhCdWcgPSBpc0lFID8ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBzZWxNaW5IZWlnaHQ6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHNlbE1pbkhlaWdodDogZmFsc2UsXG4gICAgICAgICAgICBmb3JjZUhlaWdodDogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBlbGVtZW50czogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsTWluSGVpZ2h0ID0gcmVmLnNlbE1pbkhlaWdodDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxNaW5IZWlnaHQgPyAkJChzZWxNaW5IZWlnaHQsICRlbCkgOiBbJGVsXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuZWxlbWVudHMsICdoZWlnaHQnLCAnJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIG9yZGVyOiAtNSxcblxuICAgICAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSB0b0Zsb2F0KGNzcyhlbCwgJ21pbkhlaWdodCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWlnaHQgJiYgKHRoaXMkMS5mb3JjZUhlaWdodCB8fCBNYXRoLnJvdW5kKGhlaWdodCArIGJveE1vZGVsQWRqdXN0KGVsLCAnaGVpZ2h0JywgJ2NvbnRlbnQtYm94JykpID49IGVsLm9mZnNldEhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3MoZWwsICdoZWlnaHQnLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgb3JkZXI6IDUsXG5cbiAgICAgICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH0gOiB7fTtcblxuICAgIHZhciBoZWlnaHRNYXRjaCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtGbGV4QnVnXSxcblxuICAgICAgICBhcmdzOiAndGFyZ2V0JyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgdGFyZ2V0OiBTdHJpbmcsXG4gICAgICAgICAgICByb3c6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0YXJnZXQ6ICc+IConLFxuICAgICAgICAgICAgcm93OiB0cnVlLFxuICAgICAgICAgICAgZm9yY2VIZWlnaHQ6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBlbGVtZW50czogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIHJldHVybiAkJCh0YXJnZXQsICRlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcm93czogKHRoaXMucm93ID8gZ2V0Um93cyh0aGlzLmVsZW1lbnRzKSA6IFt0aGlzLmVsZW1lbnRzXSkubWFwKG1hdGNoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJvd3MgPSByZWYucm93cztcblxuICAgICAgICAgICAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0cyA9IHJlZi5oZWlnaHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gcmVmLmVsZW1lbnRzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHsgcmV0dXJuIGNzcyhlbCwgJ21pbkhlaWdodCcsIGhlaWdodHNbaV0pOyB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWF0Y2goZWxlbWVudHMpIHtcbiAgICAgICAgdmFyIGFzc2lnbjtcblxuXG4gICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4ge2hlaWdodHM6IFsnJ10sIGVsZW1lbnRzOiBlbGVtZW50c307XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVmID0gZ2V0SGVpZ2h0cyhlbGVtZW50cyk7XG4gICAgICAgIHZhciBoZWlnaHRzID0gcmVmLmhlaWdodHM7XG4gICAgICAgIHZhciBtYXggPSByZWYubWF4O1xuICAgICAgICB2YXIgaGFzTWluSGVpZ2h0ID0gZWxlbWVudHMuc29tZShmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLnN0eWxlLm1pbkhlaWdodDsgfSk7XG4gICAgICAgIHZhciBoYXNTaHJ1bmsgPSBlbGVtZW50cy5zb21lKGZ1bmN0aW9uIChlbCwgaSkgeyByZXR1cm4gIWVsLnN0eWxlLm1pbkhlaWdodCAmJiBoZWlnaHRzW2ldIDwgbWF4OyB9KTtcblxuICAgICAgICBpZiAoaGFzTWluSGVpZ2h0ICYmIGhhc1NocnVuaykge1xuICAgICAgICAgICAgY3NzKGVsZW1lbnRzLCAnbWluSGVpZ2h0JywgJycpO1xuICAgICAgICAgICAgKChhc3NpZ24gPSBnZXRIZWlnaHRzKGVsZW1lbnRzKSwgaGVpZ2h0cyA9IGFzc2lnbi5oZWlnaHRzLCBtYXggPSBhc3NpZ24ubWF4KSk7XG4gICAgICAgIH1cblxuICAgICAgICBoZWlnaHRzID0gZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbCwgaSkgeyByZXR1cm4gaGVpZ2h0c1tpXSA9PT0gbWF4ICYmIHRvRmxvYXQoZWwuc3R5bGUubWluSGVpZ2h0KS50b0ZpeGVkKDIpICE9PSBtYXgudG9GaXhlZCgyKSA/ICcnIDogbWF4OyB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHtoZWlnaHRzOiBoZWlnaHRzLCBlbGVtZW50czogZWxlbWVudHN9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEhlaWdodHMoZWxlbWVudHMpIHtcbiAgICAgICAgdmFyIGhlaWdodHMgPSBlbGVtZW50cy5tYXAoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBvZmZzZXQoZWwpLmhlaWdodCAtIGJveE1vZGVsQWRqdXN0KGVsLCAnaGVpZ2h0JywgJ2NvbnRlbnQtYm94Jyk7IH0pO1xuICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG5cbiAgICAgICAgcmV0dXJuIHtoZWlnaHRzOiBoZWlnaHRzLCBtYXg6IG1heH07XG4gICAgfVxuXG4gICAgdmFyIGhlaWdodFZpZXdwb3J0ID0ge1xuXG4gICAgICAgIG1peGluczogW0ZsZXhCdWddLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBleHBhbmQ6IEJvb2xlYW4sXG4gICAgICAgICAgICBvZmZzZXRUb3A6IEJvb2xlYW4sXG4gICAgICAgICAgICBvZmZzZXRCb3R0b206IEJvb2xlYW4sXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGV4cGFuZDogZmFsc2UsXG4gICAgICAgICAgICBvZmZzZXRUb3A6IGZhbHNlLFxuICAgICAgICAgICAgb2Zmc2V0Qm90dG9tOiBmYWxzZSxcbiAgICAgICAgICAgIG1pbkhlaWdodDogMFxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IHJlZi5taW5IZWlnaHQ7XG5cblxuICAgICAgICAgICAgICAgIGlmICghaXNWaXNpYmxlKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG1pbkhlaWdodCA9ICcnO1xuICAgICAgICAgICAgICAgIHZhciBib3ggPSBib3hNb2RlbEFkanVzdCh0aGlzLiRlbCwgJ2hlaWdodCcsICdjb250ZW50LWJveCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXhwYW5kKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZGF0YXNldC5oZWlnaHRFeHBhbmQgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoJCgnW2RhdGEtaGVpZ2h0LWV4cGFuZF0nKSAhPT0gdGhpcy4kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCA9IGhlaWdodCh3aW5kb3cpIC0gKG9mZnNldEhlaWdodChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIC0gb2Zmc2V0SGVpZ2h0KHRoaXMuJGVsKSkgLSBib3ggfHwgJyc7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIG1vYmlsZSBkZXZpY2VzIChpT1MgYW5kIEFuZHJvaWQpIHdpbmRvdy5pbm5lckhlaWdodCAhPT0gMTAwdmhcbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ID0gJ2NhbGMoMTAwdmgnO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9mZnNldFRvcCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmJDEgPSBvZmZzZXQodGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvcCA9IHJlZiQxLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSB0b3AgPiAwICYmIHRvcCA8IGhlaWdodCh3aW5kb3cpIC8gMiA/IChcIiAtIFwiICsgdG9wICsgXCJweFwiKSA6ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vZmZzZXRCb3R0b20gPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ICs9IFwiIC0gXCIgKyAob2Zmc2V0SGVpZ2h0KHRoaXMuJGVsLm5leHRFbGVtZW50U2libGluZykpICsgXCJweFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOdW1lcmljKHRoaXMub2Zmc2V0Qm90dG9tKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQgKz0gXCIgLSBcIiArICh0aGlzLm9mZnNldEJvdHRvbSkgKyBcInZoXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9mZnNldEJvdHRvbSAmJiBlbmRzV2l0aCh0aGlzLm9mZnNldEJvdHRvbSwgJ3B4JykpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ICs9IFwiIC0gXCIgKyAodG9GbG9hdCh0aGlzLm9mZnNldEJvdHRvbSkpICsgXCJweFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcodGhpcy5vZmZzZXRCb3R0b20pKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSBcIiAtIFwiICsgKG9mZnNldEhlaWdodChxdWVyeSh0aGlzLm9mZnNldEJvdHRvbSwgdGhpcy4kZWwpKSkgKyBcInB4XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSAoYm94ID8gKFwiIC0gXCIgKyBib3ggKyBcInB4XCIpIDogJycpICsgXCIpXCI7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge21pbkhlaWdodDogbWluSGVpZ2h0LCBwcmV2OiBwcmV2fTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWluSGVpZ2h0ID0gcmVmLm1pbkhlaWdodDtcbiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IHJlZi5wcmV2O1xuXG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsIHttaW5IZWlnaHQ6IG1pbkhlaWdodH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1pbkhlaWdodCAhPT0gcHJldikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUodGhpcy4kZWwsICdyZXNpemUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5taW5IZWlnaHQgJiYgdG9GbG9hdChjc3ModGhpcy4kZWwsICdtaW5IZWlnaHQnKSkgPCB0aGlzLm1pbkhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsICdtaW5IZWlnaHQnLCB0aGlzLm1pbkhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0SGVpZ2h0KGVsKSB7XG4gICAgICAgIHJldHVybiBlbCAmJiBvZmZzZXQoZWwpLmhlaWdodCB8fCAwO1xuICAgIH1cblxuICAgIHZhciBTVkcgPSB7XG5cbiAgICAgICAgYXJnczogJ3NyYycsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGlkOiBCb29sZWFuLFxuICAgICAgICAgICAgaWNvbjogU3RyaW5nLFxuICAgICAgICAgICAgc3JjOiBTdHJpbmcsXG4gICAgICAgICAgICBzdHlsZTogU3RyaW5nLFxuICAgICAgICAgICAgd2lkdGg6IE51bWJlcixcbiAgICAgICAgICAgIGhlaWdodDogTnVtYmVyLFxuICAgICAgICAgICAgcmF0aW86IE51bWJlcixcbiAgICAgICAgICAgIGNsYXNzOiBTdHJpbmcsXG4gICAgICAgICAgICBzdHJva2VBbmltYXRpb246IEJvb2xlYW4sXG4gICAgICAgICAgICBmb2N1c2FibGU6IEJvb2xlYW4sIC8vIElFIDExXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiAnbGlzdCdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICByYXRpbzogMSxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsnc3R5bGUnLCAnY2xhc3MnLCAnZm9jdXNhYmxlJ10sXG4gICAgICAgICAgICBjbGFzczogJycsXG4gICAgICAgICAgICBzdHJva2VBbmltYXRpb246IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgYmVmb3JlQ29ubmVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNsYXNzICs9ICcgdWstc3ZnJztcbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgYXNzaWduO1xuXG5cbiAgICAgICAgICAgIGlmICghdGhpcy5pY29uICYmIGluY2x1ZGVzKHRoaXMuc3JjLCAnIycpKSB7XG4gICAgICAgICAgICAgICAgKGFzc2lnbiA9IHRoaXMuc3JjLnNwbGl0KCcjJyksIHRoaXMuc3JjID0gYXNzaWduWzBdLCB0aGlzLmljb24gPSBhc3NpZ25bMV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN2ZyA9IHRoaXMuZ2V0U3ZnKCkudGhlbihmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzJDEuYXBwbHlBdHRyaWJ1dGVzKGVsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcyQxLnN2Z0VsID0gaW5zZXJ0U1ZHKGVsLCB0aGlzJDEuJGVsKTtcbiAgICAgICAgICAgIH0sIG5vb3ApO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgIGlmIChpc1ZvaWRFbGVtZW50KHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgIGF0dHIodGhpcy4kZWwsICdoaWRkZW4nLCBudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc3ZnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdmcudGhlbihmdW5jdGlvbiAoc3ZnKSB7IHJldHVybiAoIXRoaXMkMS5fY29ubmVjdGVkIHx8IHN2ZyAhPT0gdGhpcyQxLnN2Z0VsKSAmJiByZW1vdmUoc3ZnKTsgfSwgbm9vcCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc3ZnID0gdGhpcy5zdmdFbCA9IG51bGw7XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKHRoaXMuc3Ryb2tlQW5pbWF0aW9uICYmIHRoaXMuc3ZnRWwgJiYgaXNWaXNpYmxlKHRoaXMuc3ZnRWwpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhcHBseUFuaW1hdGlvbih0aGlzLnN2Z0VsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHR5cGU6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgZ2V0U3ZnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkU1ZHKHRoaXMuc3JjKS50aGVuKGZ1bmN0aW9uIChzdmcpIHsgcmV0dXJuIHBhcnNlU1ZHKHN2ZywgdGhpcyQxLmljb24pIHx8IFByb21pc2UucmVqZWN0KCdTVkcgbm90IGZvdW5kLicpOyB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFwcGx5QXR0cmlidXRlczogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW3Byb3BdICYmIGluY2x1ZGVzKHRoaXMuaW5jbHVkZSwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIoZWwsIHByb3AsIHRoaXNbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0uc3BsaXQoJzonLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AkMSA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVmWzFdO1xuICAgICAgICAgICAgICAgICAgICBhdHRyKGVsLCBwcm9wJDEsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXR0cihlbCwgJ2lkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHByb3BzID0gWyd3aWR0aCcsICdoZWlnaHQnXTtcbiAgICAgICAgICAgICAgICB2YXIgZGltZW5zaW9ucyA9IFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF07XG5cbiAgICAgICAgICAgICAgICBpZiAoIWRpbWVuc2lvbnMuc29tZShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWw7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbnMgPSBwcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIGF0dHIoZWwsIHByb3ApOyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdmlld0JveCA9IGF0dHIoZWwsICd2aWV3Qm94Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHZpZXdCb3ggJiYgIWRpbWVuc2lvbnMuc29tZShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWw7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbnMgPSB2aWV3Qm94LnNwbGl0KCcgJykuc2xpY2UoMik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGltZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gKHZhbCB8IDApICogdGhpcyQxLnJhdGlvO1xuICAgICAgICAgICAgICAgICAgICB2YWwgJiYgYXR0cihlbCwgcHJvcHNbaV0sIHZhbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCAmJiAhZGltZW5zaW9uc1tpIF4gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUF0dHIoZWwsIHByb3BzW2kgXiAxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGF0dHIoZWwsICdkYXRhLXN2ZycsIHRoaXMuaWNvbiB8fCB0aGlzLnNyYyk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHN2Z3MgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGxvYWRTVkcoc3JjKSB7XG5cbiAgICAgICAgaWYgKHN2Z3Nbc3JjXSkge1xuICAgICAgICAgICAgcmV0dXJuIHN2Z3Nbc3JjXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdmdzW3NyY10gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgIGlmICghc3JjKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RhcnRzV2l0aChzcmMsICdkYXRhOicpKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkZWNvZGVVUklDb21wb25lbnQoc3JjLnNwbGl0KCcsJylbMV0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBhamF4KHNyYykudGhlbihcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHhocikgeyByZXR1cm4gcmVzb2x2ZSh4aHIucmVzcG9uc2UpOyB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QoJ1NWRyBub3QgZm91bmQuJyk7IH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTVkcoc3ZnLCBpY29uKSB7XG5cbiAgICAgICAgaWYgKGljb24gJiYgaW5jbHVkZXMoc3ZnLCAnPHN5bWJvbCcpKSB7XG4gICAgICAgICAgICBzdmcgPSBwYXJzZVN5bWJvbHMoc3ZnLCBpY29uKSB8fCBzdmc7XG4gICAgICAgIH1cblxuICAgICAgICBzdmcgPSAkKHN2Zy5zdWJzdHIoc3ZnLmluZGV4T2YoJzxzdmcnKSkpO1xuICAgICAgICByZXR1cm4gc3ZnICYmIHN2Zy5oYXNDaGlsZE5vZGVzKCkgJiYgc3ZnO1xuICAgIH1cblxuICAgIHZhciBzeW1ib2xSZSA9IC88c3ltYm9sKFteXSo/aWQ9KFsnXCJdKSguKz8pXFwyW15dKj88XFwvKXN5bWJvbD4vZztcbiAgICB2YXIgc3ltYm9scyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gcGFyc2VTeW1ib2xzKHN2ZywgaWNvbikge1xuXG4gICAgICAgIGlmICghc3ltYm9sc1tzdmddKSB7XG5cbiAgICAgICAgICAgIHN5bWJvbHNbc3ZnXSA9IHt9O1xuXG4gICAgICAgICAgICBzeW1ib2xSZS5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gc3ltYm9sUmUuZXhlYyhzdmcpKSkge1xuICAgICAgICAgICAgICAgIHN5bWJvbHNbc3ZnXVttYXRjaFszXV0gPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlwiICsgKG1hdGNoWzFdKSArIFwic3ZnPlwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3ltYm9sc1tzdmddW2ljb25dO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uKGVsKSB7XG5cbiAgICAgICAgdmFyIGxlbmd0aCA9IGdldE1heFBhdGhMZW5ndGgoZWwpO1xuXG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCctLXVrLWFuaW1hdGlvbi1zdHJva2UnLCBsZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXhQYXRoTGVuZ3RoKGVsKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5tYXguYXBwbHkoTWF0aCwgWyAwIF0uY29uY2F0KCAkJCgnW3N0cm9rZV0nLCBlbCkubWFwKGZ1bmN0aW9uIChzdHJva2UpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cm9rZS5nZXRUb3RhbExlbmd0aCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSApKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zZXJ0U1ZHKGVsLCByb290KSB7XG5cbiAgICAgICAgaWYgKGlzVm9pZEVsZW1lbnQocm9vdCkgfHwgcm9vdC50YWdOYW1lID09PSAnQ0FOVkFTJykge1xuXG4gICAgICAgICAgICBhdHRyKHJvb3QsICdoaWRkZW4nLCB0cnVlKTtcblxuICAgICAgICAgICAgdmFyIG5leHQgPSByb290Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIHJldHVybiBlcXVhbHMoZWwsIG5leHQpXG4gICAgICAgICAgICAgICAgPyBuZXh0XG4gICAgICAgICAgICAgICAgOiBhZnRlcihyb290LCBlbCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsYXN0ID0gcm9vdC5sYXN0RWxlbWVudENoaWxkO1xuICAgICAgICByZXR1cm4gZXF1YWxzKGVsLCBsYXN0KVxuICAgICAgICAgICAgPyBsYXN0XG4gICAgICAgICAgICA6IGFwcGVuZChyb290LCBlbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXF1YWxzKGVsLCBvdGhlcikge1xuICAgICAgICByZXR1cm4gYXR0cihlbCwgJ2RhdGEtc3ZnJykgPT09IGF0dHIob3RoZXIsICdkYXRhLXN2ZycpO1xuICAgIH1cblxuICAgIHZhciBjbG9zZUljb24gPSBcIjxzdmcgd2lkdGg9XFxcIjE0XFxcIiBoZWlnaHQ9XFxcIjE0XFxcIiB2aWV3Qm94PVxcXCIwIDAgMTQgMTRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgeDE9XFxcIjFcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMTNcXFwiIHkyPVxcXCIxM1xcXCIvPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjFcXFwiIHgxPVxcXCIxM1xcXCIgeTE9XFxcIjFcXFwiIHgyPVxcXCIxXFxcIiB5Mj1cXFwiMTNcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBjbG9zZUxhcmdlID0gXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjRcXFwiIHgxPVxcXCIxXFxcIiB5MT1cXFwiMVxcXCIgeDI9XFxcIjE5XFxcIiB5Mj1cXFwiMTlcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS40XFxcIiB4MT1cXFwiMTlcXFwiIHkxPVxcXCIxXFxcIiB4Mj1cXFwiMVxcXCIgeTI9XFxcIjE5XFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgbWFya2VyID0gXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxyZWN0IHg9XFxcIjlcXFwiIHk9XFxcIjRcXFwiIHdpZHRoPVxcXCIxXFxcIiBoZWlnaHQ9XFxcIjExXFxcIi8+PHJlY3QgeD1cXFwiNFxcXCIgeT1cXFwiOVxcXCIgd2lkdGg9XFxcIjExXFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBuYXZiYXJUb2dnbGVJY29uID0gXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxyZWN0IHk9XFxcIjlcXFwiIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyXFxcIi8+PHJlY3QgeT1cXFwiM1xcXCIgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjJcXFwiLz48cmVjdCB5PVxcXCIxNVxcXCIgd2lkdGg9XFxcIjIwXFxcIiBoZWlnaHQ9XFxcIjJcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBvdmVybGF5SWNvbiA9IFwiPHN2ZyB3aWR0aD1cXFwiNDBcXFwiIGhlaWdodD1cXFwiNDBcXFwiIHZpZXdCb3g9XFxcIjAgMCA0MCA0MFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cmVjdCB4PVxcXCIxOVxcXCIgeT1cXFwiMFxcXCIgd2lkdGg9XFxcIjFcXFwiIGhlaWdodD1cXFwiNDBcXFwiLz48cmVjdCB4PVxcXCIwXFxcIiB5PVxcXCIxOVxcXCIgd2lkdGg9XFxcIjQwXFxcIiBoZWlnaHQ9XFxcIjFcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBwYWdpbmF0aW9uTmV4dCA9IFwiPHN2ZyB3aWR0aD1cXFwiN1xcXCIgaGVpZ2h0PVxcXCIxMlxcXCIgdmlld0JveD1cXFwiMCAwIDcgMTJcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjJcXFwiIHBvaW50cz1cXFwiMSAxIDYgNiAxIDExXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgcGFnaW5hdGlvblByZXZpb3VzID0gXCI8c3ZnIHdpZHRoPVxcXCI3XFxcIiBoZWlnaHQ9XFxcIjEyXFxcIiB2aWV3Qm94PVxcXCIwIDAgNyAxMlxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMlxcXCIgcG9pbnRzPVxcXCI2IDEgMSA2IDYgMTFcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBzZWFyY2hJY29uID0gXCI8c3ZnIHdpZHRoPVxcXCIyMFxcXCIgaGVpZ2h0PVxcXCIyMFxcXCIgdmlld0JveD1cXFwiMCAwIDIwIDIwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjlcXFwiIGN5PVxcXCI5XFxcIiByPVxcXCI3XFxcIi8+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgZD1cXFwiTTE0LDE0IEwxOCwxOCBMMTQsMTQgWlxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIHNlYXJjaExhcmdlID0gXCI8c3ZnIHdpZHRoPVxcXCI0MFxcXCIgaGVpZ2h0PVxcXCI0MFxcXCIgdmlld0JveD1cXFwiMCAwIDQwIDQwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuOFxcXCIgY3g9XFxcIjE3LjVcXFwiIGN5PVxcXCIxNy41XFxcIiByPVxcXCIxNi41XFxcIi8+PGxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuOFxcXCIgeDE9XFxcIjM4XFxcIiB5MT1cXFwiMzlcXFwiIHgyPVxcXCIyOVxcXCIgeTI9XFxcIjMwXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgc2VhcmNoTmF2YmFyID0gXCI8c3ZnIHdpZHRoPVxcXCIyNFxcXCIgaGVpZ2h0PVxcXCIyNFxcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMVxcXCIgY3g9XFxcIjEwLjVcXFwiIGN5PVxcXCIxMC41XFxcIiByPVxcXCI5LjVcXFwiLz48bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS4xXFxcIiB4MT1cXFwiMjNcXFwiIHkxPVxcXCIyM1xcXCIgeDI9XFxcIjE3XFxcIiB5Mj1cXFwiMTdcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBzbGlkZW5hdk5leHQgPSBcIjxzdmcgd2lkdGg9XFxcIjE0cHhcXFwiIGhlaWdodD1cXFwiMjRweFxcXCIgdmlld0JveD1cXFwiMCAwIDE0IDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwb2x5bGluZSBmaWxsPVxcXCJub25lXFxcIiBzdHJva2U9XFxcIiMwMDBcXFwiIHN0cm9rZS13aWR0aD1cXFwiMS40XFxcIiBwb2ludHM9XFxcIjEuMjI1LDIzIDEyLjc3NSwxMiAxLjIyNSwxIFxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIHNsaWRlbmF2TmV4dExhcmdlID0gXCI8c3ZnIHdpZHRoPVxcXCIyNXB4XFxcIiBoZWlnaHQ9XFxcIjQwcHhcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNSA0MFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjJcXFwiIHBvaW50cz1cXFwiNC4wMDIsMzguNTQ3IDIyLjUyNywyMC4wMjQgNCwxLjUgXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgc2xpZGVuYXZQcmV2aW91cyA9IFwiPHN2ZyB3aWR0aD1cXFwiMTRweFxcXCIgaGVpZ2h0PVxcXCIyNHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMTQgMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjRcXFwiIHBvaW50cz1cXFwiMTIuNzc1LDEgMS4yMjUsMTIgMTIuNzc1LDIzIFxcXCIvPjwvc3ZnPlwiO1xuXG4gICAgdmFyIHNsaWRlbmF2UHJldmlvdXNMYXJnZSA9IFwiPHN2ZyB3aWR0aD1cXFwiMjVweFxcXCIgaGVpZ2h0PVxcXCI0MHB4XFxcIiB2aWV3Qm94PVxcXCIwIDAgMjUgNDBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBvbHlsaW5lIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiIzAwMFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIyXFxcIiBwb2ludHM9XFxcIjIwLjUyNywxLjUgMiwyMC4wMjQgMjAuNTI1LDM4LjU0NyBcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciBzcGlubmVyID0gXCI8c3ZnIHdpZHRoPVxcXCIzMFxcXCIgaGVpZ2h0PVxcXCIzMFxcXCIgdmlld0JveD1cXFwiMCAwIDMwIDMwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBjeD1cXFwiMTVcXFwiIGN5PVxcXCIxNVxcXCIgcj1cXFwiMTRcXFwiLz48L3N2Zz5cIjtcblxuICAgIHZhciB0b3RvcCA9IFwiPHN2ZyB3aWR0aD1cXFwiMThcXFwiIGhlaWdodD1cXFwiMTBcXFwiIHZpZXdCb3g9XFxcIjAgMCAxOCAxMFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cG9seWxpbmUgZmlsbD1cXFwibm9uZVxcXCIgc3Ryb2tlPVxcXCIjMDAwXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuMlxcXCIgcG9pbnRzPVxcXCIxIDkgOSAxIDE3IDkgXFxcIi8+PC9zdmc+XCI7XG5cbiAgICB2YXIgaWNvbnMgPSB7XG4gICAgICAgIHNwaW5uZXI6IHNwaW5uZXIsXG4gICAgICAgIHRvdG9wOiB0b3RvcCxcbiAgICAgICAgbWFya2VyOiBtYXJrZXIsXG4gICAgICAgICdjbG9zZS1pY29uJzogY2xvc2VJY29uLFxuICAgICAgICAnY2xvc2UtbGFyZ2UnOiBjbG9zZUxhcmdlLFxuICAgICAgICAnbmF2YmFyLXRvZ2dsZS1pY29uJzogbmF2YmFyVG9nZ2xlSWNvbixcbiAgICAgICAgJ292ZXJsYXktaWNvbic6IG92ZXJsYXlJY29uLFxuICAgICAgICAncGFnaW5hdGlvbi1uZXh0JzogcGFnaW5hdGlvbk5leHQsXG4gICAgICAgICdwYWdpbmF0aW9uLXByZXZpb3VzJzogcGFnaW5hdGlvblByZXZpb3VzLFxuICAgICAgICAnc2VhcmNoLWljb24nOiBzZWFyY2hJY29uLFxuICAgICAgICAnc2VhcmNoLWxhcmdlJzogc2VhcmNoTGFyZ2UsXG4gICAgICAgICdzZWFyY2gtbmF2YmFyJzogc2VhcmNoTmF2YmFyLFxuICAgICAgICAnc2xpZGVuYXYtbmV4dCc6IHNsaWRlbmF2TmV4dCxcbiAgICAgICAgJ3NsaWRlbmF2LW5leHQtbGFyZ2UnOiBzbGlkZW5hdk5leHRMYXJnZSxcbiAgICAgICAgJ3NsaWRlbmF2LXByZXZpb3VzJzogc2xpZGVuYXZQcmV2aW91cyxcbiAgICAgICAgJ3NsaWRlbmF2LXByZXZpb3VzLWxhcmdlJzogc2xpZGVuYXZQcmV2aW91c0xhcmdlXG4gICAgfTtcblxuICAgIHZhciBJY29uID0ge1xuXG4gICAgICAgIGluc3RhbGw6IGluc3RhbGwsXG5cbiAgICAgICAgZXh0ZW5kczogU1ZHLFxuXG4gICAgICAgIGFyZ3M6ICdpY29uJyxcblxuICAgICAgICBwcm9wczogWydpY29uJ10sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgaW5jbHVkZTogWydmb2N1c2FibGUnXVxuICAgICAgICB9LFxuXG4gICAgICAgIGlzSWNvbjogdHJ1ZSxcblxuICAgICAgICBiZWZvcmVDb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCAndWstaWNvbicpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgZ2V0U3ZnOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpY29uID0gZ2V0SWNvbih0aGlzLmljb24pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpY29uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnSWNvbiBub3QgZm91bmQuJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShpY29uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIEljb25Db21wb25lbnQgPSB7XG5cbiAgICAgICAgYXJnczogZmFsc2UsXG5cbiAgICAgICAgZXh0ZW5kczogSWNvbixcblxuICAgICAgICBkYXRhOiBmdW5jdGlvbiAodm0pIHsgcmV0dXJuICh7XG4gICAgICAgICAgICBpY29uOiBoeXBoZW5hdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucy5uYW1lKVxuICAgICAgICB9KTsgfSxcblxuICAgICAgICBiZWZvcmVDb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCB0aGlzLiRuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBTbGlkZW5hdiA9IHtcblxuICAgICAgICBleHRlbmRzOiBJY29uQ29tcG9uZW50LFxuXG4gICAgICAgIGJlZm9yZUNvbm5lY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsICd1ay1zbGlkZW5hdicpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGljb246IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGljb24gPSByZWYuaWNvbjtcblxuICAgICAgICAgICAgICAgIHJldHVybiBoYXNDbGFzcygkZWwsICd1ay1zbGlkZW5hdi1sYXJnZScpXG4gICAgICAgICAgICAgICAgICAgID8gKGljb24gKyBcIi1sYXJnZVwiKVxuICAgICAgICAgICAgICAgICAgICA6IGljb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBTZWFyY2ggPSB7XG5cbiAgICAgICAgZXh0ZW5kczogSWNvbkNvbXBvbmVudCxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBpY29uOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBpY29uID0gcmVmLmljb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzQ2xhc3MoJGVsLCAndWstc2VhcmNoLWljb24nKSAmJiBwYXJlbnRzKCRlbCwgJy51ay1zZWFyY2gtbGFyZ2UnKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyAnc2VhcmNoLWxhcmdlJ1xuICAgICAgICAgICAgICAgICAgICA6IHBhcmVudHMoJGVsLCAnLnVrLXNlYXJjaC1uYXZiYXInKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3NlYXJjaC1uYXZiYXInXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGljb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBDbG9zZSA9IHtcblxuICAgICAgICBleHRlbmRzOiBJY29uQ29tcG9uZW50LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGljb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXCJjbG9zZS1cIiArIChoYXNDbGFzcyh0aGlzLiRlbCwgJ3VrLWNsb3NlLWxhcmdlJykgPyAnbGFyZ2UnIDogJ2ljb24nKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBTcGlubmVyID0ge1xuXG4gICAgICAgIGV4dGVuZHM6IEljb25Db21wb25lbnQsXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLnN2Zy50aGVuKGZ1bmN0aW9uIChzdmcpIHsgcmV0dXJuIHRoaXMkMS5yYXRpbyAhPT0gMSAmJiBjc3MoJCgnY2lyY2xlJywgc3ZnKSwgJ3N0cm9rZVdpZHRoJywgMSAvIHRoaXMkMS5yYXRpbyk7IH0sIG5vb3ApO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHBhcnNlZCA9IHt9O1xuICAgIGZ1bmN0aW9uIGluc3RhbGwoVUlraXQpIHtcbiAgICAgICAgVUlraXQuaWNvbi5hZGQgPSBmdW5jdGlvbiAobmFtZSwgc3ZnKSB7XG4gICAgICAgICAgICB2YXIgb2JqO1xuXG5cbiAgICAgICAgICAgIHZhciBhZGRlZCA9IGlzU3RyaW5nKG5hbWUpID8gKCggb2JqID0ge30sIG9ialtuYW1lXSA9IHN2Zywgb2JqICkpIDogbmFtZTtcbiAgICAgICAgICAgIGVhY2goYWRkZWQsIGZ1bmN0aW9uIChzdmcsIG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpY29uc1tuYW1lXSA9IHN2ZztcbiAgICAgICAgICAgICAgICBkZWxldGUgcGFyc2VkW25hbWVdO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChVSWtpdC5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICBhcHBseShkb2N1bWVudC5ib2R5LCBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVhY2goVUlraXQuZ2V0Q29tcG9uZW50cyhlbCksIGZ1bmN0aW9uIChjbXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtcC4kb3B0aW9ucy5pc0ljb24gJiYgY21wLmljb24gaW4gYWRkZWQgJiYgY21wLiRyZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTsgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SWNvbihpY29uKSB7XG5cbiAgICAgICAgaWYgKCFpY29uc1tpY29uXSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBhcnNlZFtpY29uXSkge1xuICAgICAgICAgICAgcGFyc2VkW2ljb25dID0gJCgoaWNvbnNbYXBwbHlSdGwoaWNvbildIHx8IGljb25zW2ljb25dKS50cmltKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZFtpY29uXS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlSdGwoaWNvbikge1xuICAgICAgICByZXR1cm4gaXNSdGwgPyBzd2FwKHN3YXAoaWNvbiwgJ2xlZnQnLCAncmlnaHQnKSwgJ3ByZXZpb3VzJywgJ25leHQnKSA6IGljb247XG4gICAgfVxuXG4gICAgdmFyIGltZyA9IHtcblxuICAgICAgICBhcmdzOiAnZGF0YVNyYycsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGRhdGFTcmM6IFN0cmluZyxcbiAgICAgICAgICAgIGRhdGFTcmNzZXQ6IEJvb2xlYW4sXG4gICAgICAgICAgICBzaXplczogU3RyaW5nLFxuICAgICAgICAgICAgd2lkdGg6IE51bWJlcixcbiAgICAgICAgICAgIGhlaWdodDogTnVtYmVyLFxuICAgICAgICAgICAgb2Zmc2V0VG9wOiBTdHJpbmcsXG4gICAgICAgICAgICBvZmZzZXRMZWZ0OiBTdHJpbmcsXG4gICAgICAgICAgICB0YXJnZXQ6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGRhdGFTcmM6ICcnLFxuICAgICAgICAgICAgZGF0YVNyY3NldDogZmFsc2UsXG4gICAgICAgICAgICBzaXplczogZmFsc2UsXG4gICAgICAgICAgICB3aWR0aDogZmFsc2UsXG4gICAgICAgICAgICBoZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgb2Zmc2V0VG9wOiAnNTB2aCcsXG4gICAgICAgICAgICBvZmZzZXRMZWZ0OiAwLFxuICAgICAgICAgICAgdGFyZ2V0OiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGNhY2hlS2V5OiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVNyYyA9IHJlZi5kYXRhU3JjO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICgodGhpcy4kbmFtZSkgKyBcIi5cIiArIGRhdGFTcmMpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd2lkdGg6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVdpZHRoID0gcmVmLmRhdGFXaWR0aDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB3aWR0aCB8fCBkYXRhV2lkdGg7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciBkYXRhSGVpZ2h0ID0gcmVmLmRhdGFIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0IHx8IGRhdGFIZWlnaHQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzaXplczogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gcmVmLnNpemVzO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhU2l6ZXMgPSByZWYuZGF0YVNpemVzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpemVzIHx8IGRhdGFTaXplcztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzSW1nOiBmdW5jdGlvbihfLCAkZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNJbWcoJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRhcmdldDoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLiRlbCBdLmNvbmNhdCggcXVlcnlBbGwodGFyZ2V0LCB0aGlzLiRlbCkpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgb2Zmc2V0VG9wOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0VG9wID0gcmVmLm9mZnNldFRvcDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0b1B4KG9mZnNldFRvcCwgJ2hlaWdodCcpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgb2Zmc2V0TGVmdDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldExlZnQgPSByZWYub2Zmc2V0TGVmdDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0b1B4KG9mZnNldExlZnQsICd3aWR0aCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKHN0b3JhZ2VbdGhpcy5jYWNoZUtleV0pIHtcbiAgICAgICAgICAgICAgICBzZXRTcmNBdHRycyh0aGlzLiRlbCwgc3RvcmFnZVt0aGlzLmNhY2hlS2V5XSB8fCB0aGlzLmRhdGFTcmMsIHRoaXMuZGF0YVNyY3NldCwgdGhpcy5zaXplcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJbWcgJiYgdGhpcy53aWR0aCAmJiB0aGlzLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIHNldFNyY0F0dHJzKHRoaXMuJGVsLCBnZXRQbGFjZWhvbGRlckltYWdlKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLnNpemVzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIodGhpcy5sb2FkLCB7XG4gICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogKCh0aGlzLm9mZnNldFRvcCkgKyBcInB4IFwiICsgKHRoaXMub2Zmc2V0TGVmdCkgKyBcInB4XCIpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMub2JzZXJ2ZSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiB7XG5cbiAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IHJlZi5pbWFnZTtcblxuXG4gICAgICAgICAgICAgICAgaWYgKCFpbWFnZSAmJiBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZCh0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSW1nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbWFnZSAmJiBpbWFnZS50aGVuKGZ1bmN0aW9uIChpbWcpIHsgcmV0dXJuIGltZyAmJiBpbWcuY3VycmVudFNyYyAhPT0gJycgJiYgc2V0U3JjQXR0cnModGhpcyQxLiRlbCwgY3VycmVudFNyYyhpbWcpKTsgfSk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhU3Jjc2V0ICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICE9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGJnU2l6ZSA9IGNzcyh0aGlzLiRlbCwgJ2JhY2tncm91bmRTaXplJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiZ1NpemUubWF0Y2goL14oYXV0b1xccz8pKyQvKSB8fCB0b0Zsb2F0KGJnU2l6ZSkgPT09IGRhdGEuYmdTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmJnU2l6ZSA9IGdldFNvdXJjZVNpemUodGhpcy5kYXRhU3Jjc2V0LCB0aGlzLnNpemVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2JhY2tncm91bmRTaXplJywgKChkYXRhLmJnU2l6ZSkgKyBcInB4XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oZW50cmllcykge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICAvLyBPbGQgY2hyb21pdW0gYmFzZWQgYnJvd3NlcnMgKFVDIEJyb3dzZXIpIGRpZCBub3QgaW1wbGVtZW50IGBpc0ludGVyc2VjdGluZ2BcbiAgICAgICAgICAgICAgICBpZiAoIWVudHJpZXMuc29tZShmdW5jdGlvbiAoZW50cnkpIHsgcmV0dXJuIGlzVW5kZWZpbmVkKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB8fCBlbnRyeS5pc0ludGVyc2VjdGluZzsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEuaW1hZ2UgPSBnZXRJbWFnZSh0aGlzLmRhdGFTcmMsIHRoaXMuZGF0YVNyY3NldCwgdGhpcy5zaXplcykudGhlbihmdW5jdGlvbiAoaW1nKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0U3JjQXR0cnModGhpcyQxLiRlbCwgY3VycmVudFNyYyhpbWcpLCBpbWcuc3Jjc2V0LCBpbWcuc2l6ZXMpO1xuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlW3RoaXMkMS5jYWNoZUtleV0gPSBjdXJyZW50U3JjKGltZyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbWc7XG5cbiAgICAgICAgICAgICAgICB9LCBub29wKTtcblxuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgb2JzZXJ2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkICYmICF0aGlzLl9kYXRhLmltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiB0aGlzJDEub2JzZXJ2ZXIub2JzZXJ2ZShlbCk7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc2V0U3JjQXR0cnMoZWwsIHNyYywgc3Jjc2V0LCBzaXplcykge1xuXG4gICAgICAgIGlmIChpc0ltZyhlbCkpIHtcbiAgICAgICAgICAgIHNpemVzICYmIChlbC5zaXplcyA9IHNpemVzKTtcbiAgICAgICAgICAgIHNyY3NldCAmJiAoZWwuc3Jjc2V0ID0gc3Jjc2V0KTtcbiAgICAgICAgICAgIHNyYyAmJiAoZWwuc3JjID0gc3JjKTtcbiAgICAgICAgfSBlbHNlIGlmIChzcmMpIHtcblxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9ICFpbmNsdWRlcyhlbC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UsIHNyYyk7XG4gICAgICAgICAgICBpZiAoY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgY3NzKGVsLCAnYmFja2dyb3VuZEltYWdlJywgKFwidXJsKFwiICsgKGVzY2FwZShzcmMpKSArIFwiKVwiKSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcihlbCwgY3JlYXRlRXZlbnQoJ2xvYWQnLCBmYWxzZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBsYWNlaG9sZGVySW1hZ2Uod2lkdGgsIGhlaWdodCwgc2l6ZXMpIHtcbiAgICAgICAgdmFyIGFzc2lnbjtcblxuXG4gICAgICAgIGlmIChzaXplcykge1xuICAgICAgICAgICAgKChhc3NpZ24gPSBEaW1lbnNpb25zLnJhdGlvKHt3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0fSwgJ3dpZHRoJywgdG9QeChzaXplc1RvUGl4ZWwoc2l6ZXMpKSksIHdpZHRoID0gYXNzaWduLndpZHRoLCBoZWlnaHQgPSBhc3NpZ24uaGVpZ2h0KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFwiZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHdpZHRoPVxcXCJcIiArIHdpZHRoICsgXCJcXFwiIGhlaWdodD1cXFwiXCIgKyBoZWlnaHQgKyBcIlxcXCI+PC9zdmc+XCIpO1xuICAgIH1cblxuICAgIHZhciBzaXplc1JlID0gL1xccyooLio/KVxccyooXFx3K3xjYWxjXFwoLio/XFwpKVxccyooPzosfCQpL2c7XG4gICAgZnVuY3Rpb24gc2l6ZXNUb1BpeGVsKHNpemVzKSB7XG4gICAgICAgIHZhciBtYXRjaGVzO1xuXG4gICAgICAgIHNpemVzUmUubGFzdEluZGV4ID0gMDtcblxuICAgICAgICB3aGlsZSAoKG1hdGNoZXMgPSBzaXplc1JlLmV4ZWMoc2l6ZXMpKSkge1xuICAgICAgICAgICAgaWYgKCFtYXRjaGVzWzFdIHx8IHdpbmRvdy5tYXRjaE1lZGlhKG1hdGNoZXNbMV0pLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzID0gZXZhbHVhdGVTaXplKG1hdGNoZXNbMl0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoZXMgfHwgJzEwMHZ3JztcbiAgICB9XG5cbiAgICB2YXIgc2l6ZVJlID0gL1xcZCsoPzpcXHcrfCUpL2c7XG4gICAgdmFyIGFkZGl0aW9uUmUgPSAvWystXT8oXFxkKykvZztcbiAgICBmdW5jdGlvbiBldmFsdWF0ZVNpemUoc2l6ZSkge1xuICAgICAgICByZXR1cm4gc3RhcnRzV2l0aChzaXplLCAnY2FsYycpXG4gICAgICAgICAgICA/IHNpemVcbiAgICAgICAgICAgICAgICAuc3Vic3RyaW5nKDUsIHNpemUubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZShzaXplUmUsIGZ1bmN0aW9uIChzaXplKSB7IHJldHVybiB0b1B4KHNpemUpOyB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8gL2csICcnKVxuICAgICAgICAgICAgICAgIC5tYXRjaChhZGRpdGlvblJlKVxuICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgKyArYjsgfSwgMClcbiAgICAgICAgICAgIDogc2l6ZTtcbiAgICB9XG5cbiAgICB2YXIgc3JjU2V0UmUgPSAvXFxzK1xcZCt3XFxzKig/Oix8JCkvZztcbiAgICBmdW5jdGlvbiBnZXRTb3VyY2VTaXplKHNyY3NldCwgc2l6ZXMpIHtcbiAgICAgICAgdmFyIHNyY1NpemUgPSB0b1B4KHNpemVzVG9QaXhlbChzaXplcykpO1xuICAgICAgICB2YXIgZGVzY3JpcHRvcnMgPSAoc3Jjc2V0Lm1hdGNoKHNyY1NldFJlKSB8fCBbXSkubWFwKHRvRmxvYXQpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgLSBiOyB9KTtcblxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcnMuZmlsdGVyKGZ1bmN0aW9uIChzaXplKSB7IHJldHVybiBzaXplID49IHNyY1NpemU7IH0pWzBdIHx8IGRlc2NyaXB0b3JzLnBvcCgpIHx8ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSW1nKGVsKSB7XG4gICAgICAgIHJldHVybiBlbC50YWdOYW1lID09PSAnSU1HJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50U3JjKGVsKSB7XG4gICAgICAgIHJldHVybiBlbC5jdXJyZW50U3JjIHx8IGVsLnNyYztcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gJ19fdGVzdF9fJztcbiAgICB2YXIgc3RvcmFnZTtcblxuICAgIC8vIHdvcmthcm91bmQgZm9yIFNhZmFyaSdzIHByaXZhdGUgYnJvd3NpbmcgbW9kZSBhbmQgYWNjZXNzaW5nIHNlc3Npb25TdG9yYWdlIGluIEJsaW5rXG4gICAgdHJ5IHtcbiAgICAgICAgc3RvcmFnZSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZSB8fCB7fTtcbiAgICAgICAgc3RvcmFnZVtrZXldID0gMTtcbiAgICAgICAgZGVsZXRlIHN0b3JhZ2Vba2V5XTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHN0b3JhZ2UgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgTWVkaWEgPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIG1lZGlhOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbWVkaWE6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgbWF0Y2hNZWRpYTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lZGlhID0gdG9NZWRpYSh0aGlzLm1lZGlhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gIW1lZGlhIHx8IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhKS5tYXRjaGVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiB0b01lZGlhKHZhbHVlKSB7XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlWzBdID09PSAnQCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IFwiYnJlYWtwb2ludC1cIiArICh2YWx1ZS5zdWJzdHIoMSkpO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9GbG9hdChnZXRDc3NWYXIobmFtZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUgJiYgIWlzTmFOKHZhbHVlKSA/IChcIihtaW4td2lkdGg6IFwiICsgdmFsdWUgKyBcInB4KVwiKSA6IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsZWFkZXIgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3MsIE1lZGlhXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgZmlsbDogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZmlsbDogJycsXG4gICAgICAgICAgICBjbHNXcmFwcGVyOiAndWstbGVhZGVyLWZpbGwnLFxuICAgICAgICAgICAgY2xzSGlkZTogJ3VrLWxlYWRlci1oaWRlJyxcbiAgICAgICAgICAgIGF0dHJGaWxsOiAnZGF0YS1maWxsJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGZpbGw6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBmaWxsID0gcmVmLmZpbGw7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsbCB8fCBnZXRDc3NWYXIoJ2xlYWRlci1maWxsLWNvbnRlbnQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYXNzaWduO1xuXG4gICAgICAgICAgICAoYXNzaWduID0gd3JhcElubmVyKHRoaXMuJGVsLCAoXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyAodGhpcy5jbHNXcmFwcGVyKSArIFwiXFxcIj5cIikpLCB0aGlzLndyYXBwZXIgPSBhc3NpZ25bMF0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1bndyYXAodGhpcy53cmFwcGVyLmNoaWxkTm9kZXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlZCA9IHJlZi5jaGFuZ2VkO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcblxuXG4gICAgICAgICAgICAgICAgdmFyIHByZXYgPSB3aWR0aDtcblxuICAgICAgICAgICAgICAgIHdpZHRoID0gTWF0aC5mbG9vcih0aGlzLiRlbC5vZmZzZXRXaWR0aCAvIDIpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiB0aGlzLmZpbGwsXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQ6IGNoYW5nZWQgfHwgcHJldiAhPT0gd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhpZGU6ICF0aGlzLm1hdGNoTWVkaWFcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMud3JhcHBlciwgdGhpcy5jbHNIaWRlLCBkYXRhLmhpZGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYXR0cih0aGlzLndyYXBwZXIsIHRoaXMuYXR0ckZpbGwsIG5ldyBBcnJheShkYXRhLndpZHRoKS5qb2luKGRhdGEuZmlsbCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBDb250YWluZXIgPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNvbnRhaW5lcjogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNvbnRhaW5lcjogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lcjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHJlZi5jb250YWluZXI7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyID09PSB0cnVlICYmIHRoaXMuJGNvbnRhaW5lciB8fCBjb250YWluZXIgJiYgJChjb250YWluZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgYWN0aXZlJDEgPSBbXTtcblxuICAgIHZhciBNb2RhbCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgQ29udGFpbmVyLCBUb2dnbGFibGVdLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBzZWxQYW5lbDogU3RyaW5nLFxuICAgICAgICAgICAgc2VsQ2xvc2U6IFN0cmluZyxcbiAgICAgICAgICAgIGVzY0Nsb3NlOiBCb29sZWFuLFxuICAgICAgICAgICAgYmdDbG9zZTogQm9vbGVhbixcbiAgICAgICAgICAgIHN0YWNrOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY2xzOiAndWstb3BlbicsXG4gICAgICAgICAgICBlc2NDbG9zZTogdHJ1ZSxcbiAgICAgICAgICAgIGJnQ2xvc2U6IHRydWUsXG4gICAgICAgICAgICBvdmVybGF5OiB0cnVlLFxuICAgICAgICAgICAgc3RhY2s6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgcGFuZWw6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbFBhbmVsID0gcmVmLnNlbFBhbmVsO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoc2VsUGFuZWwsICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFuZWw7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBiZ0Nsb3NlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmdDbG9zZSA9IHJlZi5iZ0Nsb3NlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJnQ2xvc2UgJiYgdGhpcy5wYW5lbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGJlZm9yZURpc2Nvbm5lY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUVsZW1lbnQodGhpcy4kZWwsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbENsb3NlO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAndG9nZ2xlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlZCgpID09PSBpbmNsdWRlcyhhY3RpdmUkMSwgdGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnYmVmb3Jlc2hvdycsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlcyhhY3RpdmUkMSwgdGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zdGFjayAmJiBhY3RpdmUkMS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKGFjdGl2ZSQxLm1hcChmdW5jdGlvbiAobW9kYWwpIHsgcmV0dXJuIG1vZGFsLmhpZGUoKTsgfSkpLnRoZW4odGhpcy5zaG93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZSQxLnB1c2godGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdzaG93JyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGgod2luZG93KSAtIHdpZHRoKGRvY3VtZW50KSAmJiB0aGlzLm92ZXJsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAnb3ZlcmZsb3dZJywgJ3Njcm9sbCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjayAmJiBjc3ModGhpcy4kZWwsICd6SW5kZXgnLCBjc3ModGhpcy4kZWwsICd6SW5kZXgnKSArIGFjdGl2ZSQxLmxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmNsc1BhZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJnQ2xvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2UodGhpcy4kZWwsICdoaWRlJywgb24oZG9jdW1lbnQsIHBvaW50ZXJEb3duLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0KGFjdGl2ZSQxKSAhPT0gdGhpcyQxIHx8IHRoaXMkMS5vdmVybGF5ICYmICF3aXRoaW4odGFyZ2V0LCB0aGlzJDEuJGVsKSB8fCB3aXRoaW4odGFyZ2V0LCB0aGlzJDEucGFuZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNlKGRvY3VtZW50LCAocG9pbnRlclVwICsgXCIgXCIgKyBwb2ludGVyQ2FuY2VsICsgXCIgc2Nyb2xsXCIpLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkID0gcmVmLmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdUYXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGVmYXVsdFByZXZlbnRlZCAmJiB0eXBlID09PSBwb2ludGVyVXAgJiYgdGFyZ2V0ID09PSBuZXdUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIHtzZWxmOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lc2NDbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jZSh0aGlzLiRlbCwgJ2hpZGUnLCBvbihkb2N1bWVudCwgJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDI3ICYmIGxhc3QoYWN0aXZlJDEpID09PSB0aGlzJDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCB7c2VsZjogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnaGlkZGVuJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUkMS5zcGxpY2UoYWN0aXZlJDEuaW5kZXhPZih0aGlzKSwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUkMS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAnb3ZlcmZsb3dZJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCAnekluZGV4JywgJycpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWN0aXZlJDEuc29tZShmdW5jdGlvbiAobW9kYWwpIHsgcmV0dXJuIG1vZGFsLmNsc1BhZ2UgPT09IHRoaXMkMS5jbHNQYWdlOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmNsc1BhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc1RvZ2dsZWQoKSA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyICYmIHRoaXMuJGVsLnBhcmVudE5vZGUgIT09IHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZCh0aGlzLmNvbnRhaW5lciwgdGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuc2hvdygpLnRoZW4ocmVzb2x2ZSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7IH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b2dnbGVFbGVtZW50KHRoaXMuJGVsLCB0cnVlLCBhbmltYXRlJDEodGhpcykpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGlkZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlRWxlbWVudCh0aGlzLiRlbCwgZmFsc2UsIGFuaW1hdGUkMSh0aGlzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFuaW1hdGUkMShyZWYpIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25FbGVtZW50ID0gcmVmLnRyYW5zaXRpb25FbGVtZW50O1xuICAgICAgICB2YXIgX3RvZ2dsZSA9IHJlZi5fdG9nZ2xlO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWwsIHNob3cpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgcmV0dXJuIG9uY2UoZWwsICdzaG93IGhpZGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLl9yZWplY3QgJiYgZWwuX3JlamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBlbC5fcmVqZWN0ID0gcmVqZWN0O1xuXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGUoZWwsIHNob3cpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmYgPSBvbmNlKHRyYW5zaXRpb25FbGVtZW50LCAndHJhbnNpdGlvbnN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jZSh0cmFuc2l0aW9uRWxlbWVudCwgJ3RyYW5zaXRpb25lbmQgdHJhbnNpdGlvbmNhbmNlbCcsIHJlc29sdmUsIHtzZWxmOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgICAgICB9LCB7c2VsZjogdHJ1ZX0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2ZmKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRvTXMoY3NzKHRyYW5zaXRpb25FbGVtZW50LCAndHJhbnNpdGlvbkR1cmF0aW9uJykpKTtcblxuICAgICAgICAgICAgICAgIH0pOyB9XG4gICAgICAgICAgICApOyB9O1xuICAgIH1cblxuICAgIHZhciBtb2RhbCA9IHtcblxuICAgICAgICBpbnN0YWxsOiBpbnN0YWxsJDEsXG5cbiAgICAgICAgbWl4aW5zOiBbTW9kYWxdLFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNsc1BhZ2U6ICd1ay1tb2RhbC1wYWdlJyxcbiAgICAgICAgICAgIHNlbFBhbmVsOiAnLnVrLW1vZGFsLWRpYWxvZycsXG4gICAgICAgICAgICBzZWxDbG9zZTogJy51ay1tb2RhbC1jbG9zZSwgLnVrLW1vZGFsLWNsb3NlLWRlZmF1bHQsIC51ay1tb2RhbC1jbG9zZS1vdXRzaWRlLCAudWstbW9kYWwtY2xvc2UtZnVsbCdcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdzaG93JyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3ModGhpcy5wYW5lbCwgJ3VrLW1hcmdpbi1hdXRvLXZlcnRpY2FsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCAndWstZmxleCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCAnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0KHRoaXMuJGVsKTsgLy8gZm9yY2UgcmVmbG93XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRkZW4nLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCAndWstZmxleCcpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsJDEocmVmKSB7XG4gICAgICAgIHZhciBtb2RhbCA9IHJlZi5tb2RhbDtcblxuXG4gICAgICAgIG1vZGFsLmRpYWxvZyA9IGZ1bmN0aW9uIChjb250ZW50LCBvcHRpb25zKSB7XG5cbiAgICAgICAgICAgIHZhciBkaWFsb2cgPSBtb2RhbChcbiAgICAgICAgICAgICAgICAoXCI8ZGl2IGNsYXNzPVxcXCJ1ay1tb2RhbFxcXCI+IDxkaXYgY2xhc3M9XFxcInVrLW1vZGFsLWRpYWxvZ1xcXCI+XCIgKyBjb250ZW50ICsgXCI8L2Rpdj4gPC9kaXY+XCIpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGRpYWxvZy5zaG93KCk7XG5cbiAgICAgICAgICAgIG9uKGRpYWxvZy4kZWwsICdoaWRkZW4nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpYWxvZy4kZGVzdHJveSh0cnVlKTsgfVxuICAgICAgICAgICAgICAgICk7IH0sIHtzZWxmOiB0cnVlfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcmV0dXJuIGRpYWxvZztcbiAgICAgICAgfTtcblxuICAgICAgICBtb2RhbC5hbGVydCA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gb3BlbkRpYWxvZyhcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbHMgPSByZWYubGFiZWxzO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8ZGl2IGNsYXNzPVxcXCJ1ay1tb2RhbC1ib2R5XFxcIj5cIiArIChpc1N0cmluZyhtZXNzYWdlKSA/IG1lc3NhZ2UgOiBodG1sKG1lc3NhZ2UpKSArIFwiPC9kaXY+IDxkaXYgY2xhc3M9XFxcInVrLW1vZGFsLWZvb3RlciB1ay10ZXh0LXJpZ2h0XFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwidWstYnV0dG9uIHVrLWJ1dHRvbi1wcmltYXJ5IHVrLW1vZGFsLWNsb3NlXFxcIiBhdXRvZm9jdXM+XCIgKyAobGFiZWxzLm9rKSArIFwiPC9idXR0b24+IDwvZGl2PlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGVmZXJyZWQpIHsgcmV0dXJuIGRlZmVycmVkLnJlc29sdmUoKTsgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICBtb2RhbC5jb25maXJtID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcGVuRGlhbG9nKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVscyA9IHJlZi5sYWJlbHM7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjxmb3JtPiA8ZGl2IGNsYXNzPVxcXCJ1ay1tb2RhbC1ib2R5XFxcIj5cIiArIChpc1N0cmluZyhtZXNzYWdlKSA/IG1lc3NhZ2UgOiBodG1sKG1lc3NhZ2UpKSArIFwiPC9kaXY+IDxkaXYgY2xhc3M9XFxcInVrLW1vZGFsLWZvb3RlciB1ay10ZXh0LXJpZ2h0XFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwidWstYnV0dG9uIHVrLWJ1dHRvbi1kZWZhdWx0IHVrLW1vZGFsLWNsb3NlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiPlwiICsgKGxhYmVscy5jYW5jZWwpICsgXCI8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz1cXFwidWstYnV0dG9uIHVrLWJ1dHRvbi1wcmltYXJ5XFxcIiBhdXRvZm9jdXM+XCIgKyAobGFiZWxzLm9rKSArIFwiPC9idXR0b24+IDwvZGl2PiA8L2Zvcm0+XCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkZWZlcnJlZCkgeyByZXR1cm4gZGVmZXJyZWQucmVqZWN0KCk7IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbW9kYWwucHJvbXB0ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gb3BlbkRpYWxvZyhcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbHMgPSByZWYubGFiZWxzO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8Zm9ybSBjbGFzcz1cXFwidWstZm9ybS1zdGFja2VkXFxcIj4gPGRpdiBjbGFzcz1cXFwidWstbW9kYWwtYm9keVxcXCI+IDxsYWJlbD5cIiArIChpc1N0cmluZyhtZXNzYWdlKSA/IG1lc3NhZ2UgOiBodG1sKG1lc3NhZ2UpKSArIFwiPC9sYWJlbD4gPGlucHV0IGNsYXNzPVxcXCJ1ay1pbnB1dFxcXCIgdmFsdWU9XFxcIlwiICsgKHZhbHVlIHx8ICcnKSArIFwiXFxcIiBhdXRvZm9jdXM+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ1ay1tb2RhbC1mb290ZXIgdWstdGV4dC1yaWdodFxcXCI+IDxidXR0b24gY2xhc3M9XFxcInVrLWJ1dHRvbiB1ay1idXR0b24tZGVmYXVsdCB1ay1tb2RhbC1jbG9zZVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIj5cIiArIChsYWJlbHMuY2FuY2VsKSArIFwiPC9idXR0b24+IDxidXR0b24gY2xhc3M9XFxcInVrLWJ1dHRvbiB1ay1idXR0b24tcHJpbWFyeVxcXCI+XCIgKyAobGFiZWxzLm9rKSArIFwiPC9idXR0b24+IDwvZGl2PiA8L2Zvcm0+XCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkZWZlcnJlZCkgeyByZXR1cm4gZGVmZXJyZWQucmVzb2x2ZShudWxsKTsgfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGlhbG9nKSB7IHJldHVybiAkKCdpbnB1dCcsIGRpYWxvZy4kZWwpLnZhbHVlOyB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuXG4gICAgICAgIG1vZGFsLmxhYmVscyA9IHtcbiAgICAgICAgICAgIG9rOiAnT2snLFxuICAgICAgICAgICAgY2FuY2VsOiAnQ2FuY2VsJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIG9wZW5EaWFsb2codG1wbCwgb3B0aW9ucywgaGlkZUZuLCBzdWJtaXRGbikge1xuXG4gICAgICAgICAgICBvcHRpb25zID0gYXNzaWduKHtiZ0Nsb3NlOiBmYWxzZSwgZXNjQ2xvc2U6IHRydWUsIGxhYmVsczogbW9kYWwubGFiZWxzfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHZhciBkaWFsb2cgPSBtb2RhbC5kaWFsb2codG1wbChvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgICAgICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIG9uKGRpYWxvZy4kZWwsICdzdWJtaXQnLCAnZm9ybScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoc3VibWl0Rm4gJiYgc3VibWl0Rm4oZGlhbG9nKSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGRpYWxvZy5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb24oZGlhbG9nLiRlbCwgJ2hpZGUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiAhcmVzb2x2ZWQgJiYgaGlkZUZuKGRlZmVycmVkKTsgfSk7XG5cbiAgICAgICAgICAgIGRlZmVycmVkLnByb21pc2UuZGlhbG9nID0gZGlhbG9nO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdmFyIG5hdiA9IHtcblxuICAgICAgICBleHRlbmRzOiBBY2NvcmRpb24sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGFyZ2V0czogJz4gLnVrLXBhcmVudCcsXG4gICAgICAgICAgICB0b2dnbGU6ICc+IGEnLFxuICAgICAgICAgICAgY29udGVudDogJz4gdWwnXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgbmF2YmFyID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzLCBGbGV4QnVnXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgZHJvcGRvd246IFN0cmluZyxcbiAgICAgICAgICAgIG1vZGU6ICdsaXN0JyxcbiAgICAgICAgICAgIGFsaWduOiBTdHJpbmcsXG4gICAgICAgICAgICBvZmZzZXQ6IE51bWJlcixcbiAgICAgICAgICAgIGJvdW5kYXJ5OiBCb29sZWFuLFxuICAgICAgICAgICAgYm91bmRhcnlBbGlnbjogQm9vbGVhbixcbiAgICAgICAgICAgIGNsc0Ryb3A6IFN0cmluZyxcbiAgICAgICAgICAgIGRlbGF5U2hvdzogTnVtYmVyLFxuICAgICAgICAgICAgZGVsYXlIaWRlOiBOdW1iZXIsXG4gICAgICAgICAgICBkcm9wYmFyOiBCb29sZWFuLFxuICAgICAgICAgICAgZHJvcGJhck1vZGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRyb3BiYXJBbmNob3I6IEJvb2xlYW4sXG4gICAgICAgICAgICBkdXJhdGlvbjogTnVtYmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZHJvcGRvd246ICcudWstbmF2YmFyLW5hdiA+IGxpJyxcbiAgICAgICAgICAgIGFsaWduOiAhaXNSdGwgPyAnbGVmdCcgOiAncmlnaHQnLFxuICAgICAgICAgICAgY2xzRHJvcDogJ3VrLW5hdmJhci1kcm9wZG93bicsXG4gICAgICAgICAgICBtb2RlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvZmZzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRlbGF5U2hvdzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGVsYXlIaWRlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBib3VuZGFyeUFsaWduOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBmbGlwOiAneCcsXG4gICAgICAgICAgICBib3VuZGFyeTogdHJ1ZSxcbiAgICAgICAgICAgIGRyb3BiYXI6IGZhbHNlLFxuICAgICAgICAgICAgZHJvcGJhck1vZGU6ICdzbGlkZScsXG4gICAgICAgICAgICBkcm9wYmFyQW5jaG9yOiBmYWxzZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAsXG4gICAgICAgICAgICBmb3JjZUhlaWdodDogdHJ1ZSxcbiAgICAgICAgICAgIHNlbE1pbkhlaWdodDogJy51ay1uYXZiYXItbmF2ID4gbGkgPiBhLCAudWstbmF2YmFyLWl0ZW0sIC51ay1uYXZiYXItdG9nZ2xlJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGJvdW5kYXJ5OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBib3VuZGFyeSA9IHJlZi5ib3VuZGFyeTtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnlBbGlnbiA9IHJlZi5ib3VuZGFyeUFsaWduO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChib3VuZGFyeSA9PT0gdHJ1ZSB8fCBib3VuZGFyeUFsaWduKSA/ICRlbCA6IGJvdW5kYXJ5O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZHJvcGJhckFuY2hvcjogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHJvcGJhckFuY2hvciA9IHJlZi5kcm9wYmFyQW5jaG9yO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5KGRyb3BiYXJBbmNob3IsICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwb3M6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBhbGlnbiA9IHJlZi5hbGlnbjtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoXCJib3R0b20tXCIgKyBhbGlnbik7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkcm9wYmFyOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHJvcGJhciA9IHJlZi5kcm9wYmFyO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkcm9wYmFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRyb3BiYXIgPSB0aGlzLl9kcm9wYmFyIHx8IHF1ZXJ5KGRyb3BiYXIsIHRoaXMuJGVsKSB8fCAkKCcrIC51ay1uYXZiYXItZHJvcGJhcicsIHRoaXMuJGVsKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHJvcGJhciA/IGRyb3BiYXIgOiAodGhpcy5fZHJvcGJhciA9ICQoJzxkaXY+PC9kaXY+JykpO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbihkcm9wYmFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGRyb3BiYXIsICd1ay1uYXZiYXItZHJvcGJhcicpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBpbW1lZGlhdGU6IHRydWVcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZHJvcGRvd25zOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcm9wZG93biA9IHJlZi5kcm9wZG93bjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsc0Ryb3AgPSByZWYuY2xzRHJvcDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCQoKGRyb3Bkb3duICsgXCIgLlwiICsgY2xzRHJvcCksICRlbCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbihkcm9wZG93bnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY3JlYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Ryb3AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd25zLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICF0aGlzJDEuZ2V0RHJvcGRvd24oZWwpOyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbih7fSwgdGhpcy4kcHJvcHMsIHtib3VuZGFyeTogdGhpcy5ib3VuZGFyeSwgcG9zOiB0aGlzLnBvcywgb2Zmc2V0OiB0aGlzLmRyb3BiYXIgfHwgdGhpcy5vZmZzZXR9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBpbW1lZGlhdGU6IHRydWVcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZHJvcGJhciAmJiByZW1vdmUodGhpcy5kcm9wYmFyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kcm9wYmFyO1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ21vdXNlb3ZlcicsXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3Bkb3duO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSByZWYuY3VycmVudDtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlID0gdGhpcy5nZXRBY3RpdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSAmJiBhY3RpdmUudG9nZ2xlICYmICF3aXRoaW4oYWN0aXZlLnRvZ2dsZS4kZWwsIGN1cnJlbnQpICYmICFhY3RpdmUudHJhY2tlci5tb3Zlc1RvKGFjdGl2ZS4kZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnbW91c2VsZWF2ZScsXG5cbiAgICAgICAgICAgICAgICBlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3BiYXI7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlID0gdGhpcy5nZXRBY3RpdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlICYmICF0aGlzLmRyb3Bkb3ducy5zb21lKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gbWF0Y2hlcyhlbCwgJzpob3ZlcicpOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnYmVmb3Jlc2hvdycsXG5cbiAgICAgICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGJhcjtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyb3BiYXIucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIodGhpcy5kcm9wYmFyQW5jaG9yIHx8IHRoaXMuJGVsLCB0aGlzLmRyb3BiYXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3cnLFxuXG4gICAgICAgICAgICAgICAgY2FwdHVyZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3BiYXI7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKF8sIGRyb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgJGVsID0gZHJvcC4kZWw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXIgPSBkcm9wLmRpcjtcblxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmRyb3BiYXIsICd1ay1uYXZiYXItZHJvcGJhci1zbGlkZScsIHRoaXMuZHJvcGJhck1vZGUgPT09ICdzbGlkZScgfHwgcGFyZW50cyh0aGlzLiRlbCkuc29tZShmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGNzcyhlbCwgJ3Bvc2l0aW9uJykgIT09ICdzdGF0aWMnOyB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbHNEcm9wICYmIGFkZENsYXNzKCRlbCwgKCh0aGlzLmNsc0Ryb3ApICsgXCItZHJvcGJhclwiKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpciA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvblRvKCRlbC5vZmZzZXRIZWlnaHQgKyB0b0Zsb2F0KGNzcygkZWwsICdtYXJnaW5Ub3AnKSkgKyB0b0Zsb2F0KGNzcygkZWwsICdtYXJnaW5Cb3R0b20nKSksICRlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2JlZm9yZWhpZGUnLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGJhcjtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSwgcmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkZWwgPSByZWYuJGVsO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXModGhpcy5kcm9wYmFyLCAnOmhvdmVyJykgJiYgYWN0aXZlICYmIGFjdGl2ZS4kZWwgPT09ICRlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3BiYXI7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKF8sIHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGVsID0gcmVmLiRlbDtcblxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmdldEFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWN0aXZlIHx8IGFjdGl2ZSAmJiBhY3RpdmUuJGVsID09PSAkZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvblRvKDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBnZXRBY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSB0aGlzLmRyb3Bkb3ducy5tYXAodGhpcy5nZXREcm9wZG93bikuZmlsdGVyKGZ1bmN0aW9uIChkcm9wKSB7IHJldHVybiBkcm9wICYmIGRyb3AuaXNBY3RpdmUoKTsgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aXZlICYmIGluY2x1ZGVzKGFjdGl2ZS5tb2RlLCAnaG92ZXInKSAmJiB3aXRoaW4oYWN0aXZlLnRvZ2dsZS4kZWwsIHRoaXMuJGVsKSAmJiBhY3RpdmU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uVG86IGZ1bmN0aW9uKG5ld0hlaWdodCwgZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGRyb3BiYXIgPSByZWYuZHJvcGJhcjtcbiAgICAgICAgICAgICAgICB2YXIgb2xkSGVpZ2h0ID0gaXNWaXNpYmxlKGRyb3BiYXIpID8gaGVpZ2h0KGRyb3BiYXIpIDogMDtcblxuICAgICAgICAgICAgICAgIGVsID0gb2xkSGVpZ2h0IDwgbmV3SGVpZ2h0ICYmIGVsO1xuXG4gICAgICAgICAgICAgICAgY3NzKGVsLCAnY2xpcCcsIChcInJlY3QoMCxcIiArIChlbC5vZmZzZXRXaWR0aCkgKyBcInB4LFwiICsgb2xkSGVpZ2h0ICsgXCJweCwwKVwiKSk7XG5cbiAgICAgICAgICAgICAgICBoZWlnaHQoZHJvcGJhciwgb2xkSGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKFtlbCwgZHJvcGJhcl0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RhcnQoZHJvcGJhciwge2hlaWdodDogbmV3SGVpZ2h0fSwgdGhpcy5kdXJhdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RhcnQoZWwsIHtjbGlwOiAoXCJyZWN0KDAsXCIgKyAoZWwub2Zmc2V0V2lkdGgpICsgXCJweCxcIiArIG5ld0hlaWdodCArIFwicHgsMClcIil9LCB0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChub29wKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoZWwsIHtjbGlwOiAnJ30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyQxLiR1cGRhdGUoZHJvcGJhcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0RHJvcGRvd246IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGdldENvbXBvbmVudChlbCwgJ2Ryb3AnKSB8fCB0aGlzLiRnZXRDb21wb25lbnQoZWwsICdkcm9wZG93bicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgb2ZmY2FudmFzID0ge1xuXG4gICAgICAgIG1peGluczogW01vZGFsXSxcblxuICAgICAgICBhcmdzOiAnbW9kZScsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIG1vZGU6IFN0cmluZyxcbiAgICAgICAgICAgIGZsaXA6IEJvb2xlYW4sXG4gICAgICAgICAgICBvdmVybGF5OiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbW9kZTogJ3NsaWRlJyxcbiAgICAgICAgICAgIGZsaXA6IGZhbHNlLFxuICAgICAgICAgICAgb3ZlcmxheTogZmFsc2UsXG4gICAgICAgICAgICBjbHNQYWdlOiAndWstb2ZmY2FudmFzLXBhZ2UnLFxuICAgICAgICAgICAgY2xzQ29udGFpbmVyOiAndWstb2ZmY2FudmFzLWNvbnRhaW5lcicsXG4gICAgICAgICAgICBzZWxQYW5lbDogJy51ay1vZmZjYW52YXMtYmFyJyxcbiAgICAgICAgICAgIGNsc0ZsaXA6ICd1ay1vZmZjYW52YXMtZmxpcCcsXG4gICAgICAgICAgICBjbHNDb250YWluZXJBbmltYXRpb246ICd1ay1vZmZjYW52YXMtY29udGFpbmVyLWFuaW1hdGlvbicsXG4gICAgICAgICAgICBjbHNTaWRlYmFyQW5pbWF0aW9uOiAndWstb2ZmY2FudmFzLWJhci1hbmltYXRpb24nLFxuICAgICAgICAgICAgY2xzTW9kZTogJ3VrLW9mZmNhbnZhcycsXG4gICAgICAgICAgICBjbHNPdmVybGF5OiAndWstb2ZmY2FudmFzLW92ZXJsYXknLFxuICAgICAgICAgICAgc2VsQ2xvc2U6ICcudWstb2ZmY2FudmFzLWNsb3NlJyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBjbHNGbGlwOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmxpcCA9IHJlZi5mbGlwO1xuICAgICAgICAgICAgICAgIHZhciBjbHNGbGlwID0gcmVmLmNsc0ZsaXA7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmxpcCA/IGNsc0ZsaXAgOiAnJztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNsc092ZXJsYXk6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBvdmVybGF5ID0gcmVmLm92ZXJsYXk7XG4gICAgICAgICAgICAgICAgdmFyIGNsc092ZXJsYXkgPSByZWYuY2xzT3ZlcmxheTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBvdmVybGF5ID8gY2xzT3ZlcmxheSA6ICcnO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2xzTW9kZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGUgPSByZWYubW9kZTtcbiAgICAgICAgICAgICAgICB2YXIgY2xzTW9kZSA9IHJlZi5jbHNNb2RlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjbHNNb2RlICsgXCItXCIgKyBtb2RlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNsc1NpZGViYXJBbmltYXRpb246IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBtb2RlID0gcmVmLm1vZGU7XG4gICAgICAgICAgICAgICAgdmFyIGNsc1NpZGViYXJBbmltYXRpb24gPSByZWYuY2xzU2lkZWJhckFuaW1hdGlvbjtcblxuICAgICAgICAgICAgICAgIHJldHVybiBtb2RlID09PSAnbm9uZScgfHwgbW9kZSA9PT0gJ3JldmVhbCcgPyAnJyA6IGNsc1NpZGViYXJBbmltYXRpb247XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbHNDb250YWluZXJBbmltYXRpb246IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBtb2RlID0gcmVmLm1vZGU7XG4gICAgICAgICAgICAgICAgdmFyIGNsc0NvbnRhaW5lckFuaW1hdGlvbiA9IHJlZi5jbHNDb250YWluZXJBbmltYXRpb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZSAhPT0gJ3B1c2gnICYmIG1vZGUgIT09ICdyZXZlYWwnID8gJycgOiBjbHNDb250YWluZXJBbmltYXRpb247XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uRWxlbWVudDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGUgPSByZWYubW9kZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBtb2RlID09PSAncmV2ZWFsJyA/IHRoaXMucGFuZWwucGFyZW50Tm9kZSA6IHRoaXMucGFuZWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhW2hyZWZePVwiI1wiXSc7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IHJlZi5jdXJyZW50Lmhhc2g7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkID0gcmVmLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmIGhhc2ggJiYgJChoYXNoLCBkb2N1bWVudC5ib2R5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAndG91Y2hzdGFydCcsXG5cbiAgICAgICAgICAgICAgICBwYXNzaXZlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYW5lbDtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUb3VjaGVzID0gcmVmLnRhcmdldFRvdWNoZXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50WSA9IHRhcmdldFRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3RvdWNobW92ZScsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3ZlcmxheTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLmNhbmNlbGFibGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICd0b3VjaG1vdmUnLFxuXG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG5cbiAgICAgICAgICAgICAgICBlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhbmVsO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGllbnRZID0gZXZlbnQudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZIC0gdGhpcy5jbGllbnRZO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5wYW5lbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHJlZi5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSByZWYuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2xpZW50SGVpZ2h0ID0gcmVmLmNsaWVudEhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xpZW50SGVpZ2h0ID49IHNjcm9sbEhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgc2Nyb2xsVG9wID09PSAwICYmIGNsaWVudFkgPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBzY3JvbGxIZWlnaHQgLSBzY3JvbGxUb3AgPD0gY2xpZW50SGVpZ2h0ICYmIGNsaWVudFkgPCAwXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jYW5jZWxhYmxlICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3cnLFxuXG4gICAgICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUgPT09ICdyZXZlYWwnICYmICFoYXNDbGFzcyh0aGlzLnBhbmVsLnBhcmVudE5vZGUsIHRoaXMuY2xzTW9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBBbGwodGhpcy5wYW5lbCwgJzxkaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLnBhbmVsLnBhcmVudE5vZGUsIHRoaXMuY2xzTW9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnb3ZlcmZsb3dZJywgdGhpcy5vdmVybGF5ID8gJ2hpZGRlbicgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGRvY3VtZW50LmJvZHksIHRoaXMuY2xzQ29udGFpbmVyLCB0aGlzLmNsc0ZsaXApO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3RvdWNoLWFjdGlvbicsICdwYW4teSBwaW5jaC16b29tJyk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzT3ZlcmxheSk7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMucGFuZWwsIHRoaXMuY2xzU2lkZWJhckFuaW1hdGlvbiwgdGhpcy5tb2RlICE9PSAncmV2ZWFsJyA/IHRoaXMuY2xzTW9kZSA6ICcnKTtcblxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQoZG9jdW1lbnQuYm9keSk7IC8vIGZvcmNlIHJlZmxvd1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhkb2N1bWVudC5ib2R5LCB0aGlzLmNsc0NvbnRhaW5lckFuaW1hdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbHNDb250YWluZXJBbmltYXRpb24gJiYgc3VwcHJlc3NVc2VyU2NhbGUoKTtcblxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgdGhpcy5jbHNDb250YWluZXJBbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3RvdWNoLWFjdGlvbicsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2hpZGRlbicsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbHNDb250YWluZXJBbmltYXRpb24gJiYgcmVzdW1lVXNlclNjYWxlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gJ3JldmVhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVud3JhcCh0aGlzLnBhbmVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMucGFuZWwsIHRoaXMuY2xzU2lkZWJhckFuaW1hdGlvbiwgdGhpcy5jbHNNb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzT3ZlcmxheSk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGRvY3VtZW50LmJvZHksIHRoaXMuY2xzQ29udGFpbmVyLCB0aGlzLmNsc0ZsaXApO1xuXG4gICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICdvdmVyZmxvd1knLCAnJyk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3N3aXBlTGVmdCBzd2lwZVJpZ2h0JyxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RvZ2dsZWQoKSAmJiBlbmRzV2l0aChlLnR5cGUsICdMZWZ0JykgXiB0aGlzLmZsaXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXVxuXG4gICAgfTtcblxuICAgIC8vIENocm9tZSBpbiByZXNwb25zaXZlIG1vZGUgem9vbXMgcGFnZSB1cG9uIG9wZW5pbmcgb2ZmY2FudmFzXG4gICAgZnVuY3Rpb24gc3VwcHJlc3NVc2VyU2NhbGUoKSB7XG4gICAgICAgIGdldFZpZXdwb3J0JDEoKS5jb250ZW50ICs9ICcsdXNlci1zY2FsYWJsZT0wJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWVVc2VyU2NhbGUoKSB7XG4gICAgICAgIHZhciB2aWV3cG9ydCA9IGdldFZpZXdwb3J0JDEoKTtcbiAgICAgICAgdmlld3BvcnQuY29udGVudCA9IHZpZXdwb3J0LmNvbnRlbnQucmVwbGFjZSgvLHVzZXItc2NhbGFibGU9MCQvLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Vmlld3BvcnQkMSgpIHtcbiAgICAgICAgcmV0dXJuICQoJ21ldGFbbmFtZT1cInZpZXdwb3J0XCJdJywgZG9jdW1lbnQuaGVhZCkgfHwgYXBwZW5kKGRvY3VtZW50LmhlYWQsICc8bWV0YSBuYW1lPVwidmlld3BvcnRcIj4nKTtcbiAgICB9XG5cbiAgICB2YXIgb3ZlcmZsb3dBdXRvID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgc2VsQ29udGFpbmVyOiBTdHJpbmcsXG4gICAgICAgICAgICBzZWxDb250ZW50OiBTdHJpbmdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBzZWxDb250YWluZXI6ICcudWstbW9kYWwnLFxuICAgICAgICAgICAgc2VsQ29udGVudDogJy51ay1tb2RhbC1kaWFsb2cnXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgY29udGFpbmVyOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxDb250YWluZXIgPSByZWYuc2VsQ29udGFpbmVyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3QoJGVsLCBzZWxDb250YWluZXIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY29udGVudDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsQ29udGVudCA9IHJlZi5zZWxDb250ZW50O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3QoJGVsLCBzZWxDb250ZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjc3ModGhpcy4kZWwsICdtaW5IZWlnaHQnLCAxNTApO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250ZW50IHx8ICF0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudDogdG9GbG9hdChjc3ModGhpcy4kZWwsICdtYXhIZWlnaHQnKSksXG4gICAgICAgICAgICAgICAgICAgIG1heDogTWF0aC5tYXgoMTUwLCBoZWlnaHQodGhpcy5jb250YWluZXIpIC0gKG9mZnNldCh0aGlzLmNvbnRlbnQpLmhlaWdodCAtIGhlaWdodCh0aGlzLiRlbCkpKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSByZWYuY3VycmVudDtcbiAgICAgICAgICAgICAgICB2YXIgbWF4ID0gcmVmLm1heDtcblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ21heEhlaWdodCcsIG1heCk7XG4gICAgICAgICAgICAgICAgaWYgKE1hdGgucm91bmQoY3VycmVudCkgIT09IE1hdGgucm91bmQobWF4KSkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAncmVzaXplJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciByZXNwb25zaXZlID0ge1xuXG4gICAgICAgIHByb3BzOiBbJ3dpZHRoJywgJ2hlaWdodCddLFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgJ3VrLXJlc3BvbnNpdmUtd2lkdGgnKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVmlzaWJsZSh0aGlzLiRlbCkgJiYgdGhpcy53aWR0aCAmJiB0aGlzLmhlaWdodFxuICAgICAgICAgICAgICAgICAgICA/IHt3aWR0aDogd2lkdGgodGhpcy4kZWwucGFyZW50Tm9kZSksIGhlaWdodDogdGhpcy5oZWlnaHR9XG4gICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oZGltKSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0KHRoaXMuJGVsLCBEaW1lbnNpb25zLmNvbnRhaW4oe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aFxuICAgICAgICAgICAgICAgIH0sIGRpbSkuaGVpZ2h0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgc2Nyb2xsID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2Nyb2xsVG86IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIGVsID0gZWwgJiYgJChlbCkgfHwgZG9jdW1lbnQuYm9keTtcblxuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyKHRoaXMuJGVsLCAnYmVmb3Jlc2Nyb2xsJywgW3RoaXMsIGVsXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXcoZWwsIHtvZmZzZXQ6IHRoaXMub2Zmc2V0fSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0cmlnZ2VyKHRoaXMkMS4kZWwsICdzY3JvbGxlZCcsIFt0aGlzJDEsIGVsXSk7IH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czoge1xuXG4gICAgICAgICAgICBjbGljazogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG8oZXNjYXBlKGRlY29kZVVSSUNvbXBvbmVudCh0aGlzLiRlbC5oYXNoKSkuc3Vic3RyKDEpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHNjcm9sbHNweSA9IHtcblxuICAgICAgICBhcmdzOiAnY2xzJyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgY2xzOiBTdHJpbmcsXG4gICAgICAgICAgICB0YXJnZXQ6IFN0cmluZyxcbiAgICAgICAgICAgIGhpZGRlbjogQm9vbGVhbixcbiAgICAgICAgICAgIG9mZnNldFRvcDogTnVtYmVyLFxuICAgICAgICAgICAgb2Zmc2V0TGVmdDogTnVtYmVyLFxuICAgICAgICAgICAgcmVwZWF0OiBCb29sZWFuLFxuICAgICAgICAgICAgZGVsYXk6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgICAgICAgICBjbHM6IGZhbHNlLFxuICAgICAgICAgICAgdGFyZ2V0OiBmYWxzZSxcbiAgICAgICAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICAgICAgICAgIG9mZnNldFRvcDogMCxcbiAgICAgICAgICAgIG9mZnNldExlZnQ6IDAsXG4gICAgICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgICBpblZpZXdDbGFzczogJ3VrLXNjcm9sbHNweS1pbnZpZXcnXG4gICAgICAgIH0pOyB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGVsZW1lbnRzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQgPyAkJCh0YXJnZXQsICRlbCkgOiBbJGVsXTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGZpbHRlcihlbGVtZW50cywgKFwiOm5vdCguXCIgKyAodGhpcy5pblZpZXdDbGFzcykgKyBcIilcIikpLCAndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBpbW1lZGlhdGU6IHRydWVcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IHJlZi51cGRhdGU7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBlbC5fdWtTY3JvbGxzcHlTdGF0ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0ge2NsczogZGF0YShlbCwgJ3VrLXNjcm9sbHNweS1jbGFzcycpIHx8IHRoaXMkMS5jbHN9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zaG93ID0gaXNJblZpZXcoZWwsIHRoaXMkMS5vZmZzZXRUb3AsIHRoaXMkMS5vZmZzZXRMZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl91a1Njcm9sbHNweVN0YXRlID0gc3RhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICAvLyBMZXQgY2hpbGQgY29tcG9uZW50cyBiZSBhcHBsaWVkIGF0IGxlYXN0IG9uY2UgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhLnVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEudXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZWwuX3VrU2Nyb2xsc3B5U3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlID0gZnVuY3Rpb24gKGludmlldykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGVsLCAndmlzaWJpbGl0eScsICFpbnZpZXcgJiYgdGhpcyQxLmhpZGRlbiA/ICdoaWRkZW4nIDogJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMkMS5pblZpZXdDbGFzcywgaW52aWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbCwgc3RhdGUuY2xzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIoZWwsIGludmlldyA/ICdpbnZpZXcnIDogJ291dHZpZXcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmludmlldyA9IGludmlldztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS4kdXBkYXRlKGVsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNob3cgJiYgIXN0YXRlLmludmlldyAmJiAhc3RhdGUucXVldWVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5xdWV1ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9taXNlID0gKGRhdGEucHJvbWlzZSB8fCBQcm9taXNlLnJlc29sdmUoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCB0aGlzJDEuZGVsYXkpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUucXVldWVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuJGVtaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3RhdGUuc2hvdyAmJiBzdGF0ZS5pbnZpZXcgJiYgIXN0YXRlLnF1ZXVlZCAmJiB0aGlzJDEucmVwZWF0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBbJ3Njcm9sbCcsICdyZXNpemUnXVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXVxuXG4gICAgfTtcblxuICAgIHZhciBzY3JvbGxzcHlOYXYgPSB7XG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNsczogU3RyaW5nLFxuICAgICAgICAgICAgY2xvc2VzdDogU3RyaW5nLFxuICAgICAgICAgICAgc2Nyb2xsOiBCb29sZWFuLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IEJvb2xlYW4sXG4gICAgICAgICAgICBvZmZzZXQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNsczogJ3VrLWFjdGl2ZScsXG4gICAgICAgICAgICBjbG9zZXN0OiBmYWxzZSxcbiAgICAgICAgICAgIHNjcm9sbDogZmFsc2UsXG4gICAgICAgICAgICBvdmVyZmxvdzogdHJ1ZSxcbiAgICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGxpbmtzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKF8sICRlbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCQoJ2FbaHJlZl49XCIjXCJdJywgJGVsKS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5oYXNoOyB9KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGxpbmtzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjcm9sbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY3JlYXRlKCdzY3JvbGwnLCBsaW5rcywge29mZnNldDogdGhpcy5vZmZzZXQgfHwgMH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0YXJnZXRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCQodGhpcy5saW5rcy5tYXAoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlc2NhcGUoZWwuaGFzaCkuc3Vic3RyKDEpOyB9KS5qb2luKCcsJykpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZWxlbWVudHM6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHJlZi5jbG9zZXN0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3QodGhpcy5saW5rcywgc2VsZWN0b3IgfHwgJyonKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy50YXJnZXRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gcmVmLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxlbmd0aCB8fCAhaXNWaXNpYmxlKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbEVsZW1lbnQgPSBsYXN0KHNjcm9sbFBhcmVudHModGhpcy50YXJnZXRzWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBzY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHNjcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlld3BvcnQgPSBnZXRWaWV3cG9ydChzY3JvbGxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heCA9IHNjcm9sbEhlaWdodCAtIG9mZnNldCh2aWV3cG9ydCkuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbFRvcCA9PT0gbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBsZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldHMuZXZlcnkoZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uKGVsLCB2aWV3cG9ydCkudG9wIC0gdGhpcyQxLm9mZnNldCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlID09PSBmYWxzZSAmJiB0aGlzLm92ZXJmbG93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7YWN0aXZlOiBhY3RpdmV9O1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSByZWYuYWN0aXZlO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwuYmx1cigpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cywgdGhpcy5jbHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnYWN0aXZlJywgW2FjdGl2ZSwgYWRkQ2xhc3ModGhpcy5lbGVtZW50c1thY3RpdmVdLCB0aGlzLmNscyldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cblxuICAgIH07XG5cbiAgICB2YXIgc3RpY2t5ID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzLCBNZWRpYV0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgICAgIGJvdHRvbTogQm9vbGVhbixcbiAgICAgICAgICAgIG9mZnNldDogU3RyaW5nLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBTdHJpbmcsXG4gICAgICAgICAgICBjbHNBY3RpdmU6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0luYWN0aXZlOiBTdHJpbmcsXG4gICAgICAgICAgICBjbHNGaXhlZDogU3RyaW5nLFxuICAgICAgICAgICAgY2xzQmVsb3c6IFN0cmluZyxcbiAgICAgICAgICAgIHNlbFRhcmdldDogU3RyaW5nLFxuICAgICAgICAgICAgd2lkdGhFbGVtZW50OiBCb29sZWFuLFxuICAgICAgICAgICAgc2hvd09uVXA6IEJvb2xlYW4sXG4gICAgICAgICAgICB0YXJnZXRPZmZzZXQ6IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogZmFsc2UsXG4gICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICBhbmltYXRpb246ICcnLFxuICAgICAgICAgICAgY2xzQWN0aXZlOiAndWstYWN0aXZlJyxcbiAgICAgICAgICAgIGNsc0luYWN0aXZlOiAnJyxcbiAgICAgICAgICAgIGNsc0ZpeGVkOiAndWstc3RpY2t5LWZpeGVkJyxcbiAgICAgICAgICAgIGNsc0JlbG93OiAndWstc3RpY2t5LWJlbG93JyxcbiAgICAgICAgICAgIHNlbFRhcmdldDogJycsXG4gICAgICAgICAgICB3aWR0aEVsZW1lbnQ6IGZhbHNlLFxuICAgICAgICAgICAgc2hvd09uVXA6IGZhbHNlLFxuICAgICAgICAgICAgdGFyZ2V0T2Zmc2V0OiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIG9mZnNldDogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IHJlZi5vZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9QeChvZmZzZXQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2VsVGFyZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxUYXJnZXQgPSByZWYuc2VsVGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbFRhcmdldCAmJiAkKHNlbFRhcmdldCwgJGVsKSB8fCAkZWw7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3aWR0aEVsZW1lbnQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoRWxlbWVudCA9IHJlZi53aWR0aEVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnkod2lkdGhFbGVtZW50LCAkZWwpIHx8IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0FjdGl2ZToge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhc0NsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmICF0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlQ2xhc3ModGhpcy5zZWxUYXJnZXQsIHRoaXMuY2xzSW5hY3RpdmUsIHRoaXMuY2xzQWN0aXZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdmFsdWUgJiYgIWhhc0NsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0luYWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUNsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0FjdGl2ZSwgdGhpcy5jbHNJbmFjdGl2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnaW5hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSAkKCcrIC51ay1zdGlja3ktcGxhY2Vob2xkZXInLCB0aGlzLiRlbCkgfHwgJCgnPGRpdiBjbGFzcz1cInVrLXN0aWNreS1wbGFjZWhvbGRlclwiPjwvZGl2PicpO1xuICAgICAgICAgICAgdGhpcy5pc0ZpeGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNGaXhlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0luYWN0aXZlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVtb3ZlKHRoaXMucGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLndpZHRoRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdsb2FkIGhhc2hjaGFuZ2UgcG9wc3RhdGUnLFxuXG4gICAgICAgICAgICAgICAgZWw6IGluQnJvd3NlciAmJiB3aW5kb3csXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnRhcmdldE9mZnNldCAhPT0gZmFsc2UgJiYgbG9jYXRpb24uaGFzaCAmJiB3aW5kb3cucGFnZVlPZmZzZXQgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQobG9jYXRpb24uaGFzaCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFzdGRvbS5yZWFkKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBvZmZzZXQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gcmVmLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxUb3AgPSBvZmZzZXQodGhpcyQxLiRlbCkudG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbEhlaWdodCA9IHRoaXMkMS4kZWwub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMkMS5pc0ZpeGVkICYmIGVsVG9wICsgZWxIZWlnaHQgPj0gdG9wICYmIGVsVG9wIDw9IHRvcCArIHRhcmdldC5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wKHdpbmRvdywgdG9wIC0gZWxIZWlnaHQgLSAoaXNOdW1lcmljKHRoaXMkMS50YXJnZXRPZmZzZXQpID8gdGhpcyQxLnRhcmdldE9mZnNldCA6IDApIC0gdGhpcyQxLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICB1cGRhdGU6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24ocmVmLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUgJiYgdHlwZSAhPT0gJ3VwZGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy4kZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAhdGhpcy5pc0FjdGl2ZSA/IHRoaXMuJGVsLm9mZnNldEhlaWdodCA6IGhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvcE9mZnNldCA9IG9mZnNldCh0aGlzLmlzRml4ZWQgPyB0aGlzLnBsYWNlaG9sZGVyIDogdGhpcy4kZWwpLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3R0b21PZmZzZXQgPSB0aGlzLnRvcE9mZnNldCArIGhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYm90dG9tID0gcGFyc2VQcm9wKCdib3R0b20nLCB0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvcCA9IE1hdGgubWF4KHRvRmxvYXQocGFyc2VQcm9wKCd0b3AnLCB0aGlzKSksIHRoaXMudG9wT2Zmc2V0KSAtIHRoaXMub2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbSAmJiBib3R0b20gLSB0aGlzLiRlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5hY3RpdmUgPSAhdGhpcy5tYXRjaE1lZGlhO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2Nyb2xsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luczogY3NzKHRoaXMuJGVsLCBbJ21hcmdpblRvcCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5SaWdodCddKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWYuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFyZ2lucyA9IHJlZi5tYXJnaW5zO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gcmVmJDEucGxhY2Vob2xkZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgY3NzKHBsYWNlaG9sZGVyLCBhc3NpZ24oe2hlaWdodDogaGVpZ2h0fSwgbWFyZ2lucykpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghd2l0aGluKHBsYWNlaG9sZGVyLCBkb2N1bWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyKHRoaXMuJGVsLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyKHBsYWNlaG9sZGVyLCAnaGlkZGVuJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIGFjdGl2ZS9pbmFjdGl2ZSBjbGFzc2VzIGFyZSBhcHBsaWVkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0aGlzLmlzQWN0aXZlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsID0gcmVmLnNjcm9sbDsgaWYgKCBzY3JvbGwgPT09IHZvaWQgMCApIHNjcm9sbCA9IDA7XG5cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gb2Zmc2V0KGlzVmlzaWJsZSh0aGlzLndpZHRoRWxlbWVudCkgPyB0aGlzLndpZHRoRWxlbWVudCA6IHRoaXMuJGVsKS53aWR0aDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiBzY3JvbGwgPD0gdGhpcy5zY3JvbGwgPyAnZG93bicgOiAndXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiB0aGlzLnNjcm9sbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGlzVmlzaWJsZSh0aGlzLiRlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IG9mZnNldFBvc2l0aW9uKHRoaXMucGxhY2Vob2xkZXIpWzBdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihkYXRhLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGluaXRUaW1lc3RhbXAgPSBkYXRhLmluaXRUaW1lc3RhbXA7IGlmICggaW5pdFRpbWVzdGFtcCA9PT0gdm9pZCAwICkgaW5pdFRpbWVzdGFtcCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXIgPSBkYXRhLmRpcjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3REaXIgPSBkYXRhLmxhc3REaXI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0U2Nyb2xsID0gZGF0YS5sYXN0U2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsID0gZGF0YS5zY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3AgPSBkYXRhLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpc2libGUgPSBkYXRhLnZpc2libGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3RTY3JvbGwgPSBzY3JvbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbCA8IDAgfHwgc2Nyb2xsID09PSBsYXN0U2Nyb2xsIHx8ICF2aXNpYmxlIHx8IHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5zaG93T25VcCAmJiB0eXBlICE9PSAnc2Nyb2xsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdyAtIGluaXRUaW1lc3RhbXAgPiAzMDAgfHwgZGlyICE9PSBsYXN0RGlyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmluaXRTY3JvbGwgPSBzY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmluaXRUaW1lc3RhbXAgPSBub3c7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3REaXIgPSBkaXI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvd09uVXAgJiYgIXRoaXMuaXNGaXhlZCAmJiBNYXRoLmFicyhkYXRhLmluaXRTY3JvbGwgLSBzY3JvbGwpIDw9IDMwICYmIE1hdGguYWJzKGxhc3RTY3JvbGwgLSBzY3JvbGwpIDw9IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgc2Nyb2xsIDwgdGhpcy50b3BcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHRoaXMuc2hvd09uVXAgJiYgKHNjcm9sbCA8PSB0aGlzLnRvcCB8fCBkaXIgPT09ICdkb3duJyB8fCBkaXIgPT09ICd1cCcgJiYgIXRoaXMuaXNGaXhlZCAmJiBzY3JvbGwgPD0gdGhpcy5ib3R0b21PZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNGaXhlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFuaW1hdGlvbi5pblByb2dyZXNzKHRoaXMuJGVsKSAmJiB0b3AgPiBzY3JvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmNhbmNlbCh0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ZpeGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbiAmJiBzY3JvbGwgPiB0aGlzLnRvcE9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5jYW5jZWwodGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5vdXQodGhpcy4kZWwsIHRoaXMuYW5pbWF0aW9uKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5oaWRlKCk7IH0sIG5vb3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNGaXhlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5hbmltYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmNhbmNlbCh0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5pbih0aGlzLiRlbCwgdGhpcy5hbmltYXRpb24pLmNhdGNoKG5vb3ApO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnLCAnc2Nyb2xsJ11cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuaXNGaXhlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICBhdHRyKHRoaXMucGxhY2Vob2xkZXIsICdoaWRkZW4nLCBudWxsKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGlkZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzRml4ZWQsIHRoaXMuY2xzQmVsb3cpO1xuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwge3Bvc2l0aW9uOiAnJywgdG9wOiAnJywgd2lkdGg6ICcnfSk7XG4gICAgICAgICAgICAgICAgYXR0cih0aGlzLnBsYWNlaG9sZGVyLCAnaGlkZGVuJywgJycpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMudG9wICE9PSAwIHx8IHRoaXMuc2Nyb2xsID4gdGhpcy50b3A7XG4gICAgICAgICAgICAgICAgdmFyIHRvcCA9IE1hdGgubWF4KDAsIHRoaXMub2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIGlmIChpc051bWVyaWModGhpcy5ib3R0b20pICYmIHRoaXMuc2Nyb2xsID4gdGhpcy5ib3R0b20gLSB0aGlzLm9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICB0b3AgPSB0aGlzLmJvdHRvbSAtIHRoaXMuc2Nyb2xsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAodG9wICsgXCJweFwiKSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGhcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzQmVsb3csIHRoaXMuc2Nyb2xsID4gdGhpcy5ib3R0b21PZmZzZXQpO1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc0ZpeGVkKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwYXJzZVByb3AocHJvcCwgcmVmKSB7XG4gICAgICAgIHZhciAkcHJvcHMgPSByZWYuJHByb3BzO1xuICAgICAgICB2YXIgJGVsID0gcmVmLiRlbDtcbiAgICAgICAgdmFyIHByb3BPZmZzZXQgPSByZWZbKHByb3AgKyBcIk9mZnNldFwiKV07XG5cblxuICAgICAgICB2YXIgdmFsdWUgPSAkcHJvcHNbcHJvcF07XG5cbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5tYXRjaCgvXi0/XFxkLykpIHtcblxuICAgICAgICAgICAgcmV0dXJuIHByb3BPZmZzZXQgKyB0b1B4KHZhbHVlKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0KHZhbHVlID09PSB0cnVlID8gJGVsLnBhcmVudE5vZGUgOiBxdWVyeSh2YWx1ZSwgJGVsKSkuYm90dG9tO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgU3dpdGNoZXIgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbVG9nZ2xhYmxlXSxcblxuICAgICAgICBhcmdzOiAnY29ubmVjdCcsXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNvbm5lY3Q6IFN0cmluZyxcbiAgICAgICAgICAgIHRvZ2dsZTogU3RyaW5nLFxuICAgICAgICAgICAgYWN0aXZlOiBOdW1iZXIsXG4gICAgICAgICAgICBzd2lwaW5nOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY29ubmVjdDogJ34udWstc3dpdGNoZXInLFxuICAgICAgICAgICAgdG9nZ2xlOiAnPiAqID4gOmZpcnN0LWNoaWxkJyxcbiAgICAgICAgICAgIGFjdGl2ZTogMCxcbiAgICAgICAgICAgIHN3aXBpbmc6IHRydWUsXG4gICAgICAgICAgICBjbHM6ICd1ay1hY3RpdmUnLFxuICAgICAgICAgICAgY2xzQ29udGFpbmVyOiAndWstc3dpdGNoZXInLFxuICAgICAgICAgICAgYXR0ckl0ZW06ICd1ay1zd2l0Y2hlci1pdGVtJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGNvbm5lY3RzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25uZWN0ID0gcmVmLmNvbm5lY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5QWxsKGNvbm5lY3QsICRlbCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbihjb25uZWN0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3RzLmZvckVhY2goZnVuY3Rpb24gKGxpc3QpIHsgcmV0dXJuIHRoaXMkMS51cGRhdGVBcmlhKGxpc3QuY2hpbGRyZW4pOyB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zd2lwaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoY29ubmVjdHMsICd0b3VjaC1hY3Rpb24nLCAncGFuLXkgcGluY2gtem9vbScpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRvZ2dsZXM6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IHJlZi50b2dnbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQkKHRvZ2dsZSwgJGVsKS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhbWF0Y2hlcyhlbCwgJy51ay1kaXNhYmxlZCAqLCAudWstZGlzYWJsZWQsIFtkaXNhYmxlZF0nKTsgfSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbih0b2dnbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyh+YWN0aXZlICYmIGFjdGl2ZSB8fCB0b2dnbGVzW3RoaXMuYWN0aXZlXSB8fCB0b2dnbGVzWzBdKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbih0aGlzLiRlbCkuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gdGhpcyQxLnRvZ2dsZXMuc29tZShmdW5jdGlvbiAodG9nZ2xlKSB7IHJldHVybiB3aXRoaW4odG9nZ2xlLCBjaGlsZCk7IH0pOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b2dnbGU7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmNsdWRlcyh0aGlzLnRvZ2dsZXMsIGUuY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhlLmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgICAgICBlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3RzO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCJbXCIgKyAodGhpcy5hdHRySXRlbSkgKyBcIl0sW2RhdGEtXCIgKyAodGhpcy5hdHRySXRlbSkgKyBcIl1cIik7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coZGF0YShlLmN1cnJlbnQsIHRoaXMuYXR0ckl0ZW0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3N3aXBlUmlnaHQgc3dpcGVMZWZ0JyxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN3aXBpbmc7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdHM7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhlbmRzV2l0aCh0eXBlLCAnTGVmdCcpID8gJ25leHQnIDogJ3ByZXZpb3VzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBpbmRleDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmluZEluZGV4KHRoaXMuY2hpbGRyZW4sIGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gaGFzQ2xhc3MoZWwsIHRoaXMkMS5jbHMpOyB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIHByZXYgPSB0aGlzLmluZGV4KCk7XG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSBnZXRJbmRleChpdGVtLCB0aGlzLnRvZ2dsZXMsIHByZXYpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhjaGlsZCwgdGhpcyQxLmNscywgbmV4dCA9PT0gaSk7XG4gICAgICAgICAgICAgICAgICAgIGF0dHIodGhpcyQxLnRvZ2dsZXNbaV0sICdhcmlhLWV4cGFuZGVkJywgbmV4dCA9PT0gaSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RzLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcyQxLnRvZ2dsZUVsZW1lbnQodG9Ob2RlcyhjaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCwgaSkgeyByZXR1cm4gaSAhPT0gbmV4dCAmJiB0aGlzJDEuaXNUb2dnbGVkKGNoaWxkKTsgfVxuICAgICAgICAgICAgICAgICAgICApLCBmYWxzZSwgcHJldiA+PSAwKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS50b2dnbGVFbGVtZW50KGNoaWxkcmVuW25leHRdLCB0cnVlLCBwcmV2ID49IDApOyB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciB0YWIgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ2xhc3NdLFxuXG4gICAgICAgIGV4dGVuZHM6IFN3aXRjaGVyLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBtZWRpYTogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1lZGlhOiA5NjAsXG4gICAgICAgICAgICBhdHRySXRlbTogJ3VrLXRhYi1pdGVtJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciBjbHMgPSBoYXNDbGFzcyh0aGlzLiRlbCwgJ3VrLXRhYi1sZWZ0JylcbiAgICAgICAgICAgICAgICA/ICd1ay10YWItbGVmdCdcbiAgICAgICAgICAgICAgICA6IGhhc0NsYXNzKHRoaXMuJGVsLCAndWstdGFiLXJpZ2h0JylcbiAgICAgICAgICAgICAgICAgICAgPyAndWstdGFiLXJpZ2h0J1xuICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoY2xzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kY3JlYXRlKCd0b2dnbGUnLCB0aGlzLiRlbCwge2NsczogY2xzLCBtb2RlOiAnbWVkaWEnLCBtZWRpYTogdGhpcy5tZWRpYX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHRvZ2dsZSA9IHtcblxuICAgICAgICBtaXhpbnM6IFtNZWRpYSwgVG9nZ2xhYmxlXSxcblxuICAgICAgICBhcmdzOiAndGFyZ2V0JyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgaHJlZjogU3RyaW5nLFxuICAgICAgICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgICAgICAgbW9kZTogJ2xpc3QnLFxuICAgICAgICAgICAgcXVldWVkOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgaHJlZjogZmFsc2UsXG4gICAgICAgICAgICB0YXJnZXQ6IGZhbHNlLFxuICAgICAgICAgICAgbW9kZTogJ2NsaWNrJyxcbiAgICAgICAgICAgIHF1ZXVlZDogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIHRhcmdldDoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaHJlZiA9IHJlZi5ocmVmO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBxdWVyeUFsbCh0YXJnZXQgfHwgaHJlZiwgJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5sZW5ndGggJiYgdGFyZ2V0IHx8IFskZWxdO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy50YXJnZXQsICd1cGRhdGVhcmlhJywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAocG9pbnRlckVudGVyICsgXCIgXCIgKyBwb2ludGVyTGVhdmUpLFxuXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVzKHRoaXMubW9kZSwgJ2hvdmVyJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RvdWNoKGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZSgoXCJ0b2dnbGVcIiArIChlLnR5cGUgPT09IHBvaW50ZXJFbnRlciA/ICdzaG93JyA6ICdoaWRlJykpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmNsdWRlcyh0aGlzLm1vZGUsICdjbGljaycpIHx8IGhhc1RvdWNoICYmIGluY2x1ZGVzKHRoaXMubW9kZSwgJ2hvdmVyJyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGJldHRlciBpc1RvZ2dsZWQgaGFuZGxpbmdcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbms7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbG9zZXN0KGUudGFyZ2V0LCAnYVtocmVmPVwiI1wiXSwgYVtocmVmPVwiXCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IChsaW5rID0gY2xvc2VzdChlLnRhcmdldCwgJ2FbaHJlZl0nKSkgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xzICYmICFoYXNDbGFzcyh0aGlzLnRhcmdldCwgdGhpcy5jbHMuc3BsaXQoJyAnKVswXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAhaXNWaXNpYmxlKHRoaXMudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGxpbmsuaGFzaCAmJiBtYXRjaGVzKHRoaXMudGFyZ2V0LCBsaW5rLmhhc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnbWVkaWEnKSAmJiB0aGlzLm1lZGlhXG4gICAgICAgICAgICAgICAgICAgID8ge21hdGNoOiB0aGlzLm1hdGNoTWVkaWF9XG4gICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVmLm1hdGNoO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlZCA9IHRoaXMuaXNUb2dnbGVkKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPyAhdG9nZ2xlZCA6IHRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgaWYgKCF0cmlnZ2VyKHRoaXMudGFyZ2V0LCB0eXBlIHx8ICd0b2dnbGUnLCBbdGhpc10pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWV1ZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlZCA9IHRoaXMudGFyZ2V0LmZpbHRlcih0aGlzLmlzVG9nZ2xlZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRWxlbWVudCh0b2dnbGVkLCBmYWxzZSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEudG9nZ2xlRWxlbWVudCh0aGlzJDEudGFyZ2V0LmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICFpbmNsdWRlcyh0b2dnbGVkLCBlbCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICksIHRydWUpOyB9XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUVsZW1lbnQodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIGNvbXBvbmVudHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAgICAgQWNjb3JkaW9uOiBBY2NvcmRpb24sXG4gICAgICAgIEFsZXJ0OiBhbGVydCxcbiAgICAgICAgQ292ZXI6IGNvdmVyLFxuICAgICAgICBEcm9wOiBkcm9wLFxuICAgICAgICBEcm9wZG93bjogZHJvcCxcbiAgICAgICAgRm9ybUN1c3RvbTogZm9ybUN1c3RvbSxcbiAgICAgICAgR2lmOiBnaWYsXG4gICAgICAgIEdyaWQ6IGdyaWQsXG4gICAgICAgIEhlaWdodE1hdGNoOiBoZWlnaHRNYXRjaCxcbiAgICAgICAgSGVpZ2h0Vmlld3BvcnQ6IGhlaWdodFZpZXdwb3J0LFxuICAgICAgICBJY29uOiBJY29uLFxuICAgICAgICBJbWc6IGltZyxcbiAgICAgICAgTGVhZGVyOiBsZWFkZXIsXG4gICAgICAgIE1hcmdpbjogTWFyZ2luLFxuICAgICAgICBNb2RhbDogbW9kYWwsXG4gICAgICAgIE5hdjogbmF2LFxuICAgICAgICBOYXZiYXI6IG5hdmJhcixcbiAgICAgICAgT2ZmY2FudmFzOiBvZmZjYW52YXMsXG4gICAgICAgIE92ZXJmbG93QXV0bzogb3ZlcmZsb3dBdXRvLFxuICAgICAgICBSZXNwb25zaXZlOiByZXNwb25zaXZlLFxuICAgICAgICBTY3JvbGw6IHNjcm9sbCxcbiAgICAgICAgU2Nyb2xsc3B5OiBzY3JvbGxzcHksXG4gICAgICAgIFNjcm9sbHNweU5hdjogc2Nyb2xsc3B5TmF2LFxuICAgICAgICBTdGlja3k6IHN0aWNreSxcbiAgICAgICAgU3ZnOiBTVkcsXG4gICAgICAgIFN3aXRjaGVyOiBTd2l0Y2hlcixcbiAgICAgICAgVGFiOiB0YWIsXG4gICAgICAgIFRvZ2dsZTogdG9nZ2xlLFxuICAgICAgICBWaWRlbzogVmlkZW8sXG4gICAgICAgIENsb3NlOiBDbG9zZSxcbiAgICAgICAgU3Bpbm5lcjogU3Bpbm5lcixcbiAgICAgICAgU2xpZGVuYXZOZXh0OiBTbGlkZW5hdixcbiAgICAgICAgU2xpZGVuYXZQcmV2aW91czogU2xpZGVuYXYsXG4gICAgICAgIFNlYXJjaEljb246IFNlYXJjaCxcbiAgICAgICAgTWFya2VyOiBJY29uQ29tcG9uZW50LFxuICAgICAgICBOYXZiYXJUb2dnbGVJY29uOiBJY29uQ29tcG9uZW50LFxuICAgICAgICBPdmVybGF5SWNvbjogSWNvbkNvbXBvbmVudCxcbiAgICAgICAgUGFnaW5hdGlvbk5leHQ6IEljb25Db21wb25lbnQsXG4gICAgICAgIFBhZ2luYXRpb25QcmV2aW91czogSWNvbkNvbXBvbmVudCxcbiAgICAgICAgVG90b3A6IEljb25Db21wb25lbnRcbiAgICB9KTtcblxuICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudHNcbiAgICBlYWNoKGNvbXBvbmVudHMsIGZ1bmN0aW9uIChjb21wb25lbnQsIG5hbWUpIHsgcmV0dXJuIFVJa2l0LmNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpOyB9XG4gICAgKTtcblxuICAgIC8vIGNvcmUgZnVuY3Rpb25hbGl0eVxuICAgIFVJa2l0LnVzZShDb3JlKTtcblxuICAgIGJvb3QoVUlraXQpO1xuXG4gICAgdmFyIGNvdW50ZG93biA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzc10sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGRhdGU6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc1dyYXBwZXI6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGRhdGU6ICcnLFxuICAgICAgICAgICAgY2xzV3JhcHBlcjogJy51ay1jb3VudGRvd24tJXVuaXQlJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGRhdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBkYXRlID0gcmVmLmRhdGU7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZS5wYXJzZShkYXRlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRheXM6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsc1dyYXBwZXIgPSByZWYuY2xzV3JhcHBlcjtcblxuICAgICAgICAgICAgICAgIHJldHVybiAkKGNsc1dyYXBwZXIucmVwbGFjZSgnJXVuaXQlJywgJ2RheXMnKSwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhvdXJzOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBjbHNXcmFwcGVyID0gcmVmLmNsc1dyYXBwZXI7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gJChjbHNXcmFwcGVyLnJlcGxhY2UoJyV1bml0JScsICdob3VycycpLCAkZWwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbWludXRlczogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xzV3JhcHBlciA9IHJlZi5jbHNXcmFwcGVyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoY2xzV3JhcHBlci5yZXBsYWNlKCcldW5pdCUnLCAnbWludXRlcycpLCAkZWwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2Vjb25kczogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xzV3JhcHBlciA9IHJlZi5jbHNXcmFwcGVyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoY2xzV3JhcHBlci5yZXBsYWNlKCcldW5pdCUnLCAnc2Vjb25kcycpLCAkZWwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdW5pdHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnZGF5cycsICdob3VycycsICdtaW51dGVzJywgJ3NlY29uZHMnXS5maWx0ZXIoZnVuY3Rpb24gKHVuaXQpIHsgcmV0dXJuIHRoaXMkMVt1bml0XTsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLnVuaXRzLmZvckVhY2goZnVuY3Rpb24gKHVuaXQpIHsgcmV0dXJuIGVtcHR5KHRoaXMkMVt1bml0XSk7IH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAndmlzaWJpbGl0eWNoYW5nZScsXG5cbiAgICAgICAgICAgICAgICBlbDogaW5Ccm93c2VyICYmIGRvY3VtZW50LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgdGltZXNwYW4gPSBnZXRUaW1lU3Bhbih0aGlzLmRhdGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVzcGFuLnRvdGFsIDw9IDApIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aW1lc3Bhbi5kYXlzXG4gICAgICAgICAgICAgICAgICAgICAgICA9IHRpbWVzcGFuLmhvdXJzXG4gICAgICAgICAgICAgICAgICAgICAgICA9IHRpbWVzcGFuLm1pbnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgID0gdGltZXNwYW4uc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICAgICAgPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudW5pdHMuZm9yRWFjaChmdW5jdGlvbiAodW5pdCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaWdpdHMgPSBTdHJpbmcoTWF0aC5mbG9vcih0aW1lc3Bhblt1bml0XSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGRpZ2l0cyA9IGRpZ2l0cy5sZW5ndGggPCAyID8gKFwiMFwiICsgZGlnaXRzKSA6IGRpZ2l0cztcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSB0aGlzJDFbdW5pdF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC50ZXh0Q29udGVudCAhPT0gZGlnaXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSBkaWdpdHMuc3BsaXQoJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlnaXRzLmxlbmd0aCAhPT0gZWwuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbChlbCwgZGlnaXRzLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiAnPHNwYW4+PC9zcGFuPic7IH0pLmpvaW4oJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXRzLmZvckVhY2goZnVuY3Rpb24gKGRpZ2l0LCBpKSB7IHJldHVybiBlbC5jaGlsZHJlbltpXS50ZXh0Q29udGVudCA9IGRpZ2l0OyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRlICYmIHRoaXMudW5pdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwodGhpcy4kdXBkYXRlLCAxMDAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFRpbWVTcGFuKGRhdGUpIHtcblxuICAgICAgICB2YXIgdG90YWwgPSBkYXRlIC0gRGF0ZS5ub3coKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG90YWw6IHRvdGFsLFxuICAgICAgICAgICAgc2Vjb25kczogdG90YWwgLyAxMDAwICUgNjAsXG4gICAgICAgICAgICBtaW51dGVzOiB0b3RhbCAvIDEwMDAgLyA2MCAlIDYwLFxuICAgICAgICAgICAgaG91cnM6IHRvdGFsIC8gMTAwMCAvIDYwIC8gNjAgJSAyNCxcbiAgICAgICAgICAgIGRheXM6IHRvdGFsIC8gMTAwMCAvIDYwIC8gNjAgLyAyNFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRDbGFzcyA9ICd1ay1hbmltYXRpb24tdGFyZ2V0JztcblxuICAgIHZhciBBbmltYXRlID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IE51bWJlclxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogMTUwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgdGFyZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kZWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIGFuaW1hdGU6IGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBhZGRTdHlsZSgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuJDEgPSBjaGlsZHJlbih0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BzRnJvbSA9IGNoaWxkcmVuJDEubWFwKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZ2V0UHJvcHMoZWwsIHRydWUpOyB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBvbGRIZWlnaHQgPSBoZWlnaHQodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIHZhciBvbGRTY3JvbGxZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXG4gICAgICAgICAgICAgICAgYWN0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbCh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4kMS5mb3JFYWNoKFRyYW5zaXRpb24uY2FuY2VsKTtcblxuICAgICAgICAgICAgICAgIHJlc2V0KHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUodGhpcy50YXJnZXQsICdyZXNpemUnKTtcbiAgICAgICAgICAgICAgICBmYXN0ZG9tLmZsdXNoKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gaGVpZ2h0KHRoaXMudGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgIGNoaWxkcmVuJDEgPSBjaGlsZHJlbiQxLmNvbmNhdChjaGlsZHJlbih0aGlzLnRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gIWluY2x1ZGVzKGNoaWxkcmVuJDEsIGVsKTsgfSkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByb3BzVG8gPSBjaGlsZHJlbiQxLm1hcChmdW5jdGlvbiAoZWwsIGkpIHsgcmV0dXJuIGVsLnBhcmVudE5vZGUgJiYgaSBpbiBwcm9wc0Zyb21cbiAgICAgICAgICAgICAgICAgICAgICAgID8gcHJvcHNGcm9tW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGlzVmlzaWJsZShlbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGdldFBvc2l0aW9uV2l0aE1hcmdpbihlbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHtvcGFjaXR5OiAwfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB7b3BhY2l0eTogaXNWaXNpYmxlKGVsKSA/IDEgOiAwfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBmYWxzZTsgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBwcm9wc0Zyb20gPSBwcm9wc1RvLm1hcChmdW5jdGlvbiAocHJvcHMsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb20gPSBjaGlsZHJlbiQxW2ldLnBhcmVudE5vZGUgPT09IHRoaXMkMS50YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcHJvcHNGcm9tW2ldIHx8IGdldFByb3BzKGNoaWxkcmVuJDFbaV0pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGZyb20ub3BhY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoISgnb3BhY2l0eScgaW4gcHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wYWNpdHkgPSBmcm9tLm9wYWNpdHk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BhY2l0eSAlIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMub3BhY2l0eSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGZyb20ub3BhY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJvbTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMudGFyZ2V0LCB0YXJnZXRDbGFzcyk7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4kMS5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaSkgeyByZXR1cm4gcHJvcHNGcm9tW2ldICYmIGNzcyhlbCwgcHJvcHNGcm9tW2ldKTsgfSk7XG4gICAgICAgICAgICAgICAgY3NzKHRoaXMudGFyZ2V0LCB7aGVpZ2h0OiBvbGRIZWlnaHQsIGRpc3BsYXk6ICdibG9jayd9KTtcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3Aod2luZG93LCBvbGRTY3JvbGxZKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4kMS5tYXAoZnVuY3Rpb24gKGVsLCBpKSB7IHJldHVybiBbJ3RvcCcsICdsZWZ0JywgJ2hlaWdodCcsICd3aWR0aCddLnNvbWUoZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIHByb3BzRnJvbVtpXVtwcm9wXSAhPT0gcHJvcHNUb1tpXVtwcm9wXTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKSAmJiBUcmFuc2l0aW9uLnN0YXJ0KGVsLCBwcm9wc1RvW2ldLCB0aGlzJDEuYW5pbWF0aW9uLCAnZWFzZScpOyB9XG4gICAgICAgICAgICAgICAgICAgICkuY29uY2F0KG9sZEhlaWdodCAhPT0gbmV3SGVpZ2h0ICYmIFRyYW5zaXRpb24uc3RhcnQodGhpcy50YXJnZXQsIHtoZWlnaHQ6IG5ld0hlaWdodH0sIHRoaXMuYW5pbWF0aW9uLCAnZWFzZScpKVxuICAgICAgICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuJDEuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHsgcmV0dXJuIGNzcyhlbCwge2Rpc3BsYXk6IHByb3BzVG9baV0ub3BhY2l0eSA9PT0gMCA/ICdub25lJyA6ICcnLCB6SW5kZXg6ICcnfSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICByZXNldCh0aGlzJDEudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcyQxLiR1cGRhdGUodGhpcyQxLnRhcmdldCwgJ3Jlc2l6ZScpO1xuICAgICAgICAgICAgICAgICAgICBmYXN0ZG9tLmZsdXNoKCk7IC8vIG5lZWRlZCBmb3IgSUUxMVxuICAgICAgICAgICAgICAgIH0sIG5vb3ApO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0UHJvcHMoZWwsIG9wYWNpdHkpIHtcblxuICAgICAgICB2YXIgekluZGV4ID0gY3NzKGVsLCAnekluZGV4Jyk7XG5cbiAgICAgICAgcmV0dXJuIGlzVmlzaWJsZShlbClcbiAgICAgICAgICAgID8gYXNzaWduKHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5ID8gY3NzKGVsLCAnb3BhY2l0eScpIDogJzAnLFxuICAgICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IHpJbmRleCA9PT0gJ2F1dG8nID8gaW5kZXgoZWwpIDogekluZGV4XG4gICAgICAgICAgICB9LCBnZXRQb3NpdGlvbldpdGhNYXJnaW4oZWwpKVxuICAgICAgICAgICAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNldChlbCkge1xuICAgICAgICBjc3MoZWwuY2hpbGRyZW4sIHtcbiAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICBsZWZ0OiAnJyxcbiAgICAgICAgICAgIG9wYWNpdHk6ICcnLFxuICAgICAgICAgICAgcG9pbnRlckV2ZW50czogJycsXG4gICAgICAgICAgICBwb3NpdGlvbjogJycsXG4gICAgICAgICAgICB0b3A6ICcnLFxuICAgICAgICAgICAgd2lkdGg6ICcnXG4gICAgICAgIH0pO1xuICAgICAgICByZW1vdmVDbGFzcyhlbCwgdGFyZ2V0Q2xhc3MpO1xuICAgICAgICBjc3MoZWwsIHtoZWlnaHQ6ICcnLCBkaXNwbGF5OiAnJ30pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBvc2l0aW9uV2l0aE1hcmdpbihlbCkge1xuICAgICAgICB2YXIgcmVmID0gb2Zmc2V0KGVsKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQ7XG4gICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICAgICAgdmFyIHJlZiQxID0gcG9zaXRpb24oZWwpO1xuICAgICAgICB2YXIgdG9wID0gcmVmJDEudG9wO1xuICAgICAgICB2YXIgbGVmdCA9IHJlZiQxLmxlZnQ7XG5cbiAgICAgICAgcmV0dXJuIHt0b3A6IHRvcCwgbGVmdDogbGVmdCwgaGVpZ2h0OiBoZWlnaHQsIHdpZHRoOiB3aWR0aH07XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlO1xuXG4gICAgZnVuY3Rpb24gYWRkU3R5bGUoKSB7XG4gICAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0eWxlID0gYXBwZW5kKGRvY3VtZW50LmhlYWQsICc8c3R5bGU+Jykuc2hlZXQ7XG4gICAgICAgIHN0eWxlLmluc2VydFJ1bGUoXG4gICAgICAgICAgICAoXCIuXCIgKyB0YXJnZXRDbGFzcyArIFwiID4gKiB7XFxuICAgICAgICAgICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogbm9uZSAhaW1wb3J0YW50O1xcbiAgICAgICAgfVwiKSwgMFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBmaWx0ZXIkMSA9IHtcblxuICAgICAgICBtaXhpbnM6IFtBbmltYXRlXSxcblxuICAgICAgICBhcmdzOiAndGFyZ2V0JyxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgdGFyZ2V0OiBCb29sZWFuLFxuICAgICAgICAgICAgc2VsQWN0aXZlOiBCb29sZWFuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgICAgICAgc2VsQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGF0dHJJdGVtOiAndWstZmlsdGVyLWNvbnRyb2wnLFxuICAgICAgICAgICAgY2xzOiAndWstYWN0aXZlJyxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogMjUwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgdG9nZ2xlczoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ckl0ZW0gPSByZWYuYXR0ckl0ZW07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQkKChcIltcIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXSxbZGF0YS1cIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXVwiKSwgJGVsKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxBY3RpdmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlcyA9ICQkKHRoaXMuc2VsQWN0aXZlLCB0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHRvZ2dsZUNsYXNzKGVsLCB0aGlzJDEuY2xzLCBpbmNsdWRlcyhhY3RpdmVzLCBlbCkpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0YXJnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gJCh0YXJnZXQsICRlbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjaGlsZHJlbjoge1xuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGxpc3QsIG9sZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxMaXN0KGxpc3QsIG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiW1wiICsgKHRoaXMuYXR0ckl0ZW0pICsgXCJdLFtkYXRhLVwiICsgKHRoaXMuYXR0ckl0ZW0pICsgXCJdXCIpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5KGUuY3VycmVudCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShtZXJnZVN0YXRlKGVsLCB0aGlzLmF0dHJJdGVtLCB0aGlzLmdldFN0YXRlKCkpKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZXNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaGFzQ2xhc3MoaXRlbSwgdGhpcyQxLmNscyk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHN0YXRlLCBlbCkgeyByZXR1cm4gbWVyZ2VTdGF0ZShlbCwgdGhpcyQxLmF0dHJJdGVtLCBzdGF0ZSk7IH0sIHtmaWx0ZXI6IHsnJzogJyd9LCBzb3J0OiBbXX0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0U3RhdGU6IGZ1bmN0aW9uKHN0YXRlLCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKCBhbmltYXRlID09PSB2b2lkIDAgKSBhbmltYXRlID0gdHJ1ZTtcblxuXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBhc3NpZ24oe2ZpbHRlcjogeycnOiAnJ30sIHNvcnQ6IFtdfSwgc3RhdGUpO1xuXG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ2JlZm9yZUZpbHRlcicsIFt0aGlzLCBzdGF0ZV0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiB0b2dnbGVDbGFzcyhlbCwgdGhpcyQxLmNscywgISFtYXRjaEZpbHRlcihlbCwgdGhpcyQxLmF0dHJJdGVtLCBzdGF0ZSkpOyB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBhcHBseSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihzdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGNzcyhlbCwgJ2Rpc3BsYXknLCBzZWxlY3RvciAmJiAhbWF0Y2hlcyhlbCwgc2VsZWN0b3IpID8gJ25vbmUnIDogJycpOyB9KTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gc3RhdGUuc29ydDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnQgPSByZWZbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmRlciA9IHJlZlsxXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc29ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnRlZCA9IHNvcnRJdGVtcyhjaGlsZHJlbiwgc29ydCwgb3JkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0VxdWFsKHNvcnRlZCwgY2hpbGRyZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiBhcHBlbmQodGhpcyQxLnRhcmdldCwgZWwpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZShhcHBseSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB0cmlnZ2VyKHRoaXMkMS4kZWwsICdhZnRlckZpbHRlcicsIFt0aGlzJDFdKTsgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbHkoKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ2FmdGVyRmlsdGVyJywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGZhc3Rkb20ud3JpdGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnNldFN0YXRlKHRoaXMkMS5nZXRTdGF0ZSgpLCBmYWxzZSk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRGaWx0ZXIoZWwsIGF0dHIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlT3B0aW9ucyhkYXRhKGVsLCBhdHRyKSwgWydmaWx0ZXInXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VTdGF0ZShlbCwgYXR0ciwgc3RhdGUpIHtcblxuICAgICAgICB2YXIgZmlsdGVyQnkgPSBnZXRGaWx0ZXIoZWwsIGF0dHIpO1xuICAgICAgICB2YXIgZmlsdGVyID0gZmlsdGVyQnkuZmlsdGVyO1xuICAgICAgICB2YXIgZ3JvdXAgPSBmaWx0ZXJCeS5ncm91cDtcbiAgICAgICAgdmFyIHNvcnQgPSBmaWx0ZXJCeS5zb3J0O1xuICAgICAgICB2YXIgb3JkZXIgPSBmaWx0ZXJCeS5vcmRlcjsgaWYgKCBvcmRlciA9PT0gdm9pZCAwICkgb3JkZXIgPSAnYXNjJztcblxuICAgICAgICBpZiAoZmlsdGVyIHx8IGlzVW5kZWZpbmVkKHNvcnQpKSB7XG5cbiAgICAgICAgICAgIGlmIChncm91cCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3RhdGUuZmlsdGVyWycnXTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZmlsdGVyW2dyb3VwXSA9IGZpbHRlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3RhdGUuZmlsdGVyW2dyb3VwXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eShzdGF0ZS5maWx0ZXIpIHx8ICcnIGluIHN0YXRlLmZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZmlsdGVyID0geycnOiBmaWx0ZXIgfHwgJyd9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZmlsdGVyID0geycnOiBmaWx0ZXIgfHwgJyd9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHNvcnQpKSB7XG4gICAgICAgICAgICBzdGF0ZS5zb3J0ID0gW3NvcnQsIG9yZGVyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEZpbHRlcihlbCwgYXR0ciwgcmVmKSB7XG4gICAgICAgIHZhciBzdGF0ZUZpbHRlciA9IHJlZi5maWx0ZXI7IGlmICggc3RhdGVGaWx0ZXIgPT09IHZvaWQgMCApIHN0YXRlRmlsdGVyID0geycnOiAnJ307XG4gICAgICAgIHZhciByZWZfc29ydCA9IHJlZi5zb3J0O1xuICAgICAgICB2YXIgc3RhdGVTb3J0ID0gcmVmX3NvcnRbMF07XG4gICAgICAgIHZhciBzdGF0ZU9yZGVyID0gcmVmX3NvcnRbMV07XG5cblxuICAgICAgICB2YXIgcmVmJDEgPSBnZXRGaWx0ZXIoZWwsIGF0dHIpO1xuICAgICAgICB2YXIgZmlsdGVyID0gcmVmJDEuZmlsdGVyOyBpZiAoIGZpbHRlciA9PT0gdm9pZCAwICkgZmlsdGVyID0gJyc7XG4gICAgICAgIHZhciBncm91cCA9IHJlZiQxLmdyb3VwOyBpZiAoIGdyb3VwID09PSB2b2lkIDAgKSBncm91cCA9ICcnO1xuICAgICAgICB2YXIgc29ydCA9IHJlZiQxLnNvcnQ7XG4gICAgICAgIHZhciBvcmRlciA9IHJlZiQxLm9yZGVyOyBpZiAoIG9yZGVyID09PSB2b2lkIDAgKSBvcmRlciA9ICdhc2MnO1xuXG4gICAgICAgIHJldHVybiBpc1VuZGVmaW5lZChzb3J0KVxuICAgICAgICAgICAgPyBncm91cCBpbiBzdGF0ZUZpbHRlciAmJiBmaWx0ZXIgPT09IHN0YXRlRmlsdGVyW2dyb3VwXVxuICAgICAgICAgICAgICAgIHx8ICFmaWx0ZXIgJiYgZ3JvdXAgJiYgIShncm91cCBpbiBzdGF0ZUZpbHRlcikgJiYgIXN0YXRlRmlsdGVyWycnXVxuICAgICAgICAgICAgOiBzdGF0ZVNvcnQgPT09IHNvcnQgJiYgc3RhdGVPcmRlciA9PT0gb3JkZXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNFcXVhbExpc3QobGlzdEEsIGxpc3RCKSB7XG4gICAgICAgIHJldHVybiBsaXN0QS5sZW5ndGggPT09IGxpc3RCLmxlbmd0aFxuICAgICAgICAgICAgJiYgbGlzdEEuZXZlcnkoZnVuY3Rpb24gKGVsKSB7IHJldHVybiB+bGlzdEIuaW5kZXhPZihlbCk7IH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNlbGVjdG9yKHJlZikge1xuICAgICAgICB2YXIgZmlsdGVyID0gcmVmLmZpbHRlcjtcblxuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnJztcbiAgICAgICAgZWFjaChmaWx0ZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gc2VsZWN0b3IgKz0gdmFsdWUgfHwgJyc7IH0pO1xuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc29ydEl0ZW1zKG5vZGVzLCBzb3J0LCBvcmRlcikge1xuICAgICAgICByZXR1cm4gYXNzaWduKFtdLCBub2Rlcykuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gZGF0YShhLCBzb3J0KS5sb2NhbGVDb21wYXJlKGRhdGEoYiwgc29ydCksIHVuZGVmaW5lZCwge251bWVyaWM6IHRydWV9KSAqIChvcmRlciA9PT0gJ2FzYycgfHwgLTEpOyB9KTtcbiAgICB9XG5cbiAgICB2YXIgQW5pbWF0aW9ucyA9IHtcblxuICAgICAgICBzbGlkZToge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoZGlyICogLTEwMCl9LFxuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoKX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGVkKGN1cnJlbnQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbihwZXJjZW50LCBkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoZGlyICogLTEwMCAqIHBlcmNlbnQpfSxcbiAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKGRpciAqIDEwMCAqICgxIC0gcGVyY2VudCkpfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZWQoZWwpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGNzcyhlbCwgJ3RyYW5zZm9ybScpLnNwbGl0KCcsJylbNF0gLyBlbC5vZmZzZXRXaWR0aCkgfHwgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUodmFsdWUsIHVuaXQpIHtcbiAgICAgICAgaWYgKCB2YWx1ZSA9PT0gdm9pZCAwICkgdmFsdWUgPSAwO1xuICAgICAgICBpZiAoIHVuaXQgPT09IHZvaWQgMCApIHVuaXQgPSAnJSc7XG5cbiAgICAgICAgdmFsdWUgKz0gdmFsdWUgPyB1bml0IDogJyc7XG4gICAgICAgIHJldHVybiBpc0lFID8gKFwidHJhbnNsYXRlWChcIiArIHZhbHVlICsgXCIpXCIpIDogKFwidHJhbnNsYXRlM2QoXCIgKyB2YWx1ZSArIFwiLCAwLCAwKVwiKTsgLy8gY3VycmVudGx5IG5vdCB0cmFuc2xhdGUzZCBpbiBJRSwgdHJhbnNsYXRlM2Qgd2l0aGluIHRyYW5zbGF0ZTNkIGRvZXMgbm90IHdvcmsgd2hpbGUgdHJhbnNpdGlvbmluZ1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlM2QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChcInNjYWxlM2QoXCIgKyB2YWx1ZSArIFwiLCBcIiArIHZhbHVlICsgXCIsIDEpXCIpO1xuICAgIH1cblxuICAgIHZhciBBbmltYXRpb25zJDEgPSBhc3NpZ24oe30sIEFuaW1hdGlvbnMsIHtcblxuICAgICAgICBmYWRlOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAwfSxcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IDF9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHBlcmNlbnQ6IGZ1bmN0aW9uKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAtIGNzcyhjdXJyZW50LCAnb3BhY2l0eScpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbihwZXJjZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IDEgLSBwZXJjZW50fSxcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IHBlcmNlbnR9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHNjYWxlOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAwLCB0cmFuc2Zvcm06IHNjYWxlM2QoMSAtIC4yKX0sXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAxLCB0cmFuc2Zvcm06IHNjYWxlM2QoMSl9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHBlcmNlbnQ6IGZ1bmN0aW9uKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAtIGNzcyhjdXJyZW50LCAnb3BhY2l0eScpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbihwZXJjZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAge29wYWNpdHk6IDEgLSBwZXJjZW50LCB0cmFuc2Zvcm06IHNjYWxlM2QoMSAtIC4yICogcGVyY2VudCl9LFxuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogcGVyY2VudCwgdHJhbnNmb3JtOiBzY2FsZTNkKDEgLSAuMiArIC4yICogcGVyY2VudCl9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIFRyYW5zaXRpb25lcihwcmV2LCBuZXh0LCBkaXIsIHJlZikge1xuICAgICAgICB2YXIgYW5pbWF0aW9uID0gcmVmLmFuaW1hdGlvbjtcbiAgICAgICAgdmFyIGVhc2luZyA9IHJlZi5lYXNpbmc7XG5cblxuICAgICAgICB2YXIgcGVyY2VudCA9IGFuaW1hdGlvbi5wZXJjZW50O1xuICAgICAgICB2YXIgdHJhbnNsYXRlID0gYW5pbWF0aW9uLnRyYW5zbGF0ZTtcbiAgICAgICAgdmFyIHNob3cgPSBhbmltYXRpb24uc2hvdzsgaWYgKCBzaG93ID09PSB2b2lkIDAgKSBzaG93ID0gbm9vcDtcbiAgICAgICAgdmFyIHByb3BzID0gc2hvdyhkaXIpO1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgICAgICBkaXI6IGRpcixcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24oZHVyYXRpb24sIHBlcmNlbnQsIGxpbmVhcikge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmICggcGVyY2VudCA9PT0gdm9pZCAwICkgcGVyY2VudCA9IDA7XG5cblxuICAgICAgICAgICAgICAgIHZhciB0aW1pbmcgPSBsaW5lYXIgPyAnbGluZWFyJyA6IGVhc2luZztcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiAtPSBNYXRoLnJvdW5kKGR1cmF0aW9uICogY2xhbXAocGVyY2VudCwgLTEsIDEpKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlKHBlcmNlbnQpO1xuXG4gICAgICAgICAgICAgICAgdHJpZ2dlclVwZGF0ZShuZXh0LCAnaXRlbWluJywge3BlcmNlbnQ6IHBlcmNlbnQsIGR1cmF0aW9uOiBkdXJhdGlvbiwgdGltaW5nOiB0aW1pbmcsIGRpcjogZGlyfSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlclVwZGF0ZShwcmV2LCAnaXRlbW91dCcsIHtwZXJjZW50OiAxIC0gcGVyY2VudCwgZHVyYXRpb246IGR1cmF0aW9uLCB0aW1pbmc6IHRpbWluZywgZGlyOiBkaXJ9KTtcblxuICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydChuZXh0LCBwcm9wc1sxXSwgZHVyYXRpb24sIHRpbWluZyksXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RhcnQocHJldiwgcHJvcHNbMF0sIGR1cmF0aW9uLCB0aW1pbmcpXG4gICAgICAgICAgICAgICAgXSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgbm9vcCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBUcmFuc2l0aW9uLnN0b3AoW25leHQsIHByZXZdKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwoW25leHQsIHByZXZdKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHByb3BzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNzcyhbbmV4dCwgcHJldl0sIHByb3AsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmb3J3YXJkOiBmdW5jdGlvbihkdXJhdGlvbiwgcGVyY2VudCkge1xuICAgICAgICAgICAgICAgIGlmICggcGVyY2VudCA9PT0gdm9pZCAwICkgcGVyY2VudCA9IHRoaXMucGVyY2VudCgpO1xuXG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwoW25leHQsIHByZXZdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaG93KGR1cmF0aW9uLCBwZXJjZW50LCB0cnVlKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbihwZXJjZW50KSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvcHMgPSB0cmFuc2xhdGUocGVyY2VudCwgZGlyKTtcbiAgICAgICAgICAgICAgICBjc3MobmV4dCwgcHJvcHNbMV0pO1xuICAgICAgICAgICAgICAgIGNzcyhwcmV2LCBwcm9wc1swXSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlclVwZGF0ZShuZXh0LCAnaXRlbXRyYW5zbGF0ZWluJywge3BlcmNlbnQ6IHBlcmNlbnQsIGRpcjogZGlyfSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlclVwZGF0ZShwcmV2LCAnaXRlbXRyYW5zbGF0ZW91dCcsIHtwZXJjZW50OiAxIC0gcGVyY2VudCwgZGlyOiBkaXJ9KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBlcmNlbnQocHJldiB8fCBuZXh0LCBuZXh0LCBkaXIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0RGlzdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2ICYmIHByZXYub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyaWdnZXJVcGRhdGUoZWwsIHR5cGUsIGRhdGEpIHtcbiAgICAgICAgdHJpZ2dlcihlbCwgY3JlYXRlRXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgdmFyIFNsaWRlckF1dG9wbGF5ID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBhdXRvcGxheTogQm9vbGVhbixcbiAgICAgICAgICAgIGF1dG9wbGF5SW50ZXJ2YWw6IE51bWJlcixcbiAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogQm9vbGVhblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9wbGF5SW50ZXJ2YWw6IDcwMDAsXG4gICAgICAgICAgICBwYXVzZU9uSG92ZXI6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5hdXRvcGxheSAmJiB0aGlzLnN0YXJ0QXV0b3BsYXkoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wQXV0b3BsYXkoKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYXR0cih0aGlzLnNsaWRlcywgJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICd2aXNpYmlsaXR5Y2hhbmdlJyxcblxuICAgICAgICAgICAgICAgIGVsOiBpbkJyb3dzZXIgJiYgZG9jdW1lbnQsXG5cbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hdXRvcGxheTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcEF1dG9wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0QXV0b3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBzdGFydEF1dG9wbGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wQXV0b3BsYXkoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gKCF0aGlzJDEuZHJhZ2dhYmxlIHx8ICEkKCc6Zm9jdXMnLCB0aGlzJDEuJGVsKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICghdGhpcyQxLnBhdXNlT25Ib3ZlciB8fCAhbWF0Y2hlcyh0aGlzJDEuJGVsLCAnOmhvdmVyJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiAhdGhpcyQxLnN0YWNrLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgdGhpcyQxLnNob3coJ25leHQnKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRvcGxheUludGVydmFsXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RvcEF1dG9wbGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmludGVydmFsICYmIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBTbGlkZXJEcmFnID0ge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBkcmFnZ2FibGU6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IDEwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICBbJ3N0YXJ0JywgJ21vdmUnLCAnZW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZm4gPSB0aGlzJDFba2V5XTtcbiAgICAgICAgICAgICAgICB0aGlzJDFba2V5XSA9IGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGdldEV2ZW50UG9zKGUpLnggKiAoaXNSdGwgPyAtMSA6IDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5wcmV2UG9zID0gcG9zICE9PSB0aGlzJDEucG9zID8gdGhpcyQxLnBvcyA6IHRoaXMkMS5wcmV2UG9zO1xuICAgICAgICAgICAgICAgICAgICB0aGlzJDEucG9zID0gcG9zO1xuXG4gICAgICAgICAgICAgICAgICAgIGZuKGUpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6IHBvaW50ZXJEb3duLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxTbGlkZXM7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZHJhZ2dhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCAhaXNUb3VjaChlKSAmJiBoYXNUZXh0Tm9kZXNPbmx5KGUudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgY2xvc2VzdChlLnRhcmdldCwgc2VsSW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBlLmJ1dHRvbiA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHRoaXMubGVuZ3RoIDwgMlxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBpT1MgMTEgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTg0MjUwXG5cbiAgICAgICAgICAgICAgICBuYW1lOiAndG91Y2htb3ZlJyxcbiAgICAgICAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAnbW92ZScsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50ZXJNb3ZlID09PSAndG91Y2htb3ZlJztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsU2xpZGVzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdkcmFnc3RhcnQnLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZyA9IHRoaXMucG9zO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RyYW5zaXRpb25lcikge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVyY2VudCA9IHRoaXMuX3RyYW5zaXRpb25lci5wZXJjZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZyArPSB0aGlzLl90cmFuc2l0aW9uZXIuZ2V0RGlzdGFuY2UoKSAqIHRoaXMucGVyY2VudCAqIHRoaXMuZGlyO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb25lci5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyLnRyYW5zbGF0ZSh0aGlzLnBlcmNlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldkluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZWUgYWJvdmUgd29ya2Fyb3VuZCBub3RpY2VcbiAgICAgICAgICAgICAgICB2YXIgb2ZmID0gcG9pbnRlck1vdmUgIT09ICd0b3VjaG1vdmUnXG4gICAgICAgICAgICAgICAgICAgID8gb24oZG9jdW1lbnQsIHBvaW50ZXJNb3ZlLCB0aGlzLm1vdmUsIHtwYXNzaXZlOiBmYWxzZX0pXG4gICAgICAgICAgICAgICAgICAgIDogbm9vcDtcbiAgICAgICAgICAgICAgICB0aGlzLnVuYmluZE1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzJDEudW5iaW5kTW92ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBvbih3aW5kb3csICdzY3JvbGwnLCB0aGlzLnVuYmluZE1vdmUpO1xuICAgICAgICAgICAgICAgIG9uKHdpbmRvdy52aXN1YWxWaWV3cG9ydCwgJ3Jlc2l6ZScsIHRoaXMudW5iaW5kTW92ZSk7XG4gICAgICAgICAgICAgICAgb24oZG9jdW1lbnQsIChwb2ludGVyVXAgKyBcIiBcIiArIHBvaW50ZXJDYW5jZWwpLCB0aGlzLmVuZCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy5saXN0LCAndXNlclNlbGVjdCcsICdub25lJyk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG1vdmU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGFib3ZlIHdvcmthcm91bmQgbm90aWNlXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnVuYmluZE1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMucG9zIC0gdGhpcy5kcmFnO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlID09PSAwIHx8IHRoaXMucHJldlBvcyA9PT0gdGhpcy5wb3MgfHwgIXRoaXMuZHJhZ2dpbmcgJiYgTWF0aC5hYnMoZGlzdGFuY2UpIDwgdGhpcy50aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLmxpc3QsICdwb2ludGVyRXZlbnRzJywgJ25vbmUnKTtcblxuICAgICAgICAgICAgICAgIGUuY2FuY2VsYWJsZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpciA9IChkaXN0YW5jZSA8IDAgPyAxIDogLTEpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlcyA9IHJlZi5zbGlkZXM7XG4gICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgcHJldkluZGV4ID0gcmVmJDEucHJldkluZGV4O1xuICAgICAgICAgICAgICAgIHZhciBkaXMgPSBNYXRoLmFicyhkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRJbmRleCA9IHRoaXMuZ2V0SW5kZXgocHJldkluZGV4ICsgdGhpcy5kaXIsIHByZXZJbmRleCk7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5fZ2V0RGlzdGFuY2UocHJldkluZGV4LCBuZXh0SW5kZXgpIHx8IHNsaWRlc1twcmV2SW5kZXhdLm9mZnNldFdpZHRoO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHRJbmRleCAhPT0gcHJldkluZGV4ICYmIGRpcyA+IHdpZHRoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnIC09IHdpZHRoICogdGhpcy5kaXI7XG5cbiAgICAgICAgICAgICAgICAgICAgcHJldkluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgICAgICAgICAgICAgICBkaXMgLT0gd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHRoaXMuZ2V0SW5kZXgocHJldkluZGV4ICsgdGhpcy5kaXIsIHByZXZJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gdGhpcy5fZ2V0RGlzdGFuY2UocHJldkluZGV4LCBuZXh0SW5kZXgpIHx8IHNsaWRlc1twcmV2SW5kZXhdLm9mZnNldFdpZHRoO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gZGlzIC8gd2lkdGg7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IHNsaWRlc1twcmV2SW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gc2xpZGVzW25leHRJbmRleF07XG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSB0aGlzLmluZGV4ICE9PSBuZXh0SW5kZXg7XG4gICAgICAgICAgICAgICAgdmFyIGVkZ2UgPSBwcmV2SW5kZXggPT09IG5leHRJbmRleDtcblxuICAgICAgICAgICAgICAgIHZhciBpdGVtU2hvd247XG5cbiAgICAgICAgICAgICAgICBbdGhpcy5pbmRleCwgdGhpcy5wcmV2SW5kZXhdLmZpbHRlcihmdW5jdGlvbiAoaSkgeyByZXR1cm4gIWluY2x1ZGVzKFtuZXh0SW5kZXgsIHByZXZJbmRleF0sIGkpOyB9KS5mb3JFYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIoc2xpZGVzW2ldLCAnaXRlbWhpZGRlbicsIFt0aGlzJDFdKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZWRnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVNob3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5wcmV2SW5kZXggPSBwcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPT09IHByZXZJbmRleCAmJiB0aGlzLnByZXZJbmRleCAhPT0gcHJldkluZGV4IHx8IGl0ZW1TaG93bikge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHNsaWRlc1t0aGlzLmluZGV4XSwgJ2l0ZW1zaG93bicsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2SW5kZXggPSBwcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBuZXh0SW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgIWVkZ2UgJiYgdHJpZ2dlcihwcmV2LCAnYmVmb3JlaXRlbWhpZGUnLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKG5leHQsICdiZWZvcmVpdGVtc2hvdycsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyID0gdGhpcy5fdHJhbnNsYXRlKE1hdGguYWJzKHRoaXMucGVyY2VudCksIHByZXYsICFlZGdlICYmIG5leHQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgIWVkZ2UgJiYgdHJpZ2dlcihwcmV2LCAnaXRlbWhpZGUnLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKG5leHQsICdpdGVtc2hvdycsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgb2ZmKHdpbmRvdywgJ3Njcm9sbCcsIHRoaXMudW5iaW5kTW92ZSk7XG4gICAgICAgICAgICAgICAgb2ZmKHdpbmRvdy52aXN1YWxWaWV3cG9ydCwgJ3Jlc2l6ZScsIHRoaXMudW5iaW5kTW92ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy51bmJpbmRNb3ZlICYmIHRoaXMudW5iaW5kTW92ZSgpO1xuICAgICAgICAgICAgICAgIG9mZihkb2N1bWVudCwgcG9pbnRlclVwLCB0aGlzLmVuZCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2luZykge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmcgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ID09PSB0aGlzLnByZXZJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gMSAtIHRoaXMucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyICo9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvdyhmYWxzZSwgdGhpcy5pbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyQ2hhbmdlID0gKGlzUnRsID8gdGhpcy5kaXIgKiAoaXNSdGwgPyAxIDogLTEpIDogdGhpcy5kaXIpIDwgMCA9PT0gdGhpcy5wcmV2UG9zID4gdGhpcy5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gZGlyQ2hhbmdlID8gdGhpcy5pbmRleCA6IHRoaXMucHJldkluZGV4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gMSAtIHRoaXMucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KHRoaXMuZGlyID4gMCAmJiAhZGlyQ2hhbmdlIHx8IHRoaXMuZGlyIDwgMCAmJiBkaXJDaGFuZ2UgPyAnbmV4dCcgOiAncHJldmlvdXMnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3NzKHRoaXMubGlzdCwge3VzZXJTZWxlY3Q6ICcnLCBwb2ludGVyRXZlbnRzOiAnJ30pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnXG4gICAgICAgICAgICAgICAgICAgID0gdGhpcy5wZXJjZW50XG4gICAgICAgICAgICAgICAgICAgID0gbnVsbDtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBoYXNUZXh0Tm9kZXNPbmx5KGVsKSB7XG4gICAgICAgIHJldHVybiAhZWwuY2hpbGRyZW4ubGVuZ3RoICYmIGVsLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBTbGlkZXJOYXYgPSB7XG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgc2VsTmF2OiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIG5hdjogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsTmF2ID0gcmVmLnNlbE5hdjtcblxuICAgICAgICAgICAgICAgIHJldHVybiAkKHNlbE5hdiwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNlbE5hdkl0ZW06IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBhdHRySXRlbSA9IHJlZi5hdHRySXRlbTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoXCJbXCIgKyBhdHRySXRlbSArIFwiXSxbZGF0YS1cIiArIGF0dHJJdGVtICsgXCJdXCIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbmF2SXRlbXM6IGZ1bmN0aW9uKF8sICRlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkJCh0aGlzLnNlbE5hdkl0ZW0sICRlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uYXYgJiYgdGhpcy5sZW5ndGggIT09IHRoaXMubmF2LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBodG1sKHRoaXMubmF2LCB0aGlzLnNsaWRlcy5tYXAoZnVuY3Rpb24gKF8sIGkpIHsgcmV0dXJuIChcIjxsaSBcIiArICh0aGlzJDEuYXR0ckl0ZW0pICsgXCI9XFxcIlwiICsgaSArIFwiXFxcIj48YSBocmVmPjwvYT48L2xpPlwiKTsgfSkuam9pbignJykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKCQkKHRoaXMuc2VsTmF2SXRlbSwgdGhpcy4kZWwpLmNvbmNhdCh0aGlzLm5hdiksICd1ay1oaWRkZW4nLCAhdGhpcy5tYXhJbmRleCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU5hdigpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogW1xuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxOYXZJdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KGRhdGEoZS5jdXJyZW50LCB0aGlzLmF0dHJJdGVtKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnaXRlbXNob3cnLFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICd1cGRhdGVOYXYnXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgdXBkYXRlTmF2OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmdldFZhbGlkSW5kZXgoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdkl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNtZCA9IGRhdGEoZWwsIHRoaXMkMS5hdHRySXRlbSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMkMS5jbHNBY3RpdmUsIHRvTnVtYmVyKGNtZCkgPT09IGkpO1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbCwgJ3VrLWludmlzaWJsZScsIHRoaXMkMS5maW5pdGUgJiYgKGNtZCA9PT0gJ3ByZXZpb3VzJyAmJiBpID09PSAwIHx8IGNtZCA9PT0gJ25leHQnICYmIGkgPj0gdGhpcyQxLm1heEluZGV4KSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIFNsaWRlciA9IHtcblxuICAgICAgICBtaXhpbnM6IFtTbGlkZXJBdXRvcGxheSwgU2xpZGVyRHJhZywgU2xpZGVyTmF2XSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgY2xzQWN0aXZhdGVkOiBCb29sZWFuLFxuICAgICAgICAgICAgZWFzaW5nOiBTdHJpbmcsXG4gICAgICAgICAgICBpbmRleDogTnVtYmVyLFxuICAgICAgICAgICAgZmluaXRlOiBCb29sZWFuLFxuICAgICAgICAgICAgdmVsb2NpdHk6IE51bWJlcixcbiAgICAgICAgICAgIHNlbFNsaWRlczogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YTogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2UnLFxuICAgICAgICAgICAgZmluaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIHZlbG9jaXR5OiAxLFxuICAgICAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgICAgICBwcmV2SW5kZXg6IC0xLFxuICAgICAgICAgICAgc3RhY2s6IFtdLFxuICAgICAgICAgICAgcGVyY2VudDogMCxcbiAgICAgICAgICAgIGNsc0FjdGl2ZTogJ3VrLWFjdGl2ZScsXG4gICAgICAgICAgICBjbHNBY3RpdmF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgVHJhbnNpdGlvbmVyOiBmYWxzZSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25PcHRpb25zOiB7fVxuICAgICAgICB9KTsgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5wcmV2SW5kZXggPSAtMTtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmdldFZhbGlkSW5kZXgodGhpcy5pbmRleCk7XG4gICAgICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuc2xpZGVzLCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgZHVyYXRpb246IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZlbG9jaXR5ID0gcmVmLnZlbG9jaXR5O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNwZWVkVXAoJGVsLm9mZnNldFdpZHRoIC8gdmVsb2NpdHkpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbGlzdDogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsTGlzdCA9IHJlZi5zZWxMaXN0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoc2VsTGlzdCwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG1heEluZGV4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2VsU2xpZGVzOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsTGlzdCA9IHJlZi5zZWxMaXN0O1xuICAgICAgICAgICAgICAgIHZhciBzZWxTbGlkZXMgPSByZWYuc2VsU2xpZGVzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChzZWxMaXN0ICsgXCIgXCIgKyAoc2VsU2xpZGVzIHx8ICc+IConKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzbGlkZXM6IHtcblxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkJCh0aGlzLnNlbFNsaWRlcywgdGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB3YXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBsZW5ndGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNsaWRlcy5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcblxuICAgICAgICAgICAgaXRlbXNob3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUodGhpcy5saXN0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24oaW5kZXgsIGZvcmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKCBmb3JjZSA9PT0gdm9pZCAwICkgZm9yY2UgPSBmYWxzZTtcblxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZHJhZ2dpbmcgfHwgIXRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgc3RhY2sgPSByZWYuc3RhY2s7XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXVlSW5kZXggPSBmb3JjZSA/IDAgOiBzdGFjay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIHJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5zcGxpY2UocXVldWVJbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyQxLnNob3coc3RhY2suc2hpZnQoKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgc3RhY2tbZm9yY2UgPyAndW5zaGlmdCcgOiAncHVzaCddKGluZGV4KTtcblxuICAgICAgICAgICAgICAgIGlmICghZm9yY2UgJiYgc3RhY2subGVuZ3RoID4gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb25lci5mb3J3YXJkKE1hdGgubWluKHRoaXMuZHVyYXRpb24sIDIwMCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwcmV2SW5kZXggPSB0aGlzLmdldEluZGV4KHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gaGFzQ2xhc3ModGhpcy5zbGlkZXMsIHRoaXMuY2xzQWN0aXZlKSAmJiB0aGlzLnNsaWRlc1twcmV2SW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0SW5kZXggPSB0aGlzLmdldEluZGV4KGluZGV4LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IHRoaXMuc2xpZGVzW25leHRJbmRleF07XG5cbiAgICAgICAgICAgICAgICBpZiAocHJldiA9PT0gbmV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5kaXIgPSBnZXREaXJlY3Rpb24oaW5kZXgsIHByZXZJbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2SW5kZXggPSBwcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IG5leHRJbmRleDtcblxuICAgICAgICAgICAgICAgIGlmIChwcmV2ICYmICF0cmlnZ2VyKHByZXYsICdiZWZvcmVpdGVtaGlkZScsIFt0aGlzXSlcbiAgICAgICAgICAgICAgICAgICAgfHwgIXRyaWdnZXIobmV4dCwgJ2JlZm9yZWl0ZW1zaG93JywgW3RoaXMsIHByZXZdKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5wcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3Nob3cocHJldiwgbmV4dCwgZm9yY2UpLnRoZW4oZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHByZXYgJiYgdHJpZ2dlcihwcmV2LCAnaXRlbWhpZGRlbicsIFt0aGlzJDFdKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihuZXh0LCAnaXRlbXNob3duJywgW3RoaXMkMV0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFzdGRvbS53cml0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5zaG93KHN0YWNrLnNoaWZ0KCksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5fdHJhbnNpdGlvbmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwcmV2ICYmIHRyaWdnZXIocHJldiwgJ2l0ZW1oaWRlJywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKG5leHQsICdpdGVtc2hvdycsIFt0aGlzXSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0SW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBwcmV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKCBpbmRleCA9PT0gdm9pZCAwICkgaW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgICAgIGlmICggcHJldiA9PT0gdm9pZCAwICkgcHJldiA9IHRoaXMuaW5kZXg7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY2xhbXAoZ2V0SW5kZXgoaW5kZXgsIHRoaXMuc2xpZGVzLCBwcmV2LCB0aGlzLmZpbml0ZSksIDAsIHRoaXMubWF4SW5kZXgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0VmFsaWRJbmRleDogZnVuY3Rpb24oaW5kZXgsIHByZXZJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICggaW5kZXggPT09IHZvaWQgMCApIGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIHByZXZJbmRleCA9PT0gdm9pZCAwICkgcHJldkluZGV4ID0gdGhpcy5wcmV2SW5kZXg7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRJbmRleChpbmRleCwgcHJldkluZGV4KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9zaG93OiBmdW5jdGlvbihwcmV2LCBuZXh0LCBmb3JjZSkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyID0gdGhpcy5fZ2V0VHJhbnNpdGlvbmVyKFxuICAgICAgICAgICAgICAgICAgICBwcmV2LFxuICAgICAgICAgICAgICAgICAgICBuZXh0LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcixcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogZm9yY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5leHQub2Zmc2V0V2lkdGggPCA2MDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnY3ViaWMtYmV6aWVyKDAuMjUsIDAuNDYsIDAuNDUsIDAuOTQpJyAvKiBlYXNlT3V0UXVhZCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdjdWJpYy1iZXppZXIoMC4xNjUsIDAuODQsIDAuNDQsIDEpJyAvKiBlYXNlT3V0UXVhcnQgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZWFzaW5nXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMudHJhbnNpdGlvbk9wdGlvbnMpXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmICghZm9yY2UgJiYgIXByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNsYXRlKDEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXMuc3RhY2s7XG4gICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHJlZi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zaXRpb25lcltsZW5ndGggPiAxID8gJ2ZvcndhcmQnIDogJ3Nob3cnXShsZW5ndGggPiAxID8gTWF0aC5taW4odGhpcy5kdXJhdGlvbiwgNzUgKyA3NSAvIChsZW5ndGggLSAxKSkgOiB0aGlzLmR1cmF0aW9uLCB0aGlzLnBlcmNlbnQpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfZ2V0RGlzdGFuY2U6IGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VHJhbnNpdGlvbmVyKHByZXYsIHByZXYgIT09IG5leHQgJiYgbmV4dCkuZ2V0RGlzdGFuY2UoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF90cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQsIHByZXYsIG5leHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIHByZXYgPT09IHZvaWQgMCApIHByZXYgPSB0aGlzLnByZXZJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIG5leHQgPT09IHZvaWQgMCApIG5leHQgPSB0aGlzLmluZGV4O1xuXG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25lciA9IHRoaXMuX2dldFRyYW5zaXRpb25lcihwcmV2ICE9PSBuZXh0ID8gcHJldiA6IGZhbHNlLCBuZXh0KTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uZXIudHJhbnNsYXRlKHBlcmNlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2l0aW9uZXI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfZ2V0VHJhbnNpdGlvbmVyOiBmdW5jdGlvbihwcmV2LCBuZXh0LCBkaXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIHByZXYgPT09IHZvaWQgMCApIHByZXYgPSB0aGlzLnByZXZJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIG5leHQgPT09IHZvaWQgMCApIG5leHQgPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgICAgIGlmICggZGlyID09PSB2b2lkIDAgKSBkaXIgPSB0aGlzLmRpciB8fCAxO1xuICAgICAgICAgICAgICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHRoaXMudHJhbnNpdGlvbk9wdGlvbnM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMuVHJhbnNpdGlvbmVyKFxuICAgICAgICAgICAgICAgICAgICBpc051bWJlcihwcmV2KSA/IHRoaXMuc2xpZGVzW3ByZXZdIDogcHJldixcbiAgICAgICAgICAgICAgICAgICAgaXNOdW1iZXIobmV4dCkgPyB0aGlzLnNsaWRlc1tuZXh0XSA6IG5leHQsXG4gICAgICAgICAgICAgICAgICAgIGRpciAqIChpc1J0bCA/IC0xIDogMSksXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXREaXJlY3Rpb24oaW5kZXgsIHByZXZJbmRleCkge1xuICAgICAgICByZXR1cm4gaW5kZXggPT09ICduZXh0J1xuICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICA6IGluZGV4ID09PSAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgIDogaW5kZXggPCBwcmV2SW5kZXhcbiAgICAgICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgICAgICA6IDE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3BlZWRVcCh4KSB7XG4gICAgICAgIHJldHVybiAuNSAqIHggKyAzMDA7IC8vIHBhcmFib2xhIHRocm91Z2ggKDQwMCw1MDA7IDYwMCw2MDA7IDE4MDAsMTIwMClcbiAgICB9XG5cbiAgICB2YXIgU2xpZGVzaG93ID0ge1xuXG4gICAgICAgIG1peGluczogW1NsaWRlcl0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogU3RyaW5nXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiAnc2xpZGUnLFxuICAgICAgICAgICAgY2xzQWN0aXZhdGVkOiAndWstdHJhbnNpdGlvbi1hY3RpdmUnLFxuICAgICAgICAgICAgQW5pbWF0aW9uczogQW5pbWF0aW9ucyxcbiAgICAgICAgICAgIFRyYW5zaXRpb25lcjogVHJhbnNpdGlvbmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgYW5pbWF0aW9uOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gcmVmLmFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgQW5pbWF0aW9ucyA9IHJlZi5BbmltYXRpb25zO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzc2lnbihBbmltYXRpb25zW2FuaW1hdGlvbl0gfHwgQW5pbWF0aW9ucy5zbGlkZSwge25hbWU6IGFuaW1hdGlvbn0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHJhbnNpdGlvbk9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7YW5pbWF0aW9uOiB0aGlzLmFuaW1hdGlvbn07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcblxuICAgICAgICAgICAgJ2l0ZW1zaG93IGl0ZW1oaWRlIGl0ZW1zaG93biBpdGVtaGlkZGVuJzogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUodGFyZ2V0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGJlZm9yZWl0ZW1zaG93OiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRhcmdldCwgdGhpcy5jbHNBY3RpdmUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXRlbXNob3duOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVmLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRhcmdldCwgdGhpcy5jbHNBY3RpdmF0ZWQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXRlbWhpZGRlbjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHJlZi50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0YXJnZXQsIHRoaXMuY2xzQWN0aXZlLCB0aGlzLmNsc0FjdGl2YXRlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBMaWdodGJveFBhbmVsID0ge1xuXG4gICAgICAgIG1peGluczogW0NvbnRhaW5lciwgTW9kYWwsIFRvZ2dsYWJsZSwgU2xpZGVzaG93XSxcblxuICAgICAgICBmdW5jdGlvbmFsOiB0cnVlLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBkZWxheUNvbnRyb2xzOiBOdW1iZXIsXG4gICAgICAgICAgICBwcmVsb2FkOiBOdW1iZXIsXG4gICAgICAgICAgICB2aWRlb0F1dG9wbGF5OiBCb29sZWFuLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgICAgICAgICBwcmVsb2FkOiAxLFxuICAgICAgICAgICAgdmlkZW9BdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICBkZWxheUNvbnRyb2xzOiAzMDAwLFxuICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgY2xzOiAndWstb3BlbicsXG4gICAgICAgICAgICBjbHNQYWdlOiAndWstbGlnaHRib3gtcGFnZScsXG4gICAgICAgICAgICBzZWxMaXN0OiAnLnVrLWxpZ2h0Ym94LWl0ZW1zJyxcbiAgICAgICAgICAgIGF0dHJJdGVtOiAndWstbGlnaHRib3gtaXRlbScsXG4gICAgICAgICAgICBzZWxDbG9zZTogJy51ay1jbG9zZS1sYXJnZScsXG4gICAgICAgICAgICBzZWxDYXB0aW9uOiAnLnVrLWxpZ2h0Ym94LWNhcHRpb24nLFxuICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgIHZlbG9jaXR5OiAyLFxuICAgICAgICAgICAgQW5pbWF0aW9uczogQW5pbWF0aW9ucyQxLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz1cXFwidWstbGlnaHRib3ggdWstb3ZlcmZsb3ctaGlkZGVuXFxcIj4gPHVsIGNsYXNzPVxcXCJ1ay1saWdodGJveC1pdGVtc1xcXCI+PC91bD4gPGRpdiBjbGFzcz1cXFwidWstbGlnaHRib3gtdG9vbGJhciB1ay1wb3NpdGlvbi10b3AgdWstdGV4dC1yaWdodCB1ay10cmFuc2l0aW9uLXNsaWRlLXRvcCB1ay10cmFuc2l0aW9uLW9wYXF1ZVxcXCI+IDxidXR0b24gY2xhc3M9XFxcInVrLWxpZ2h0Ym94LXRvb2xiYXItaWNvbiB1ay1jbG9zZS1sYXJnZVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiB1ay1jbG9zZT48L2J1dHRvbj4gPC9kaXY+IDxhIGNsYXNzPVxcXCJ1ay1saWdodGJveC1idXR0b24gdWstcG9zaXRpb24tY2VudGVyLWxlZnQgdWstcG9zaXRpb24tbWVkaXVtIHVrLXRyYW5zaXRpb24tZmFkZVxcXCIgaHJlZiB1ay1zbGlkZW5hdi1wcmV2aW91cyB1ay1saWdodGJveC1pdGVtPVxcXCJwcmV2aW91c1xcXCI+PC9hPiA8YSBjbGFzcz1cXFwidWstbGlnaHRib3gtYnV0dG9uIHVrLXBvc2l0aW9uLWNlbnRlci1yaWdodCB1ay1wb3NpdGlvbi1tZWRpdW0gdWstdHJhbnNpdGlvbi1mYWRlXFxcIiBocmVmIHVrLXNsaWRlbmF2LW5leHQgdWstbGlnaHRib3gtaXRlbT1cXFwibmV4dFxcXCI+PC9hPiA8ZGl2IGNsYXNzPVxcXCJ1ay1saWdodGJveC10b29sYmFyIHVrLWxpZ2h0Ym94LWNhcHRpb24gdWstcG9zaXRpb24tYm90dG9tIHVrLXRleHQtY2VudGVyIHVrLXRyYW5zaXRpb24tc2xpZGUtYm90dG9tIHVrLXRyYW5zaXRpb24tb3BhcXVlXFxcIj48L2Rpdj4gPC9kaXY+XCJcbiAgICAgICAgfSk7IH0sXG5cbiAgICAgICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciAkZWwgPSAkKHRoaXMudGVtcGxhdGUpO1xuICAgICAgICAgICAgdmFyIGxpc3QgPSAkKHRoaXMuc2VsTGlzdCwgJGVsKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoKSB7IHJldHVybiBhcHBlbmQobGlzdCwgJzxsaT4nKTsgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuJG1vdW50KGFwcGVuZCh0aGlzLmNvbnRhaW5lciwgJGVsKSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBjYXB0aW9uOiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxDYXB0aW9uID0gcmVmLnNlbENhcHRpb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gJCgnLnVrLWxpZ2h0Ym94LWNhcHRpb24nLCAkZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6IChwb2ludGVyTW92ZSArIFwiIFwiICsgcG9pbnRlckRvd24gKyBcIiBrZXlkb3duXCIpLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogJ3Nob3dDb250cm9scydcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbFNsaWRlcztcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ3Nob3duJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93Q29udHJvbHMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGVDb250cm9scygpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuc2xpZGVzLCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RvcCh0aGlzLnNsaWRlcyk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnaGlkZGVuJyxcblxuICAgICAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGVzdHJveSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdrZXl1cCcsXG5cbiAgICAgICAgICAgICAgICBlbDogaW5Ccm93c2VyICYmIGRvY3VtZW50LFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1RvZ2dsZWQodGhpcy4kZWwpIHx8ICF0aGlzLmRyYWdnYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCdwcmV2aW91cycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coJ25leHQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdiZWZvcmVpdGVtc2hvdycsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ2dhYmxlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRWxlbWVudCh0aGlzLiRlbCwgdHJ1ZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gQW5pbWF0aW9ucyQxWydzY2FsZSddO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlLnRhcmdldCwgdGhpcy5jbHNBY3RpdmUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnNwbGljZSgxLCAwLCB0aGlzLmluZGV4KTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2l0ZW1zaG93JyxcblxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGh0bWwodGhpcy5jYXB0aW9uLCB0aGlzLmdldEl0ZW0oKS5jYXB0aW9uIHx8ICcnKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gLXRoaXMucHJlbG9hZDsgaiA8PSB0aGlzLnByZWxvYWQ7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkSXRlbSh0aGlzLmluZGV4ICsgaik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2l0ZW1zaG93bicsXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnZ2FibGUgPSB0aGlzLiRwcm9wcy5kcmFnZ2FibGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBuYW1lOiAnaXRlbWxvYWQnLFxuXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oXywgaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSBpdGVtLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBpdGVtLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbHQgPSBpdGVtLmFsdDsgaWYgKCBhbHQgPT09IHZvaWQgMCApIGFsdCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdGVyID0gaXRlbS5wb3N0ZXI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRycyA9IGl0ZW0uYXR0cnM7IGlmICggYXR0cnMgPT09IHZvaWQgMCApIGF0dHJzID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJdGVtKGl0ZW0sICc8c3BhbiB1ay1zcGlubmVyPjwvc3Bhbj4nKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNyYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZnJhbWVBdHRycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lYm9yZGVyOiAnMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvdzogJ2F1dG9wbGF5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ21heC13aWR0aDogMTAwJTsgYm94LXNpemluZzogYm9yZGVyLWJveDsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3VrLXJlc3BvbnNpdmUnOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd1ay12aWRlbyc6IChcIlwiICsgKHRoaXMudmlkZW9BdXRvcGxheSkpXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdpbWFnZScgfHwgc3JjLm1hdGNoKC9cXC4oanBlP2d8cG5nfGdpZnxzdmd8d2VicCkoJHxcXD8pL2kpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEltYWdlKHNyYywgYXR0cnMuc3Jjc2V0LCBhdHRycy5zaXplKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gcmVmLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcyQxLnNldEl0ZW0oaXRlbSwgY3JlYXRlRWwoJ2ltZycsIGFzc2lnbih7c3JjOiBzcmMsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIGFsdDogYWx0fSwgYXR0cnMpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5zZXRFcnJvcihpdGVtKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBWaWRlb1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd2aWRlbycgfHwgc3JjLm1hdGNoKC9cXC4obXA0fHdlYm18b2d2KSgkfFxcPykvaSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZpZGVvID0gY3JlYXRlRWwoJ3ZpZGVvJywgYXNzaWduKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHNyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXI6IHBvc3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sczogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheXNpbmxpbmU6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1ay12aWRlbyc6IChcIlwiICsgKHRoaXMudmlkZW9BdXRvcGxheSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBhdHRycykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBvbih2aWRlbywgJ2xvYWRlZG1ldGFkYXRhJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIodmlkZW8sIHt3aWR0aDogdmlkZW8udmlkZW9XaWR0aCwgaGVpZ2h0OiB2aWRlby52aWRlb0hlaWdodH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5zZXRJdGVtKGl0ZW0sIHZpZGVvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb24odmlkZW8sICdlcnJvcicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5zZXRFcnJvcihpdGVtKTsgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWZyYW1lXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2lmcmFtZScgfHwgc3JjLm1hdGNoKC9cXC4oaHRtbHxwaHApKCR8XFw/KS9pKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEl0ZW0oaXRlbSwgY3JlYXRlRWwoJ2lmcmFtZScsIGFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBzcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVib3JkZXI6ICcwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW46ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAndWstbGlnaHRib3gtaWZyYW1lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgYXR0cnMpKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gWW91VHViZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChtYXRjaGVzID0gc3JjLm1hdGNoKC9cXC9cXC8oPzouKj95b3V0dWJlKC1ub2Nvb2tpZSk/XFwuLio/Wz8mXXY9fHlvdXR1XFwuYmVcXC8pKFtcXHctXXsxMX0pWyY/XT8oLiopPy8pKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEl0ZW0oaXRlbSwgY3JlYXRlRWwoJ2lmcmFtZScsIGFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAoXCJodHRwczovL3d3dy55b3V0dWJlXCIgKyAobWF0Y2hlc1sxXSB8fCAnJykgKyBcIi5jb20vZW1iZWQvXCIgKyAobWF0Y2hlc1syXSkgKyAobWF0Y2hlc1szXSA/IChcIj9cIiArIChtYXRjaGVzWzNdKSkgOiAnJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxOTIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTA4MFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgaWZyYW1lQXR0cnMsIGF0dHJzKSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFZpbWVvXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoZXMgPSBzcmMubWF0Y2goL1xcL1xcLy4qP3ZpbWVvXFwuW2Etel0rXFwvKFxcZCspWyY/XT8oLiopPy8pKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4KChcImh0dHBzOi8vdmltZW8uY29tL2FwaS9vZW1iZWQuanNvbj9tYXh3aWR0aD0xOTIwJnVybD1cIiArIChlbmNvZGVVUkkoc3JjKSkpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZfcmVzcG9uc2UgPSByZWYucmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSByZWZfcmVzcG9uc2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSByZWZfcmVzcG9uc2Uud2lkdGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMkMS5zZXRJdGVtKGl0ZW0sIGNyZWF0ZUVsKCdpZnJhbWUnLCBhc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IChcImh0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby9cIiArIChtYXRjaGVzWzFdKSArIChtYXRjaGVzWzJdID8gKFwiP1wiICsgKG1hdGNoZXNbMl0pKSA6ICcnKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpZnJhbWVBdHRycywgYXR0cnMpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5zZXRFcnJvcihpdGVtKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgbG9hZEl0ZW06IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCBpbmRleCA9PT0gdm9pZCAwICkgaW5kZXggPSB0aGlzLmluZGV4O1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuZ2V0SXRlbShpbmRleCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0U2xpZGUoaXRlbSkuY2hpbGRFbGVtZW50Q291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ2l0ZW1sb2FkJywgW2l0ZW1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRJdGVtOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICggaW5kZXggPT09IHZvaWQgMCApIGluZGV4ID0gdGhpcy5pbmRleDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2dldEluZGV4KGluZGV4LCB0aGlzLnNsaWRlcyldO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0SXRlbTogZnVuY3Rpb24oaXRlbSwgY29udGVudCkge1xuICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdpdGVtbG9hZGVkJywgW3RoaXMsIGh0bWwodGhpcy5nZXRTbGlkZShpdGVtKSwgY29udGVudCkgXSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRTbGlkZTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNsaWRlc1t0aGlzLml0ZW1zLmluZGV4T2YoaXRlbSldO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0RXJyb3I6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEl0ZW0oaXRlbSwgJzxzcGFuIHVrLWljb249XCJpY29uOiBib2x0OyByYXRpbzogMlwiPjwvc3Bhbj4nKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNob3dDb250cm9sczogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5jb250cm9sc1RpbWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzVGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuaGlkZUNvbnRyb2xzLCB0aGlzLmRlbGF5Q29udHJvbHMpO1xuXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsICd1ay1hY3RpdmUnLCAndWstdHJhbnNpdGlvbi1hY3RpdmUnKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGlkZUNvbnRyb2xzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLiRlbCwgJ3VrLWFjdGl2ZScsICd1ay10cmFuc2l0aW9uLWFjdGl2ZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVFbCh0YWcsIGF0dHJzKSB7XG4gICAgICAgIHZhciBlbCA9IGZyYWdtZW50KChcIjxcIiArIHRhZyArIFwiPlwiKSk7XG4gICAgICAgIGF0dHIoZWwsIGF0dHJzKTtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIHZhciBsaWdodGJveCA9IHtcblxuICAgICAgICBpbnN0YWxsOiBpbnN0YWxsJDIsXG5cbiAgICAgICAgcHJvcHM6IHt0b2dnbGU6IFN0cmluZ30sXG5cbiAgICAgICAgZGF0YToge3RvZ2dsZTogJ2EnfSxcblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICB0b2dnbGVzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2dnbGUgPSByZWYudG9nZ2xlO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkJCh0b2dnbGUsICRlbCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHdhdGNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbXG5cbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKHRoaXMudG9nZ2xlKSArIFwiOm5vdCgudWstZGlzYWJsZWQpXCIpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KGUuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IHVuaXF1ZUJ5KHRoaXMudG9nZ2xlcy5tYXAodG9JdGVtKSwgJ3NvdXJjZScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRWxlbWVudChpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRvSXRlbShpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSByZWYuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGZpbmRJbmRleChpdGVtcywgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHJlZi5zb3VyY2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2UgPT09IHNyYztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5wYW5lbCA9IHRoaXMucGFuZWwgfHwgdGhpcy4kY3JlYXRlKCdsaWdodGJveFBhbmVsJywgYXNzaWduKHt9LCB0aGlzLiRwcm9wcywge2l0ZW1zOiBpdGVtc30pKTtcblxuICAgICAgICAgICAgICAgIG9uKHRoaXMucGFuZWwuJGVsLCAnaGlkZGVuJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnBhbmVsID0gZmFsc2U7IH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFuZWwuc2hvdyhpbmRleCk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFuZWwgJiYgdGhpcy5wYW5lbC5oaWRlKCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaW5zdGFsbCQyKFVJa2l0LCBMaWdodGJveCkge1xuXG4gICAgICAgIGlmICghVUlraXQubGlnaHRib3hQYW5lbCkge1xuICAgICAgICAgICAgVUlraXQuY29tcG9uZW50KCdsaWdodGJveFBhbmVsJywgTGlnaHRib3hQYW5lbCk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3NpZ24oXG4gICAgICAgICAgICBMaWdodGJveC5wcm9wcyxcbiAgICAgICAgICAgIFVJa2l0LmNvbXBvbmVudCgnbGlnaHRib3hQYW5lbCcpLm9wdGlvbnMucHJvcHNcbiAgICAgICAgKTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSXRlbShlbCkge1xuXG4gICAgICAgIHZhciBpdGVtID0ge307XG5cbiAgICAgICAgWydocmVmJywgJ2NhcHRpb24nLCAndHlwZScsICdwb3N0ZXInLCAnYWx0JywgJ2F0dHJzJ10uZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgICAgaXRlbVthdHRyID09PSAnaHJlZicgPyAnc291cmNlJyA6IGF0dHJdID0gZGF0YShlbCwgYXR0cik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0ZW0uYXR0cnMgPSBwYXJzZU9wdGlvbnMoaXRlbS5hdHRycyk7XG5cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuXG4gICAgdmFyIG9iajtcblxuICAgIHZhciBub3RpZmljYXRpb24gPSB7XG5cbiAgICAgICAgZnVuY3Rpb25hbDogdHJ1ZSxcblxuICAgICAgICBhcmdzOiBbJ21lc3NhZ2UnLCAnc3RhdHVzJ10sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbWVzc2FnZTogJycsXG4gICAgICAgICAgICBzdGF0dXM6ICcnLFxuICAgICAgICAgICAgdGltZW91dDogNTAwMCxcbiAgICAgICAgICAgIGdyb3VwOiBudWxsLFxuICAgICAgICAgICAgcG9zOiAndG9wLWNlbnRlcicsXG4gICAgICAgICAgICBjbHNDb250YWluZXI6ICd1ay1ub3RpZmljYXRpb24nLFxuICAgICAgICAgICAgY2xzQ2xvc2U6ICd1ay1ub3RpZmljYXRpb24tY2xvc2UnLFxuICAgICAgICAgICAgY2xzTXNnOiAndWstbm90aWZpY2F0aW9uLW1lc3NhZ2UnXG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5zdGFsbDogaW5zdGFsbCQzLFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIG1hcmdpblByb3A6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBwb3MgPSByZWYucG9zO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcIm1hcmdpblwiICsgKHN0YXJ0c1dpdGgocG9zLCAndG9wJykgPyAnVG9wJyA6ICdCb3R0b20nKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzdGFydFByb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICggb2JqID0ge29wYWNpdHk6IDB9LCBvYmpbdGhpcy5tYXJnaW5Qcm9wXSA9IC10aGlzLiRlbC5vZmZzZXRIZWlnaHQsIG9iaiApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAkKChcIi5cIiArICh0aGlzLmNsc0NvbnRhaW5lcikgKyBcIi1cIiArICh0aGlzLnBvcykpLCB0aGlzLiRjb250YWluZXIpXG4gICAgICAgICAgICAgICAgfHwgYXBwZW5kKHRoaXMuJGNvbnRhaW5lciwgKFwiPGRpdiBjbGFzcz1cXFwiXCIgKyAodGhpcy5jbHNDb250YWluZXIpICsgXCIgXCIgKyAodGhpcy5jbHNDb250YWluZXIpICsgXCItXCIgKyAodGhpcy5wb3MpICsgXCJcXFwiIHN0eWxlPVxcXCJkaXNwbGF5OiBibG9ja1xcXCI+PC9kaXY+XCIpKTtcblxuICAgICAgICAgICAgdGhpcy4kbW91bnQoYXBwZW5kKGNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAoXCI8ZGl2IGNsYXNzPVxcXCJcIiArICh0aGlzLmNsc01zZykgKyAodGhpcy5zdGF0dXMgPyAoXCIgXCIgKyAodGhpcy5jbHNNc2cpICsgXCItXCIgKyAodGhpcy5zdGF0dXMpKSA6ICcnKSArIFwiXFxcIj4gPGEgaHJlZiBjbGFzcz1cXFwiXCIgKyAodGhpcy5jbHNDbG9zZSkgKyBcIlxcXCIgZGF0YS11ay1jbG9zZT48L2E+IDxkaXY+XCIgKyAodGhpcy5tZXNzYWdlKSArIFwiPC9kaXY+IDwvZGl2PlwiKVxuICAgICAgICAgICAgKSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgb2JqO1xuXG5cbiAgICAgICAgICAgIHZhciBtYXJnaW4gPSB0b0Zsb2F0KGNzcyh0aGlzLiRlbCwgdGhpcy5tYXJnaW5Qcm9wKSk7XG4gICAgICAgICAgICBUcmFuc2l0aW9uLnN0YXJ0KFxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgdGhpcy5zdGFydFByb3BzKSxcbiAgICAgICAgICAgICAgICAoIG9iaiA9IHtvcGFjaXR5OiAxfSwgb2JqW3RoaXMubWFyZ2luUHJvcF0gPSBtYXJnaW4sIG9iaiApXG4gICAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzJDEudGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzJDEudGltZXIgPSBzZXRUaW1lb3V0KHRoaXMkMS5jbG9zZSwgdGhpcyQxLnRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiAoIG9iaiA9IHtcblxuICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdChlLnRhcmdldCwgJ2FbaHJlZj1cIiNcIl0sYVtocmVmPVwiXCJdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSwgb2JqW3BvaW50ZXJFbnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIG9ialtwb2ludGVyTGVhdmVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQodGhpcy5jbG9zZSwgdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBvYmogKSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbihpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIHJlbW92ZUZuID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzJDEuJGVsLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzJDEuJGVsLCAnY2xvc2UnLCBbdGhpcyQxXSk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzJDEuJGVsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyICYmICFjb250YWluZXIuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUZuKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydCh0aGlzLiRlbCwgdGhpcy5zdGFydFByb3BzKS50aGVuKHJlbW92ZUZuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGluc3RhbGwkMyhVSWtpdCkge1xuICAgICAgICBVSWtpdC5ub3RpZmljYXRpb24uY2xvc2VBbGwgPSBmdW5jdGlvbiAoZ3JvdXAsIGltbWVkaWF0ZSkge1xuICAgICAgICAgICAgYXBwbHkoZG9jdW1lbnQuYm9keSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IFVJa2l0LmdldENvbXBvbmVudChlbCwgJ25vdGlmaWNhdGlvbicpO1xuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24gJiYgKCFncm91cCB8fCBncm91cCA9PT0gbm90aWZpY2F0aW9uLmdyb3VwKSkge1xuICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb24uY2xvc2UoaW1tZWRpYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcHMgPSBbJ3gnLCAneScsICdiZ3gnLCAnYmd5JywgJ3JvdGF0ZScsICdzY2FsZScsICdjb2xvcicsICdiYWNrZ3JvdW5kQ29sb3InLCAnYm9yZGVyQ29sb3InLCAnb3BhY2l0eScsICdibHVyJywgJ2h1ZScsICdncmF5c2NhbGUnLCAnaW52ZXJ0JywgJ3NhdHVyYXRlJywgJ3NlcGlhJywgJ2ZvcGFjaXR5JywgJ3N0cm9rZSddO1xuXG4gICAgdmFyIFBhcmFsbGF4ID0ge1xuXG4gICAgICAgIG1peGluczogW01lZGlhXSxcblxuICAgICAgICBwcm9wczogcHJvcHMucmVkdWNlKGZ1bmN0aW9uIChwcm9wcywgcHJvcCkge1xuICAgICAgICAgICAgcHJvcHNbcHJvcF0gPSAnbGlzdCc7XG4gICAgICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgICAgIH0sIHt9KSxcblxuICAgICAgICBkYXRhOiBwcm9wcy5yZWR1Y2UoZnVuY3Rpb24gKGRhdGEsIHByb3ApIHtcbiAgICAgICAgICAgIGRhdGFbcHJvcF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSwge30pLFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIHByb3BzOiBmdW5jdGlvbihwcm9wZXJ0aWVzLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzLnJlZHVjZShmdW5jdGlvbiAocHJvcHMsIHByb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQocHJvcGVydGllc1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0NvbG9yID0gcHJvcC5tYXRjaCgvY29sb3IvaSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0Nzc1Byb3AgPSBpc0NvbG9yIHx8IHByb3AgPT09ICdvcGFjaXR5JztcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zLCBiZ1BvcywgZGlmZjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ZXBzID0gcHJvcGVydGllc1twcm9wXS5zbGljZSgwKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDc3NQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoJGVsLCBwcm9wLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RlcHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMudW5zaGlmdCgocHJvcCA9PT0gJ3NjYWxlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaXNDc3NQcm9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY3NzKCRlbCwgcHJvcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwKSB8fCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciB1bml0ID0gZ2V0VW5pdChzdGVwcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29sb3IpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9ICRlbC5zdHlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IHJlZi5jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gc3RlcHMubWFwKGZ1bmN0aW9uIChzdGVwKSB7IHJldHVybiBwYXJzZUNvbG9yKCRlbCwgc3RlcCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGVsLnN0eWxlLmNvbG9yID0gY29sb3I7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFydHNXaXRoKHByb3AsICdiZycpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyID0gcHJvcCA9PT0gJ2JneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IHN0ZXBzLm1hcChmdW5jdGlvbiAoc3RlcCkgeyByZXR1cm4gdG9QeChzdGVwLCBhdHRyLCB0aGlzJDEuJGVsKTsgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcygkZWwsIChcImJhY2tncm91bmQtcG9zaXRpb24tXCIgKyAocHJvcFsyXSkpLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZ1BvcyA9IGNzcygkZWwsICdiYWNrZ3JvdW5kUG9zaXRpb24nKS5zcGxpdCgnICcpW3Byb3BbMl0gPT09ICd4JyA/IDAgOiAxXTsgLy8gSUUgMTEgY2FuJ3QgcmVhZCBiYWNrZ3JvdW5kLXBvc2l0aW9uLVt4fHldXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzJDEuY292ZXJzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWluID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgc3RlcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBzdGVwcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvd24gPSBzdGVwcy5pbmRleE9mKG1pbikgPCBzdGVwcy5pbmRleE9mKG1heCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gbWF4IC0gbWluO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBzdGVwcy5tYXAoZnVuY3Rpb24gKHN0ZXApIHsgcmV0dXJuIHN0ZXAgLSAoZG93biA/IG1pbiA6IG1heCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IChkb3duID8gLWRpZmYgOiAwKSArIFwicHhcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IGJnUG9zO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBzdGVwcy5tYXAodG9GbG9hdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSAnc3Ryb2tlJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0ZXBzLnNvbWUoZnVuY3Rpb24gKHN0ZXApIHsgcmV0dXJuIHN0ZXA7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gZ2V0TWF4UGF0aExlbmd0aCh0aGlzJDEuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcygkZWwsICdzdHJva2VEYXNoYXJyYXknLCBsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5pdCA9PT0gJyUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBzdGVwcy5tYXAoZnVuY3Rpb24gKHN0ZXApIHsgcmV0dXJuIHN0ZXAgKiBsZW5ndGggLyAxMDA7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IHN0ZXBzLnJldmVyc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcCA9ICdzdHJva2VEYXNob2Zmc2V0JztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHByb3BzW3Byb3BdID0ge3N0ZXBzOiBzdGVwcywgdW5pdDogdW5pdCwgcG9zOiBwb3MsIGJnUG9zOiBiZ1BvcywgZGlmZjogZGlmZn07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuXG4gICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBiZ1Byb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2JneCcsICdiZ3knXS5maWx0ZXIoZnVuY3Rpb24gKGJnKSB7IHJldHVybiBiZyBpbiB0aGlzJDEucHJvcHM7IH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY292ZXJzOiBmdW5jdGlvbihfLCAkZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY292ZXJzKCRlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkaXNjb25uZWN0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2ltYWdlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICByZWFkOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIGRhdGEuYWN0aXZlID0gdGhpcy5tYXRjaE1lZGlhO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhLmltYWdlICYmIHRoaXMuY292ZXJzICYmIHRoaXMuYmdQcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IGNzcyh0aGlzLiRlbCwgJ2JhY2tncm91bmRJbWFnZScpLnJlcGxhY2UoL15ub25lfHVybFxcKFtcIiddPyguKz8pW1wiJ10/XFwpJC8sICckMScpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmltYWdlID0gaW1nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWltZy5uYXR1cmFsV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLiR1cGRhdGUoKTsgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gZGF0YS5pbWFnZTtcblxuICAgICAgICAgICAgICAgIGlmICghaW1hZ2UgfHwgIWltYWdlLm5hdHVyYWxXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGRpbUVsID0ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy4kZWwub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy4kZWwub2Zmc2V0SGVpZ2h0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgZGltSW1hZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBpbWFnZS5uYXR1cmFsV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaW1hZ2UubmF0dXJhbEhlaWdodFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgZGltID0gRGltZW5zaW9ucy5jb3ZlcihkaW1JbWFnZSwgZGltRWwpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5iZ1Byb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcyQxLnByb3BzW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IHJlZi5kaWZmO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmdQb3MgPSByZWYuYmdQb3M7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGVwcyA9IHJlZi5zdGVwcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBwcm9wID09PSAnYmd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBkaW1bYXR0cl0gLSBkaW1FbFthdHRyXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3BhbiA8IGRpZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpbUVsW2F0dHJdID0gZGltW2F0dHJdICsgZGlmZiAtIHNwYW47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3BhbiA+IGRpZmYpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc1BlcmNlbnRhZ2UgPSBkaW1FbFthdHRyXSAvIHRvUHgoYmdQb3MsIGF0dHIsIHRoaXMkMS4kZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zUGVyY2VudGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5wcm9wc1twcm9wXS5zdGVwcyA9IHN0ZXBzLm1hcChmdW5jdGlvbiAoc3RlcCkgeyByZXR1cm4gc3RlcCAtIChzcGFuIC0gZGlmZikgLyBwb3NQZXJjZW50YWdlOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IERpbWVuc2lvbnMuY292ZXIoZGltSW1hZ2UsIGRpbUVsKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRhdGEuZGltID0gZGltO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBkaW0gPSByZWYuZGltO1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSByZWYuYWN0aXZlO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsIHtiYWNrZ3JvdW5kU2l6ZTogJycsIGJhY2tncm91bmRSZXBlYXQ6ICcnfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkaW0gJiYgY3NzKHRoaXMuJGVsLCB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAoKGRpbS53aWR0aCkgKyBcInB4IFwiICsgKGRpbS5oZWlnaHQpICsgXCJweFwiKSxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgICAgIGVhY2godGhpcy5nZXRDc3MoMCksIGZ1bmN0aW9uIChfLCBwcm9wKSB7IHJldHVybiBjc3ModGhpcyQxLiRlbCwgcHJvcCwgJycpOyB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldENzczogZnVuY3Rpb24ocGVyY2VudCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BzID0gcmVmLnByb3BzO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKGZ1bmN0aW9uIChjc3MsIHByb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gcHJvcHNbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGVwcyA9IHJlZi5zdGVwcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVuaXQgPSByZWYudW5pdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IHJlZi5wb3M7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKHN0ZXBzLCBwZXJjZW50KTtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJhbnNmb3Jtc1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd5Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSB1bml0IHx8ICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzLnRyYW5zZm9ybSArPSBcIiB0cmFuc2xhdGVcIiArICh1Y2ZpcnN0KHByb3ApKSArIFwiKFwiICsgKHRvRmxvYXQodmFsdWUpLnRvRml4ZWQodW5pdCA9PT0gJ3B4JyA/IDAgOiAyKSkgKyB1bml0ICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSB1bml0IHx8ICdkZWcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcy50cmFuc2Zvcm0gKz0gXCIgcm90YXRlKFwiICsgKHZhbHVlICsgdW5pdCkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NjYWxlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3MudHJhbnNmb3JtICs9IFwiIHNjYWxlKFwiICsgdmFsdWUgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmcgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JneSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiZ3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1soXCJiYWNrZ3JvdW5kLXBvc2l0aW9uLVwiICsgKHByb3BbMl0pKV0gPSBcImNhbGMoXCIgKyBwb3MgKyBcIiArIFwiICsgdmFsdWUgKyBcInB4KVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFja2dyb3VuZENvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvcmRlckNvbG9yJzoge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiQxID0gZ2V0U3RlcChzdGVwcywgcGVyY2VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcmVmJDFbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCA9IHJlZiQxWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gcmVmJDFbMl07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NbcHJvcF0gPSBcInJnYmEoXCIgKyAoc3RhcnQubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArIHAgKiAoZW5kW2ldIC0gdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT09IDMgPyB0b0Zsb2F0KHZhbHVlKSA6IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oJywnKSkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENTUyBGaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JsdXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSB1bml0IHx8ICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzLmZpbHRlciArPSBcIiBibHVyKFwiICsgKHZhbHVlICsgdW5pdCkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2h1ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdCA9IHVuaXQgfHwgJ2RlZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzLmZpbHRlciArPSBcIiBodWUtcm90YXRlKFwiICsgKHZhbHVlICsgdW5pdCkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvcGFjaXR5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0ID0gdW5pdCB8fCAnJSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzLmZpbHRlciArPSBcIiBvcGFjaXR5KFwiICsgKHZhbHVlICsgdW5pdCkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dyYXlzY2FsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnZlcnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2F0dXJhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2VwaWEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSB1bml0IHx8ICclJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3MuZmlsdGVyICs9IFwiIFwiICsgcHJvcCArIFwiKFwiICsgKHZhbHVlICsgdW5pdCkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3NzO1xuXG4gICAgICAgICAgICAgICAgfSwge3RyYW5zZm9ybTogJycsIGZpbHRlcjogJyd9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwYXJzZUNvbG9yKGVsLCBjb2xvcikge1xuICAgICAgICByZXR1cm4gY3NzKGNzcyhlbCwgJ2NvbG9yJywgY29sb3IpLCAnY29sb3InKVxuICAgICAgICAgICAgLnNwbGl0KC9bKCksXS9nKVxuICAgICAgICAgICAgLnNsaWNlKDEsIC0xKVxuICAgICAgICAgICAgLmNvbmNhdCgxKVxuICAgICAgICAgICAgLnNsaWNlKDAsIDQpXG4gICAgICAgICAgICAubWFwKHRvRmxvYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN0ZXAoc3RlcHMsIHBlcmNlbnQpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gc3RlcHMubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGluZGV4ID0gTWF0aC5taW4oTWF0aC5mbG9vcihjb3VudCAqIHBlcmNlbnQpLCBjb3VudCAtIDEpO1xuICAgICAgICB2YXIgc3RlcCA9IHN0ZXBzLnNsaWNlKGluZGV4LCBpbmRleCArIDIpO1xuXG4gICAgICAgIHN0ZXAucHVzaChwZXJjZW50ID09PSAxID8gMSA6IHBlcmNlbnQgJSAoMSAvIGNvdW50KSAqIGNvdW50KTtcblxuICAgICAgICByZXR1cm4gc3RlcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWYWx1ZShzdGVwcywgcGVyY2VudCwgZGlnaXRzKSB7XG4gICAgICAgIGlmICggZGlnaXRzID09PSB2b2lkIDAgKSBkaWdpdHMgPSAyO1xuXG4gICAgICAgIHZhciByZWYgPSBnZXRTdGVwKHN0ZXBzLCBwZXJjZW50KTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gcmVmWzBdO1xuICAgICAgICB2YXIgZW5kID0gcmVmWzFdO1xuICAgICAgICB2YXIgcCA9IHJlZlsyXTtcbiAgICAgICAgcmV0dXJuIChpc051bWJlcihzdGFydClcbiAgICAgICAgICAgID8gc3RhcnQgKyBNYXRoLmFicyhzdGFydCAtIGVuZCkgKiBwICogKHN0YXJ0IDwgZW5kID8gMSA6IC0xKVxuICAgICAgICAgICAgOiArZW5kXG4gICAgICAgICkudG9GaXhlZChkaWdpdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFVuaXQoc3RlcHMpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXBzLnJlZHVjZShmdW5jdGlvbiAodW5pdCwgc3RlcCkgeyByZXR1cm4gaXNTdHJpbmcoc3RlcCkgJiYgc3RlcC5yZXBsYWNlKC8tfFxcZC9nLCAnJykudHJpbSgpIHx8IHVuaXQ7IH0sICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb3ZlcnMoZWwpIHtcbiAgICAgICAgdmFyIHJlZiA9IGVsLnN0eWxlO1xuICAgICAgICB2YXIgYmFja2dyb3VuZFNpemUgPSByZWYuYmFja2dyb3VuZFNpemU7XG4gICAgICAgIHZhciBjb3ZlcnMgPSBjc3MoY3NzKGVsLCAnYmFja2dyb3VuZFNpemUnLCAnJyksICdiYWNrZ3JvdW5kU2l6ZScpID09PSAnY292ZXInO1xuICAgICAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IGJhY2tncm91bmRTaXplO1xuICAgICAgICByZXR1cm4gY292ZXJzO1xuICAgIH1cblxuICAgIHZhciBwYXJhbGxheCA9IHtcblxuICAgICAgICBtaXhpbnM6IFtQYXJhbGxheF0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHRhcmdldDogU3RyaW5nLFxuICAgICAgICAgICAgdmlld3BvcnQ6IE51bWJlcixcbiAgICAgICAgICAgIGVhc2luZzogTnVtYmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGFyZ2V0OiBmYWxzZSxcbiAgICAgICAgICAgIHZpZXdwb3J0OiAxLFxuICAgICAgICAgICAgZWFzaW5nOiAxXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgdGFyZ2V0OiBmdW5jdGlvbihyZWYsICRlbCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSByZWYudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE9mZnNldEVsZW1lbnQodGFyZ2V0ICYmIHF1ZXJ5KHRhcmdldCwgJGVsKSB8fCAkZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlOiB7XG5cbiAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKHJlZiwgdHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBwZXJjZW50ID0gcmVmLnBlcmNlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHJlZi5hY3RpdmU7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSAnc2Nyb2xsJykge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gcGVyY2VudDtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gZWFzZShzY3JvbGxlZE92ZXIodGhpcy50YXJnZXQpIC8gKHRoaXMudmlld3BvcnQgfHwgMSksIHRoaXMuZWFzaW5nKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHBlcmNlbnQ6IHBlcmNlbnQsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBwcmV2ICE9PSBwZXJjZW50ID8gdGhpcy5nZXRDc3MocGVyY2VudCkgOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gcmVmLnN0eWxlO1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSByZWYuYWN0aXZlO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHlsZSAmJiBjc3ModGhpcy4kZWwsIHN0eWxlKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Njcm9sbCcsICdyZXNpemUnXVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZWFzZShwZXJjZW50LCBlYXNpbmcpIHtcbiAgICAgICAgcmV0dXJuIGNsYW1wKHBlcmNlbnQgKiAoMSAtIChlYXNpbmcgLSBlYXNpbmcgKiBwZXJjZW50KSkpO1xuICAgIH1cblxuICAgIC8vIFNWRyBlbGVtZW50cyBkbyBub3QgaW5oZXJpdCBmcm9tIEhUTUxFbGVtZW50XG4gICAgZnVuY3Rpb24gZ2V0T2Zmc2V0RWxlbWVudChlbCkge1xuICAgICAgICByZXR1cm4gZWxcbiAgICAgICAgICAgID8gJ29mZnNldFRvcCcgaW4gZWxcbiAgICAgICAgICAgICAgICA/IGVsXG4gICAgICAgICAgICAgICAgOiBnZXRPZmZzZXRFbGVtZW50KGVsLnBhcmVudE5vZGUpXG4gICAgICAgICAgICA6IGRvY3VtZW50LmJvZHk7XG4gICAgfVxuXG4gICAgdmFyIFNsaWRlclJlYWN0aXZlID0ge1xuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggfHwgdGhpcy5kcmFnZ2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5nZXRWYWxpZEluZGV4KHRoaXMuaW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF+dGhpcy5wcmV2SW5kZXggfHwgdGhpcy5pbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KGluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBUcmFuc2l0aW9uZXIkMSAocHJldiwgbmV4dCwgZGlyLCByZWYpIHtcbiAgICAgICAgdmFyIGNlbnRlciA9IHJlZi5jZW50ZXI7XG4gICAgICAgIHZhciBlYXNpbmcgPSByZWYuZWFzaW5nO1xuICAgICAgICB2YXIgbGlzdCA9IHJlZi5saXN0O1xuXG5cbiAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG5cbiAgICAgICAgdmFyIGZyb20gPSBwcmV2XG4gICAgICAgICAgICA/IGdldExlZnQocHJldiwgbGlzdCwgY2VudGVyKVxuICAgICAgICAgICAgOiBnZXRMZWZ0KG5leHQsIGxpc3QsIGNlbnRlcikgKyBvZmZzZXQobmV4dCkud2lkdGggKiBkaXI7XG4gICAgICAgIHZhciB0byA9IG5leHRcbiAgICAgICAgICAgID8gZ2V0TGVmdChuZXh0LCBsaXN0LCBjZW50ZXIpXG4gICAgICAgICAgICA6IGZyb20gKyBvZmZzZXQocHJldikud2lkdGggKiBkaXIgKiAoaXNSdGwgPyAtMSA6IDEpO1xuXG4gICAgICAgIHJldHVybiB7XG5cbiAgICAgICAgICAgIGRpcjogZGlyLFxuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkdXJhdGlvbiwgcGVyY2VudCwgbGluZWFyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBwZXJjZW50ID09PSB2b2lkIDAgKSBwZXJjZW50ID0gMDtcblxuXG4gICAgICAgICAgICAgICAgdmFyIHRpbWluZyA9IGxpbmVhciA/ICdsaW5lYXInIDogZWFzaW5nO1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uIC09IE1hdGgucm91bmQoZHVyYXRpb24gKiBjbGFtcChwZXJjZW50LCAtMSwgMSkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUocGVyY2VudCk7XG5cbiAgICAgICAgICAgICAgICBwcmV2ICYmIHRoaXMudXBkYXRlVHJhbnNsYXRlcygpO1xuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSBwcmV2ID8gcGVyY2VudCA6IGNsYW1wKHBlcmNlbnQsIDAsIDEpO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJVcGRhdGUkMSh0aGlzLmdldEl0ZW1JbigpLCAnaXRlbWluJywge3BlcmNlbnQ6IHBlcmNlbnQsIGR1cmF0aW9uOiBkdXJhdGlvbiwgdGltaW5nOiB0aW1pbmcsIGRpcjogZGlyfSk7XG4gICAgICAgICAgICAgICAgcHJldiAmJiB0cmlnZ2VyVXBkYXRlJDEodGhpcy5nZXRJdGVtSW4odHJ1ZSksICdpdGVtb3V0Jywge3BlcmNlbnQ6IDEgLSBwZXJjZW50LCBkdXJhdGlvbjogZHVyYXRpb24sIHRpbWluZzogdGltaW5nLCBkaXI6IGRpcn0pO1xuXG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvblxuICAgICAgICAgICAgICAgICAgICAuc3RhcnQobGlzdCwge3RyYW5zZm9ybTogdHJhbnNsYXRlKC10byAqIChpc1J0bCA/IC0xIDogMSksICdweCcpfSwgZHVyYXRpb24sIHRpbWluZylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSwgbm9vcCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRyYW5zaXRpb24uc3RvcChsaXN0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwobGlzdCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY3NzKGxpc3QsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmb3J3YXJkOiBmdW5jdGlvbihkdXJhdGlvbiwgcGVyY2VudCkge1xuICAgICAgICAgICAgICAgIGlmICggcGVyY2VudCA9PT0gdm9pZCAwICkgcGVyY2VudCA9IHRoaXMucGVyY2VudCgpO1xuXG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwobGlzdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvdyhkdXJhdGlvbiwgcGVyY2VudCwgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMuZ2V0RGlzdGFuY2UoKSAqIGRpciAqIChpc1J0bCA/IC0xIDogMSk7XG5cbiAgICAgICAgICAgICAgICBjc3MobGlzdCwgJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZShjbGFtcChcbiAgICAgICAgICAgICAgICAgICAgLXRvICsgKGRpc3RhbmNlIC0gZGlzdGFuY2UgKiBwZXJjZW50KSxcbiAgICAgICAgICAgICAgICAgICAgLWdldFdpZHRoKGxpc3QpLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQobGlzdCkud2lkdGhcbiAgICAgICAgICAgICAgICApICogKGlzUnRsID8gLTEgOiAxKSwgJ3B4JykpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUcmFuc2xhdGVzKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gY2xhbXAocGVyY2VudCwgLTEsIDEpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlJDEodGhpcy5nZXRJdGVtSW4oKSwgJ2l0ZW10cmFuc2xhdGVpbicsIHtwZXJjZW50OiBwZXJjZW50LCBkaXI6IGRpcn0pO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlJDEodGhpcy5nZXRJdGVtSW4odHJ1ZSksICdpdGVtdHJhbnNsYXRlb3V0Jywge3BlcmNlbnQ6IDEgLSBwZXJjZW50LCBkaXI6IGRpcn0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKChjc3MobGlzdCwgJ3RyYW5zZm9ybScpLnNwbGl0KCcsJylbNF0gKiAoaXNSdGwgPyAtMSA6IDEpICsgZnJvbSkgLyAodG8gLSBmcm9tKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXREaXN0YW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHRvIC0gZnJvbSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRJdGVtSW46IGZ1bmN0aW9uKG91dCkge1xuICAgICAgICAgICAgICAgIGlmICggb3V0ID09PSB2b2lkIDAgKSBvdXQgPSBmYWxzZTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZXMgPSB0aGlzLmdldEFjdGl2ZXMoKTtcbiAgICAgICAgICAgICAgICB2YXIgYWxsID0gc29ydEJ5KHNsaWRlcyhsaXN0KSwgJ29mZnNldExlZnQnKTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGluZGV4KGFsbCwgYWN0aXZlc1tkaXIgKiAob3V0ID8gLTEgOiAxKSA+IDAgPyBhY3RpdmVzLmxlbmd0aCAtIDEgOiAwXSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gfmkgJiYgYWxsW2kgKyAocHJldiAmJiAhb3V0ID8gZGlyIDogMCldO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRBY3RpdmVzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gZ2V0TGVmdChwcmV2IHx8IG5leHQsIGxpc3QsIGNlbnRlcik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc29ydEJ5KHNsaWRlcyhsaXN0KS5maWx0ZXIoZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZUxlZnQgPSBnZXRFbExlZnQoc2xpZGUsIGxpc3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpZGVMZWZ0ID49IGxlZnQgJiYgc2xpZGVMZWZ0ICsgb2Zmc2V0KHNsaWRlKS53aWR0aCA8PSBvZmZzZXQobGlzdCkud2lkdGggKyBsZWZ0O1xuICAgICAgICAgICAgICAgIH0pLCAnb2Zmc2V0TGVmdCcpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGVUcmFuc2xhdGVzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVzID0gdGhpcy5nZXRBY3RpdmVzKCk7XG5cbiAgICAgICAgICAgICAgICBzbGlkZXMobGlzdCkuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gaW5jbHVkZXMoYWN0aXZlcywgc2xpZGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJVcGRhdGUkMShzbGlkZSwgKFwiaXRlbXRyYW5zbGF0ZVwiICsgKGlzQWN0aXZlID8gJ2luJyA6ICdvdXQnKSksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnQ6IGlzQWN0aXZlID8gMSA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXI6IHNsaWRlLm9mZnNldExlZnQgPD0gbmV4dC5vZmZzZXRMZWZ0ID8gMSA6IC0xXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRMZWZ0KGVsLCBsaXN0LCBjZW50ZXIpIHtcblxuICAgICAgICB2YXIgbGVmdCA9IGdldEVsTGVmdChlbCwgbGlzdCk7XG5cbiAgICAgICAgcmV0dXJuIGNlbnRlclxuICAgICAgICAgICAgPyBsZWZ0IC0gY2VudGVyRWwoZWwsIGxpc3QpXG4gICAgICAgICAgICA6IE1hdGgubWluKGxlZnQsIGdldE1heChsaXN0KSk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXgobGlzdCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgZ2V0V2lkdGgobGlzdCkgLSBvZmZzZXQobGlzdCkud2lkdGgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdpZHRoKGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIHNsaWRlcyhsaXN0KS5yZWR1Y2UoZnVuY3Rpb24gKHJpZ2h0LCBlbCkgeyByZXR1cm4gb2Zmc2V0KGVsKS53aWR0aCArIHJpZ2h0OyB9LCAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXhXaWR0aChsaXN0KSB7XG4gICAgICAgIHJldHVybiBzbGlkZXMobGlzdCkucmVkdWNlKGZ1bmN0aW9uIChyaWdodCwgZWwpIHsgcmV0dXJuIE1hdGgubWF4KHJpZ2h0LCBvZmZzZXQoZWwpLndpZHRoKTsgfSwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2VudGVyRWwoZWwsIGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIG9mZnNldChsaXN0KS53aWR0aCAvIDIgLSBvZmZzZXQoZWwpLndpZHRoIC8gMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFbExlZnQoZWwsIGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIChwb3NpdGlvbihlbCkubGVmdCArIChpc1J0bCA/IG9mZnNldChlbCkud2lkdGggLSBvZmZzZXQobGlzdCkud2lkdGggOiAwKSkgKiAoaXNSdGwgPyAtMSA6IDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyaWdnZXJVcGRhdGUkMShlbCwgdHlwZSwgZGF0YSkge1xuICAgICAgICB0cmlnZ2VyKGVsLCBjcmVhdGVFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIGRhdGEpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbGlkZXMobGlzdCkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4obGlzdCk7XG4gICAgfVxuXG4gICAgdmFyIHNsaWRlciA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgU2xpZGVyLCBTbGlkZXJSZWFjdGl2ZV0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGNlbnRlcjogQm9vbGVhbixcbiAgICAgICAgICAgIHNldHM6IEJvb2xlYW5cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjZW50ZXI6IGZhbHNlLFxuICAgICAgICAgICAgc2V0czogZmFsc2UsXG4gICAgICAgICAgICBhdHRySXRlbTogJ3VrLXNsaWRlci1pdGVtJyxcbiAgICAgICAgICAgIHNlbExpc3Q6ICcudWstc2xpZGVyLWl0ZW1zJyxcbiAgICAgICAgICAgIHNlbE5hdjogJy51ay1zbGlkZXItbmF2JyxcbiAgICAgICAgICAgIGNsc0NvbnRhaW5lcjogJ3VrLXNsaWRlci1jb250YWluZXInLFxuICAgICAgICAgICAgVHJhbnNpdGlvbmVyOiBUcmFuc2l0aW9uZXIkMVxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGF2Z1dpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0V2lkdGgodGhpcy5saXN0KSAvIHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmluaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmluaXRlID0gcmVmLmZpbml0ZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmaW5pdGUgfHwgTWF0aC5jZWlsKGdldFdpZHRoKHRoaXMubGlzdCkpIDwgb2Zmc2V0KHRoaXMubGlzdCkud2lkdGggKyBnZXRNYXhXaWR0aCh0aGlzLmxpc3QpICsgdGhpcy5jZW50ZXI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBtYXhJbmRleDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZmluaXRlIHx8IHRoaXMuY2VudGVyICYmICF0aGlzLnNldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3QodGhpcy5zZXRzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy5zbGlkZXMsICdvcmRlcicsICcnKTtcblxuICAgICAgICAgICAgICAgIHZhciBtYXggPSBnZXRNYXgodGhpcy5saXN0KTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0RWxMZWZ0KHRoaXMubGlzdC5jaGlsZHJlbltpXSwgdGhpcy5saXN0KSA8IG1heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKGkgKyAxLCB0aGlzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZXRzOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgc2V0cyA9IHJlZi5zZXRzO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBvZmZzZXQodGhpcy5saXN0KS53aWR0aCAvICh0aGlzLmNlbnRlciA/IDIgOiAxKTtcblxuICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdENlbnRlciA9IHdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZUxlZnQgPSAwO1xuXG4gICAgICAgICAgICAgICAgc2V0cyA9IHNldHMgJiYgdGhpcy5zbGlkZXMucmVkdWNlKGZ1bmN0aW9uIChzZXRzLCBzbGlkZSwgaSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBvZmZzZXQoc2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVXaWR0aCA9IHJlZi53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlUmlnaHQgPSBzbGlkZUxlZnQgKyBzbGlkZVdpZHRoO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZVJpZ2h0ID4gbGVmdCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMkMS5jZW50ZXIgJiYgaSA+IHRoaXMkMS5tYXhJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzJDEubWF4SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5jbHVkZXMoc2V0cywgaSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbXAgPSB0aGlzJDEuc2xpZGVzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyQxLmNlbnRlciAmJiBjbXAgJiYgc2xpZGVXaWR0aCA8IGxlZnRDZW50ZXIgLSBvZmZzZXQoY21wKS53aWR0aCAvIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdENlbnRlciAtPSBzbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRDZW50ZXIgPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0cy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gc2xpZGVMZWZ0ICsgd2lkdGggKyAodGhpcyQxLmNlbnRlciA/IHNsaWRlV2lkdGggLyAyIDogMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUxlZnQgKz0gc2xpZGVXaWR0aDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0cztcblxuICAgICAgICAgICAgICAgIH0sIFtdKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAhaXNFbXB0eShzZXRzKSAmJiBzZXRzO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2l0aW9uT3B0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB0aGlzLmNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgbGlzdDogdGhpcy5saXN0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNDb250YWluZXIsICEkKChcIi5cIiArICh0aGlzLmNsc0NvbnRhaW5lcikpLCB0aGlzLiRlbCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZToge1xuXG4gICAgICAgICAgICB3cml0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgICQkKChcIltcIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXSxbZGF0YS1cIiArICh0aGlzLmF0dHJJdGVtKSArIFwiXVwiKSwgdGhpcy4kZWwpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGRhdGEoZWwsIHRoaXMkMS5hdHRySXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5tYXhJbmRleCAmJiB0b2dnbGVDbGFzcyhlbCwgJ3VrLWhpZGRlbicsIGlzTnVtZXJpYyhpbmRleCkgJiYgKHRoaXMkMS5zZXRzICYmICFpbmNsdWRlcyh0aGlzJDEuc2V0cywgdG9GbG9hdChpbmRleCkpIHx8IGluZGV4ID4gdGhpcyQxLm1heEluZGV4KSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggJiYgIXRoaXMuZHJhZ2dpbmcgJiYgIXRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVvcmRlcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2xhdGUoMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZXMgPSB0aGlzLl9nZXRUcmFuc2l0aW9uZXIodGhpcy5pbmRleCkuZ2V0QWN0aXZlcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlKSB7IHJldHVybiB0b2dnbGVDbGFzcyhzbGlkZSwgdGhpcyQxLmNsc0FjdGl2ZSwgaW5jbHVkZXMoYWN0aXZlcywgc2xpZGUpKTsgfSk7XG4gICAgICAgICAgICAgICAgKCF0aGlzLnNldHMgfHwgaW5jbHVkZXModGhpcy5zZXRzLCB0b0Zsb2F0KHRoaXMuaW5kZXgpKSkgJiYgdGhpcy5zbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUpIHsgcmV0dXJuIHRvZ2dsZUNsYXNzKHNsaWRlLCB0aGlzJDEuY2xzQWN0aXZhdGVkLCBpbmNsdWRlcyhhY3RpdmVzLCBzbGlkZSkpOyB9KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcblxuICAgICAgICAgICAgYmVmb3JlaXRlbXNob3c6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kcmFnZ2luZyAmJiB0aGlzLnNldHMgJiYgdGhpcy5zdGFjay5sZW5ndGggPCAyICYmICFpbmNsdWRlcyh0aGlzLnNldHMsIHRoaXMuaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmdldFZhbGlkSW5kZXgoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IE1hdGguYWJzKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4XG4gICAgICAgICAgICAgICAgICAgIC0gdGhpcy5wcmV2SW5kZXhcbiAgICAgICAgICAgICAgICAgICAgKyAodGhpcy5kaXIgPiAwICYmIHRoaXMuaW5kZXggPCB0aGlzLnByZXZJbmRleCB8fCB0aGlzLmRpciA8IDAgJiYgdGhpcy5pbmRleCA+IHRoaXMucHJldkluZGV4ID8gKHRoaXMubWF4SW5kZXggKyAxKSAqIHRoaXMuZGlyIDogMClcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWdnaW5nICYmIGRpZmYgPiAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaWZmOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2suc3BsaWNlKDEsIDAsIHRoaXMuZGlyID4gMCA/ICduZXh0JyA6ICdwcmV2aW91cycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IHNwZWVkVXAodGhpcy5hdmdXaWR0aCAvIHRoaXMudmVsb2NpdHkpXG4gICAgICAgICAgICAgICAgICAgICogKG9mZnNldChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyIDwgMCB8fCAhdGhpcy5zbGlkZXNbdGhpcy5wcmV2SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnNsaWRlc1t0aGlzLmluZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5zbGlkZXNbdGhpcy5wcmV2SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICkud2lkdGggLyB0aGlzLmF2Z1dpZHRoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucmVvcmRlcigpO1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpdGVtc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgfnRoaXMucHJldkluZGV4ICYmIGFkZENsYXNzKHRoaXMuX2dldFRyYW5zaXRpb25lcigpLmdldEl0ZW1JbigpLCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHJlb3JkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maW5pdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuc2xpZGVzLCAnb3JkZXInLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmRpciA+IDAgJiYgdGhpcy5zbGlkZXNbdGhpcy5wcmV2SW5kZXhdID8gdGhpcy5wcmV2SW5kZXggOiB0aGlzLmluZGV4O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUsIGkpIHsgcmV0dXJuIGNzcyhzbGlkZSwgJ29yZGVyJywgdGhpcyQxLmRpciA+IDAgJiYgaSA8IGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcyQxLmRpciA8IDAgJiYgaSA+PSB0aGlzJDEuaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICApOyB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gdGhpcy5zbGlkZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IG9mZnNldCh0aGlzLmxpc3QpLndpZHRoIC8gMiAtIG9mZnNldChuZXh0KS53aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgdmFyIGogPSAwO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKHdpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0SW5kZXgoLS1qICsgaW5kZXgsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbc2xpZGVJbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgY3NzKHNsaWRlLCAnb3JkZXInLCBzbGlkZUluZGV4ID4gaW5kZXggPyAtMiA6IC0xKTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggLT0gb2Zmc2V0KHNsaWRlKS53aWR0aDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFZhbGlkSW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBwcmV2SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIGluZGV4ID09PSB2b2lkIDAgKSBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKCBwcmV2SW5kZXggPT09IHZvaWQgMCApIHByZXZJbmRleCA9IHRoaXMucHJldkluZGV4O1xuXG5cbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuZ2V0SW5kZXgoaW5kZXgsIHByZXZJbmRleCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2V0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHByZXY7XG5cbiAgICAgICAgICAgICAgICBkbyB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGluY2x1ZGVzKHRoaXMuc2V0cywgaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwcmV2ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5nZXRJbmRleChpbmRleCArIHRoaXMuZGlyLCBwcmV2SW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoaW5kZXggIT09IHByZXYpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB2YXIgc2xpZGVyUGFyYWxsYXggPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbUGFyYWxsYXhdLFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHNlbEl0ZW06ICchbGknXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAgICAgaXRlbTogZnVuY3Rpb24ocmVmLCAkZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsSXRlbSA9IHJlZi5zZWxJdGVtO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5KHNlbEl0ZW0sICRlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFtcblxuICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgbmFtZTogJ2l0ZW1zaG93bicsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB0aGlzLmdldENzcyguNSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdpdGVtaW4gaXRlbW91dCcsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZl9kZXRhaWwgPSByZWYuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudCA9IHJlZl9kZXRhaWwucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gcmVmX2RldGFpbC5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWluZyA9IHJlZl9kZXRhaWwudGltaW5nO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlyID0gcmVmX2RldGFpbC5kaXI7XG5cblxuICAgICAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbCh0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgdGhpcy5nZXRDc3MoZ2V0Q3VycmVudCh0eXBlLCBkaXIsIHBlcmNlbnQpKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydCh0aGlzLiRlbCwgdGhpcy5nZXRDc3MoaXNJbih0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAuNVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBkaXIgPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwXG4gICAgICAgICAgICAgICAgICAgICksIGR1cmF0aW9uLCB0aW1pbmcpLmNhdGNoKG5vb3ApO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICd0cmFuc2l0aW9uY2FuY2VsZWQgdHJhbnNpdGlvbmVuZCcsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5jYW5jZWwodGhpcy4kZWwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdpdGVtdHJhbnNsYXRlaW4gaXRlbXRyYW5zbGF0ZW91dCcsXG5cbiAgICAgICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZl9kZXRhaWwgPSByZWYuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudCA9IHJlZl9kZXRhaWwucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpciA9IHJlZl9kZXRhaWwuZGlyO1xuXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB0aGlzLmdldENzcyhnZXRDdXJyZW50KHR5cGUsIGRpciwgcGVyY2VudCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzSW4odHlwZSkge1xuICAgICAgICByZXR1cm4gZW5kc1dpdGgodHlwZSwgJ2luJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudCh0eXBlLCBkaXIsIHBlcmNlbnQpIHtcblxuICAgICAgICBwZXJjZW50IC89IDI7XG5cbiAgICAgICAgcmV0dXJuICFpc0luKHR5cGUpXG4gICAgICAgICAgICA/IGRpciA8IDBcbiAgICAgICAgICAgICAgICA/IHBlcmNlbnRcbiAgICAgICAgICAgICAgICA6IDEgLSBwZXJjZW50XG4gICAgICAgICAgICA6IGRpciA8IDBcbiAgICAgICAgICAgICAgICA/IDEgLSBwZXJjZW50XG4gICAgICAgICAgICAgICAgOiBwZXJjZW50O1xuICAgIH1cblxuICAgIHZhciBBbmltYXRpb25zJDIgPSBhc3NpZ24oe30sIEFuaW1hdGlvbnMsIHtcblxuICAgICAgICBmYWRlOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAwLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICB7ekluZGV4OiAtMX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxIC0gY3NzKGN1cnJlbnQsICdvcGFjaXR5Jyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogMSAtIHBlcmNlbnQsIHpJbmRleDogMH0sXG4gICAgICAgICAgICAgICAgICAgIHt6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBzY2FsZToge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7b3BhY2l0eTogMCwgdHJhbnNmb3JtOiBzY2FsZTNkKDEgKyAuNSksIHpJbmRleDogMH0sXG4gICAgICAgICAgICAgICAgICAgIHt6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwZXJjZW50OiBmdW5jdGlvbihjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgLSBjc3MoY3VycmVudCwgJ29wYWNpdHknKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24ocGVyY2VudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHtvcGFjaXR5OiAxIC0gcGVyY2VudCwgdHJhbnNmb3JtOiBzY2FsZTNkKDEgKyAuNSAqIHBlcmNlbnQpLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICB7ekluZGV4OiAtMX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgcHVsbDoge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlyIDwgMFxuICAgICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMCksIHpJbmRleDogLTF9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKCksIHpJbmRleDogMH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTAwKSwgekluZGV4OiAwfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgpLCB6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCwgbmV4dCwgZGlyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpciA8IDBcbiAgICAgICAgICAgICAgICAgICAgPyAxIC0gdHJhbnNsYXRlZChuZXh0KVxuICAgICAgICAgICAgICAgICAgICA6IHRyYW5zbGF0ZWQoY3VycmVudCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQsIGRpcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkaXIgPCAwXG4gICAgICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKDMwICogcGVyY2VudCksIHpJbmRleDogLTF9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0xMDAgKiAoMSAtIHBlcmNlbnQpKSwgekluZGV4OiAwfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC1wZXJjZW50ICogMTAwKSwgekluZGV4OiAwfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMCAqICgxIC0gcGVyY2VudCkpLCB6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgcHVzaDoge1xuXG4gICAgICAgICAgICBzaG93OiBmdW5jdGlvbihkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlyIDwgMFxuICAgICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDApLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKCksIHpJbmRleDogLTF9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoLTMwKSwgekluZGV4OiAtMX0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoKSwgekluZGV4OiAwfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGVyY2VudDogZnVuY3Rpb24oY3VycmVudCwgbmV4dCwgZGlyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpciA+IDBcbiAgICAgICAgICAgICAgICAgICAgPyAxIC0gdHJhbnNsYXRlZChuZXh0KVxuICAgICAgICAgICAgICAgICAgICA6IHRyYW5zbGF0ZWQoY3VycmVudCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKHBlcmNlbnQsIGRpcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkaXIgPCAwXG4gICAgICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKHBlcmNlbnQgKiAxMDApLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0zMCAqICgxIC0gcGVyY2VudCkpLCB6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0zMCAqIHBlcmNlbnQpLCB6SW5kZXg6IC0xfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxMDAgKiAoMSAtIHBlcmNlbnQpKSwgekluZGV4OiAwfVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgdmFyIHNsaWRlc2hvdyA9IHtcblxuICAgICAgICBtaXhpbnM6IFtDbGFzcywgU2xpZGVzaG93LCBTbGlkZXJSZWFjdGl2ZV0sXG5cbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHJhdGlvOiBTdHJpbmcsXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IE51bWJlcixcbiAgICAgICAgICAgIG1heEhlaWdodDogTnVtYmVyXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcmF0aW86ICcxNjo5JyxcbiAgICAgICAgICAgIG1pbkhlaWdodDogZmFsc2UsXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgc2VsTGlzdDogJy51ay1zbGlkZXNob3ctaXRlbXMnLFxuICAgICAgICAgICAgYXR0ckl0ZW06ICd1ay1zbGlkZXNob3ctaXRlbScsXG4gICAgICAgICAgICBzZWxOYXY6ICcudWstc2xpZGVzaG93LW5hdicsXG4gICAgICAgICAgICBBbmltYXRpb25zOiBBbmltYXRpb25zJDJcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5yYXRpby5zcGxpdCgnOicpLm1hcChOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZlswXTtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmWzFdO1xuXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0ICogdGhpcy5saXN0Lm9mZnNldFdpZHRoIC8gd2lkdGggfHwgMDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pbkhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1heCh0aGlzLm1pbkhlaWdodCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5tYXhIZWlnaHQsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtoZWlnaHQ6IGhlaWdodCAtIGJveE1vZGVsQWRqdXN0KHRoaXMubGlzdCwgJ2hlaWdodCcsICdjb250ZW50LWJveCcpfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgICAgICAgICAgICAgIGhlaWdodCA+IDAgJiYgY3NzKHRoaXMubGlzdCwgJ21pbkhlaWdodCcsIGhlaWdodCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdmFyIHNvcnRhYmxlID0ge1xuXG4gICAgICAgIG1peGluczogW0NsYXNzLCBBbmltYXRlXSxcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgZ3JvdXA6IFN0cmluZyxcbiAgICAgICAgICAgIHRocmVzaG9sZDogTnVtYmVyLFxuICAgICAgICAgICAgY2xzSXRlbTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzUGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0RyYWc6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0RyYWdTdGF0ZTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzQmFzZTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzTm9EcmFnOiBTdHJpbmcsXG4gICAgICAgICAgICBjbHNFbXB0eTogU3RyaW5nLFxuICAgICAgICAgICAgY2xzQ3VzdG9tOiBTdHJpbmcsXG4gICAgICAgICAgICBoYW5kbGU6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdyb3VwOiBmYWxzZSxcbiAgICAgICAgICAgIHRocmVzaG9sZDogNSxcbiAgICAgICAgICAgIGNsc0l0ZW06ICd1ay1zb3J0YWJsZS1pdGVtJyxcbiAgICAgICAgICAgIGNsc1BsYWNlaG9sZGVyOiAndWstc29ydGFibGUtcGxhY2Vob2xkZXInLFxuICAgICAgICAgICAgY2xzRHJhZzogJ3VrLXNvcnRhYmxlLWRyYWcnLFxuICAgICAgICAgICAgY2xzRHJhZ1N0YXRlOiAndWstZHJhZycsXG4gICAgICAgICAgICBjbHNCYXNlOiAndWstc29ydGFibGUnLFxuICAgICAgICAgICAgY2xzTm9EcmFnOiAndWstc29ydGFibGUtbm9kcmFnJyxcbiAgICAgICAgICAgIGNsc0VtcHR5OiAndWstc29ydGFibGUtZW1wdHknLFxuICAgICAgICAgICAgY2xzQ3VzdG9tOiAnJyxcbiAgICAgICAgICAgIGhhbmRsZTogZmFsc2UsXG4gICAgICAgICAgICBwb3M6IHt9XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAgICAgWydpbml0JywgJ3N0YXJ0JywgJ21vdmUnLCAnZW5kJ10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZuID0gdGhpcyQxW2tleV07XG4gICAgICAgICAgICAgICAgdGhpcyQxW2tleV0gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBhc3NpZ24odGhpcyQxLnBvcywgZ2V0RXZlbnRQb3MoZSkpO1xuICAgICAgICAgICAgICAgICAgICBmbihlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiB7XG5cbiAgICAgICAgICAgIG5hbWU6IHBvaW50ZXJEb3duLFxuICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBoYW5kbGVyOiAnaW5pdCdcblxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIHRhcmdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLiRlbC50Qm9kaWVzIHx8IFt0aGlzLiRlbF0pWzBdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXRlbXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbih0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0VtcHR5OiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNFbXB0eSh0aGlzLml0ZW1zKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGVtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMudGFyZ2V0LCB0aGlzLmNsc0VtcHR5LCBlbXB0eSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVzOiB7XG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHJlZiwgZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZSA9IHJlZi5oYW5kbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZSA/ICQkKGhhbmRsZSwgZWwpIDogdGhpcy5pdGVtcztcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgd2F0Y2g6IGZ1bmN0aW9uKGhhbmRsZXMsIHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHByZXYsIHt0b3VjaEFjdGlvbjogJycsIHVzZXJTZWxlY3Q6ICcnfSk7XG4gICAgICAgICAgICAgICAgICAgIGNzcyhoYW5kbGVzLCB7dG91Y2hBY3Rpb246IGhhc1RvdWNoID8gJ25vbmUnIDogJycsIHVzZXJTZWxlY3Q6ICdub25lJ30pOyAvLyB0b3VjaEFjdGlvbiBzZXQgdG8gJ25vbmUnIGNhdXNlcyBhIHBlcmZvcm1hbmNlIGRyb3AgaW4gQ2hyb21lIDgwXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHtcblxuICAgICAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWcgfHwgIXBhcmVudCh0aGlzLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY2xhbXAgdG8gdmlld3BvcnRcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5wb3M7XG4gICAgICAgICAgICAgICAgdmFyIHggPSByZWYueDtcbiAgICAgICAgICAgICAgICB2YXIgeSA9IHJlZi55O1xuICAgICAgICAgICAgICAgIHZhciByZWYkMSA9IHRoaXMub3JpZ2luO1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRUb3AgPSByZWYkMS5vZmZzZXRUb3A7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldExlZnQgPSByZWYkMS5vZmZzZXRMZWZ0O1xuICAgICAgICAgICAgICAgIHZhciByZWYkMiA9IHRoaXMuZHJhZztcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gcmVmJDIub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRXaWR0aCA9IHJlZiQyLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciByZWYkMyA9IG9mZnNldCh3aW5kb3cpO1xuICAgICAgICAgICAgICAgIHZhciByaWdodCA9IHJlZiQzLnJpZ2h0O1xuICAgICAgICAgICAgICAgIHZhciBib3R0b20gPSByZWYkMy5ib3R0b207XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy5kcmFnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogY2xhbXAoeSAtIG9mZnNldFRvcCwgMCwgYm90dG9tIC0gb2Zmc2V0SGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogY2xhbXAoeCAtIG9mZnNldExlZnQsIDAsIHJpZ2h0IC0gb2Zmc2V0V2lkdGgpXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc29ydGFibGUgPSB0aGlzLmdldFNvcnRhYmxlKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzID0gdGhpcy5nZXRTb3J0YWJsZSh0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgbW92ZSA9IHNvcnRhYmxlICE9PSBwcmV2aW91cztcblxuICAgICAgICAgICAgICAgIGlmICghc29ydGFibGUgfHwgd2l0aGluKHRhcmdldCwgdGhpcy5wbGFjZWhvbGRlcikgfHwgbW92ZSAmJiAoIXNvcnRhYmxlLmdyb3VwIHx8IHNvcnRhYmxlLmdyb3VwICE9PSBwcmV2aW91cy5ncm91cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHNvcnRhYmxlLnRhcmdldCA9PT0gdGFyZ2V0LnBhcmVudE5vZGUgJiYgdGFyZ2V0IHx8IHNvcnRhYmxlLml0ZW1zLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gd2l0aGluKHRhcmdldCwgZWxlbWVudCk7IH0pWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMucmVtb3ZlKHRoaXMucGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc29ydGFibGUuaW5zZXJ0KHRoaXMucGxhY2Vob2xkZXIsIHRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWluY2x1ZGVzKHRoaXMudG91Y2hlZCwgc29ydGFibGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG91Y2hlZC5wdXNoKHNvcnRhYmxlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydtb3ZlJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSBlLmJ1dHRvbjtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IGUuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5pdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiB3aXRoaW4odGFyZ2V0LCBlbCk7IH0pO1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IHJlZlswXTtcblxuICAgICAgICAgICAgICAgIGlmICghcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICAgICAgfHwgZGVmYXVsdFByZXZlbnRlZFxuICAgICAgICAgICAgICAgICAgICB8fCBidXR0b24gPiAwXG4gICAgICAgICAgICAgICAgICAgIHx8IGlzSW5wdXQodGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICB8fCB3aXRoaW4odGFyZ2V0LCAoXCIuXCIgKyAodGhpcy5jbHNOb0RyYWcpKSlcbiAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5oYW5kbGUgJiYgIXdpdGhpbih0YXJnZXQsIHRoaXMuaGFuZGxlKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b3VjaGVkID0gW3RoaXNdO1xuICAgICAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbiA9IGFzc2lnbih7dGFyZ2V0OiB0YXJnZXQsIGluZGV4OiBpbmRleChwbGFjZWhvbGRlcil9LCB0aGlzLnBvcyk7XG5cbiAgICAgICAgICAgICAgICBvbihkb2N1bWVudCwgcG9pbnRlck1vdmUsIHRoaXMubW92ZSk7XG4gICAgICAgICAgICAgICAgb24oZG9jdW1lbnQsIHBvaW50ZXJVcCwgdGhpcy5lbmQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZyA9IGFwcGVuZERyYWcodGhpcy4kY29udGFpbmVyLCB0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gdGhpcy5wbGFjZWhvbGRlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IHJlZi5sZWZ0O1xuICAgICAgICAgICAgICAgIHZhciB0b3AgPSByZWYudG9wO1xuICAgICAgICAgICAgICAgIGFzc2lnbih0aGlzLm9yaWdpbiwge29mZnNldExlZnQ6IHRoaXMucG9zLnggLSBsZWZ0LCBvZmZzZXRUb3A6IHRoaXMucG9zLnkgLSB0b3B9KTtcblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuZHJhZywgdGhpcy5jbHNEcmFnLCB0aGlzLmNsc0N1c3RvbSk7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5wbGFjZWhvbGRlciwgdGhpcy5jbHNQbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5pdGVtcywgdGhpcy5jbHNJdGVtKTtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuY2xzRHJhZ1N0YXRlKTtcblxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdzdGFydCcsIFt0aGlzLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG5cbiAgICAgICAgICAgICAgICB0cmFja1Njcm9sbCh0aGlzLnBvcyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1vdmUoZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBtb3ZlOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ21vdmUnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKHRoaXMucG9zLnggLSB0aGlzLm9yaWdpbi54KSA+IHRoaXMudGhyZXNob2xkIHx8IE1hdGguYWJzKHRoaXMucG9zLnkgLSB0aGlzLm9yaWdpbi55KSA+IHRoaXMudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBlbmQ6IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIG9mZihkb2N1bWVudCwgcG9pbnRlck1vdmUsIHRoaXMubW92ZSk7XG4gICAgICAgICAgICAgICAgb2ZmKGRvY3VtZW50LCBwb2ludGVyVXAsIHRoaXMuZW5kKTtcbiAgICAgICAgICAgICAgICBvZmYod2luZG93LCAnc2Nyb2xsJywgdGhpcy5zY3JvbGwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ3RvdWNoZW5kJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB1bnRyYWNrU2Nyb2xsKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc29ydGFibGUgPSB0aGlzLmdldFNvcnRhYmxlKHRoaXMucGxhY2Vob2xkZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9yaWdpbi5pbmRleCAhPT0gaW5kZXgodGhpcy5wbGFjZWhvbGRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdtb3ZlZCcsIFt0aGlzLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHNvcnRhYmxlLiRlbCwgJ2FkZGVkJywgW3NvcnRhYmxlLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdyZW1vdmVkJywgW3RoaXMsIHRoaXMucGxhY2Vob2xkZXJdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnc3RvcCcsIFt0aGlzLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG5cbiAgICAgICAgICAgICAgICByZW1vdmUodGhpcy5kcmFnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWcgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSB0aGlzLnRvdWNoZWQubWFwKGZ1bmN0aW9uIChzb3J0YWJsZSkgeyByZXR1cm4gKChzb3J0YWJsZS5jbHNQbGFjZWhvbGRlcikgKyBcIiBcIiArIChzb3J0YWJsZS5jbHNJdGVtKSk7IH0pLmpvaW4oJyAnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoZWQuZm9yRWFjaChmdW5jdGlvbiAoc29ydGFibGUpIHsgcmV0dXJuIHJlbW92ZUNsYXNzKHNvcnRhYmxlLml0ZW1zLCBjbGFzc2VzKTsgfSk7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuY2xzRHJhZ1N0YXRlKTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbihlbGVtZW50LCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5pdGVtcywgdGhpcy5jbHNJdGVtKTtcblxuICAgICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdpdGhpbihlbGVtZW50LCB0aGlzJDEudGFyZ2V0KSB8fCBpc1ByZWRlY2Vzc29yKGVsZW1lbnQsIHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUodGFyZ2V0LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIodGFyZ2V0LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kKHRoaXMkMS50YXJnZXQsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZShpbnNlcnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihlbGVtZW50KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXdpdGhpbihlbGVtZW50LCB0aGlzLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKGVsZW1lbnQpOyB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRTb3J0YWJsZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICYmICh0aGlzLiRnZXRDb21wb25lbnQoZWxlbWVudCwgJ3NvcnRhYmxlJykgfHwgdGhpcy5nZXRTb3J0YWJsZShlbGVtZW50LnBhcmVudE5vZGUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaXNQcmVkZWNlc3NvcihlbGVtZW50LCB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSA9PT0gdGFyZ2V0LnBhcmVudE5vZGUgJiYgaW5kZXgoZWxlbWVudCkgPiBpbmRleCh0YXJnZXQpO1xuICAgIH1cblxuICAgIHZhciB0cmFja1RpbWVyO1xuICAgIGZ1bmN0aW9uIHRyYWNrU2Nyb2xsKHBvcykge1xuXG4gICAgICAgIHZhciBsYXN0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdHJhY2tUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIHggPSBwb3MueDtcbiAgICAgICAgICAgIHZhciB5ID0gcG9zLnk7XG4gICAgICAgICAgICB5ICs9IHdpbmRvdy5wYWdlWU9mZnNldDtcblxuICAgICAgICAgICAgdmFyIGRpc3QgPSAoRGF0ZS5ub3coKSAtIGxhc3QpICogLjM7XG4gICAgICAgICAgICBsYXN0ID0gRGF0ZS5ub3coKTtcblxuICAgICAgICAgICAgc2Nyb2xsUGFyZW50cyhkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHBvcy55KSkuc29tZShmdW5jdGlvbiAoc2Nyb2xsRWwpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGwgPSBzY3JvbGxFbC5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHNjcm9sbEVsLnNjcm9sbEhlaWdodDtcblxuICAgICAgICAgICAgICAgIHZhciByZWYgPSBvZmZzZXQoZ2V0Vmlld3BvcnQoc2Nyb2xsRWwpKTtcbiAgICAgICAgICAgICAgICB2YXIgdG9wID0gcmVmLnRvcDtcbiAgICAgICAgICAgICAgICB2YXIgYm90dG9tID0gcmVmLmJvdHRvbTtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgICAgICAgICAgICAgIGlmICh0b3AgPCB5ICYmIHRvcCArIDMwID4geSkge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGwgLT0gZGlzdDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvdHRvbSA+IHkgJiYgYm90dG9tIC0gMzAgPCB5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbCArPSBkaXN0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsID4gMCAmJiBzY3JvbGwgPCBzY3JvbGxIZWlnaHQgLSBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wKHNjcm9sbEVsLCBzY3JvbGwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sIDE1KTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVudHJhY2tTY3JvbGwoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodHJhY2tUaW1lcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwZW5kRHJhZyhjb250YWluZXIsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGNsb25lID0gYXBwZW5kKGNvbnRhaW5lciwgZWxlbWVudC5vdXRlckhUTUwucmVwbGFjZSgvKF48KSg/OmxpfHRyKXwoPzpsaXx0cikoXFwvPiQpL2csICckMWRpdiQyJykpO1xuXG4gICAgICAgIGF0dHIoY2xvbmUsICdzdHlsZScsICgoYXR0cihjbG9uZSwgJ3N0eWxlJykpICsgXCI7bWFyZ2luOjAhaW1wb3J0YW50XCIpKTtcblxuICAgICAgICBjc3MoY2xvbmUsIGFzc2lnbih7XG4gICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCxcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICB9LCBjc3MoZWxlbWVudCwgWydwYWRkaW5nTGVmdCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nQm90dG9tJ10pKSk7XG5cbiAgICAgICAgaGVpZ2h0KGNsb25lLmZpcnN0RWxlbWVudENoaWxkLCBoZWlnaHQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkpO1xuXG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICB2YXIgb2JqJDE7XG5cbiAgICB2YXIgYWN0aXZlcyA9IFtdO1xuXG4gICAgdmFyIHRvb2x0aXAgPSB7XG5cbiAgICAgICAgbWl4aW5zOiBbQ29udGFpbmVyLCBUb2dnbGFibGUsIFBvc2l0aW9uXSxcblxuICAgICAgICBhcmdzOiAndGl0bGUnLFxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBkZWxheTogTnVtYmVyLFxuICAgICAgICAgICAgdGl0bGU6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHBvczogJ3RvcCcsXG4gICAgICAgICAgICB0aXRsZTogJycsXG4gICAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogWyd1ay1hbmltYXRpb24tc2NhbGUtdXAnXSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAsXG4gICAgICAgICAgICBjbHM6ICd1ay1hY3RpdmUnLFxuICAgICAgICAgICAgY2xzUG9zOiAndWstdG9vbHRpcCdcbiAgICAgICAgfSxcblxuICAgICAgICBiZWZvcmVDb25uZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhc1RpdGxlID0gaGFzQXR0cih0aGlzLiRlbCwgJ3RpdGxlJyk7XG4gICAgICAgICAgICBhdHRyKHRoaXMuJGVsLCB7dGl0bGU6ICcnLCAnYXJpYS1leHBhbmRlZCc6IGZhbHNlfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgYXR0cih0aGlzLiRlbCwge3RpdGxlOiB0aGlzLl9oYXNUaXRsZSA/IHRoaXMudGl0bGUgOiBudWxsLCAnYXJpYS1leHBhbmRlZCc6IG51bGx9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpIHx8ICF0aGlzLnRpdGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhY3RpdmVzLmZvckVhY2goZnVuY3Rpb24gKGFjdGl2ZSkgeyByZXR1cm4gYWN0aXZlLmhpZGUoKTsgfSk7XG4gICAgICAgICAgICAgICAgYWN0aXZlcy5wdXNoKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fdW5iaW5kID0gb24oZG9jdW1lbnQsIHBvaW50ZXJVcCwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuICF3aXRoaW4oZS50YXJnZXQsIHRoaXMkMS4kZWwpICYmIHRoaXMkMS5oaWRlKCk7IH0pO1xuXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2hvd1RpbWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dUaW1lciA9IHNldFRpbWVvdXQodGhpcy5fc2hvdywgdGhpcy5kZWxheSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKCkgfHwgbWF0Y2hlcyh0aGlzLiRlbCwgJ2lucHV0OmZvY3VzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRWxlbWVudCh0aGlzLnRvb2x0aXAsIGZhbHNlLCBmYWxzZSkudGhlbihmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlcy5zcGxpY2UoYWN0aXZlcy5pbmRleE9mKHRoaXMkMSksIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzJDEuc2hvd1RpbWVyKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzJDEudG9vbHRpcCA9IHJlbW92ZSh0aGlzJDEudG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5fdW5iaW5kKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBfc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcCA9IGFwcGVuZCh0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAgICAgKFwiPGRpdiBjbGFzcz1cXFwiXCIgKyAodGhpcy5jbHNQb3MpICsgXCJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJcIiArICh0aGlzLmNsc1BvcykgKyBcIi1pbm5lclxcXCI+XCIgKyAodGhpcy50aXRsZSkgKyBcIjwvZGl2PiA8L2Rpdj5cIilcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgb24odGhpcy50b29sdGlwLCAndG9nZ2xlZCcsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlZCA9IHRoaXMkMS5pc1RvZ2dsZWQodGhpcyQxLnRvb2x0aXApO1xuXG4gICAgICAgICAgICAgICAgICAgIGF0dHIodGhpcyQxLiRlbCwgJ2FyaWEtZXhwYW5kZWQnLCB0b2dnbGVkKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMS5wb3NpdGlvbkF0KHRoaXMkMS50b29sdGlwLCB0aGlzJDEuJGVsKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzJDEub3JpZ2luID0gdGhpcyQxLmdldEF4aXMoKSA9PT0gJ3knXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgoZmxpcFBvc2l0aW9uKHRoaXMkMS5kaXIpKSArIFwiLVwiICsgKHRoaXMkMS5hbGlnbikpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgodGhpcyQxLmFsaWduKSArIFwiLVwiICsgKGZsaXBQb3NpdGlvbih0aGlzJDEuZGlyKSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KHRoaXMudG9vbHRpcCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzQWN0aXZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXMoYWN0aXZlcywgdGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6ICggb2JqJDEgPSB7XG5cbiAgICAgICAgICAgIGZvY3VzOiAnc2hvdycsXG4gICAgICAgICAgICBibHVyOiAnaGlkZSdcblxuICAgICAgICB9LCBvYmokMVsocG9pbnRlckVudGVyICsgXCIgXCIgKyBwb2ludGVyTGVhdmUpXSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzVG91Y2goZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlLnR5cGUgPT09IHBvaW50ZXJFbnRlclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9LCBvYmokMVtwb2ludGVyRG93bl0gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNUb3VjaChlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUoKVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5zaG93KCk7XG4gICAgICAgICAgICB9LCBvYmokMSApXG5cbiAgICB9O1xuXG4gICAgdmFyIHVwbG9hZCA9IHtcblxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgYWxsb3c6IFN0cmluZyxcbiAgICAgICAgICAgIGNsc0RyYWdvdmVyOiBTdHJpbmcsXG4gICAgICAgICAgICBjb25jdXJyZW50OiBOdW1iZXIsXG4gICAgICAgICAgICBtYXhTaXplOiBOdW1iZXIsXG4gICAgICAgICAgICBtZXRob2Q6IFN0cmluZyxcbiAgICAgICAgICAgIG1pbWU6IFN0cmluZyxcbiAgICAgICAgICAgIG1zZ0ludmFsaWRNaW1lOiBTdHJpbmcsXG4gICAgICAgICAgICBtc2dJbnZhbGlkTmFtZTogU3RyaW5nLFxuICAgICAgICAgICAgbXNnSW52YWxpZFNpemU6IFN0cmluZyxcbiAgICAgICAgICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgICAgICAgICAgbmFtZTogU3RyaW5nLFxuICAgICAgICAgICAgcGFyYW1zOiBPYmplY3QsXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICB1cmw6IFN0cmluZ1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGFsbG93OiBmYWxzZSxcbiAgICAgICAgICAgIGNsc0RyYWdvdmVyOiAndWstZHJhZ292ZXInLFxuICAgICAgICAgICAgY29uY3VycmVudDogMSxcbiAgICAgICAgICAgIG1heFNpemU6IDAsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIG1pbWU6IGZhbHNlLFxuICAgICAgICAgICAgbXNnSW52YWxpZE1pbWU6ICdJbnZhbGlkIEZpbGUgVHlwZTogJXMnLFxuICAgICAgICAgICAgbXNnSW52YWxpZE5hbWU6ICdJbnZhbGlkIEZpbGUgTmFtZTogJXMnLFxuICAgICAgICAgICAgbXNnSW52YWxpZFNpemU6ICdJbnZhbGlkIEZpbGUgU2l6ZTogJXMgS2lsb2J5dGVzIE1heCcsXG4gICAgICAgICAgICBtdWx0aXBsZTogZmFsc2UsXG4gICAgICAgICAgICBuYW1lOiAnZmlsZXNbXScsXG4gICAgICAgICAgICBwYXJhbXM6IHt9LFxuICAgICAgICAgICAgdHlwZTogJycsXG4gICAgICAgICAgICB1cmw6ICcnLFxuICAgICAgICAgICAgYWJvcnQ6IG5vb3AsXG4gICAgICAgICAgICBiZWZvcmVBbGw6IG5vb3AsXG4gICAgICAgICAgICBiZWZvcmVTZW5kOiBub29wLFxuICAgICAgICAgICAgY29tcGxldGU6IG5vb3AsXG4gICAgICAgICAgICBjb21wbGV0ZUFsbDogbm9vcCxcbiAgICAgICAgICAgIGVycm9yOiBub29wLFxuICAgICAgICAgICAgZmFpbDogbm9vcCxcbiAgICAgICAgICAgIGxvYWQ6IG5vb3AsXG4gICAgICAgICAgICBsb2FkRW5kOiBub29wLFxuICAgICAgICAgICAgbG9hZFN0YXJ0OiBub29wLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IG5vb3BcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcblxuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZXMoZS50YXJnZXQsICdpbnB1dFt0eXBlPVwiZmlsZVwiXScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuZmlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWQoZS50YXJnZXQuZmlsZXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlID0gJyc7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkcm9wOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3RvcChlKTtcblxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2ZlciA9IGUuZGF0YVRyYW5zZmVyO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0cmFuc2ZlciB8fCAhdHJhbnNmZXIuZmlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc0RyYWdvdmVyKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkKHRyYW5zZmVyLmZpbGVzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRyYWdlbnRlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN0b3AoZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkcmFnb3ZlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHN0b3AoZSk7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzRHJhZ292ZXIpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZHJhZ2xlYXZlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc3RvcChlKTtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNEcmFnb3Zlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHVwbG9hZDogZnVuY3Rpb24oZmlsZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuXG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICd1cGxvYWQnLCBbZmlsZXNdKTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhTaXplICYmIHRoaXMubWF4U2l6ZSAqIDEwMDAgPCBmaWxlc1tpXS5zaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwodGhpcy5tc2dJbnZhbGlkU2l6ZS5yZXBsYWNlKCclcycsIHRoaXMubWF4U2l6ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWxsb3cgJiYgIW1hdGNoJDEodGhpcy5hbGxvdywgZmlsZXNbaV0ubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbCh0aGlzLm1zZ0ludmFsaWROYW1lLnJlcGxhY2UoJyVzJywgdGhpcy5hbGxvdykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWltZSAmJiAhbWF0Y2gkMSh0aGlzLm1pbWUsIGZpbGVzW2ldLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZhaWwodGhpcy5tc2dJbnZhbGlkTWltZS5yZXBsYWNlKCclcycsIHRoaXMubWltZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMgPSBbZmlsZXNbMF1dO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuYmVmb3JlQWxsKHRoaXMsIGZpbGVzKTtcblxuICAgICAgICAgICAgICAgIHZhciBjaHVua3MgPSBjaHVuayhmaWxlcywgdGhpcy5jb25jdXJyZW50KTtcbiAgICAgICAgICAgICAgICB2YXIgdXBsb2FkID0gZnVuY3Rpb24gKGZpbGVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgICAgICAgICAgICAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7IHJldHVybiBkYXRhLmFwcGVuZCh0aGlzJDEubmFtZSwgZmlsZSk7IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzJDEucGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmFwcGVuZChrZXksIHRoaXMkMS5wYXJhbXNba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhamF4KHRoaXMkMS51cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IHRoaXMkMS5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IHRoaXMkMS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24gKGVudikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhociA9IGVudi54aHI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnVwbG9hZCAmJiBvbih4aHIudXBsb2FkLCAncHJvZ3Jlc3MnLCB0aGlzJDEucHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnbG9hZFN0YXJ0JywgJ2xvYWQnLCAnbG9hZEVuZCcsICdhYm9ydCddLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIG9uKHhociwgdHlwZS50b0xvd2VyQ2FzZSgpLCB0aGlzJDFbdHlwZV0pOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5iZWZvcmVTZW5kKGVudik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh4aHIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMS5jb21wbGV0ZSh4aHIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkKGNodW5rcy5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzJDEuY29tcGxldGVBbGwoeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcyQxLmVycm9yKGUpOyB9XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdXBsb2FkKGNodW5rcy5zaGlmdCgpKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBtYXRjaCQxKHBhdHRlcm4sIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHBhdGgubWF0Y2gobmV3IFJlZ0V4cCgoXCJeXCIgKyAocGF0dGVybi5yZXBsYWNlKC9cXC8vZywgJ1xcXFwvJykucmVwbGFjZSgvXFwqXFwqL2csICcoXFxcXC9bXlxcXFwvXSspKicpLnJlcGxhY2UoL1xcKi9nLCAnW15cXFxcL10rJykucmVwbGFjZSgvKCg/IVxcXFwpKVxcPy9nLCAnJDEuJykpICsgXCIkXCIpLCAnaScpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaHVuayhmaWxlcywgc2l6ZSkge1xuICAgICAgICB2YXIgY2h1bmtzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpICs9IHNpemUpIHtcbiAgICAgICAgICAgIHZhciBjaHVuayA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjaHVuay5wdXNoKGZpbGVzW2kgKyBqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNodW5rcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdG9wKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIHZhciBjb21wb25lbnRzJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAgICAgQ291bnRkb3duOiBjb3VudGRvd24sXG4gICAgICAgIEZpbHRlcjogZmlsdGVyJDEsXG4gICAgICAgIExpZ2h0Ym94OiBsaWdodGJveCxcbiAgICAgICAgTGlnaHRib3hQYW5lbDogTGlnaHRib3hQYW5lbCxcbiAgICAgICAgTm90aWZpY2F0aW9uOiBub3RpZmljYXRpb24sXG4gICAgICAgIFBhcmFsbGF4OiBwYXJhbGxheCxcbiAgICAgICAgU2xpZGVyOiBzbGlkZXIsXG4gICAgICAgIFNsaWRlclBhcmFsbGF4OiBzbGlkZXJQYXJhbGxheCxcbiAgICAgICAgU2xpZGVzaG93OiBzbGlkZXNob3csXG4gICAgICAgIFNsaWRlc2hvd1BhcmFsbGF4OiBzbGlkZXJQYXJhbGxheCxcbiAgICAgICAgU29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICBUb29sdGlwOiB0b29sdGlwLFxuICAgICAgICBVcGxvYWQ6IHVwbG9hZFxuICAgIH0pO1xuXG4gICAgZWFjaChjb21wb25lbnRzJDEsIGZ1bmN0aW9uIChjb21wb25lbnQsIG5hbWUpIHsgcmV0dXJuIFVJa2l0LmNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpOyB9XG4gICAgKTtcblxuICAgIHJldHVybiBVSWtpdDtcblxufSkpKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJvYmpQcm90b3R5cGUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImhhc093biIsIm9iaiIsImtleSIsImNhbGwiLCJoeXBoZW5hdGVDYWNoZSIsImh5cGhlbmF0ZVJlIiwiaHlwaGVuYXRlIiwic3RyIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwiY2FtZWxpemVSZSIsImNhbWVsaXplIiwidG9VcHBlciIsIl8iLCJjIiwidG9VcHBlckNhc2UiLCJ1Y2ZpcnN0IiwibGVuZ3RoIiwiY2hhckF0Iiwic2xpY2UiLCJzdHJQcm90b3R5cGUiLCJTdHJpbmciLCJzdGFydHNXaXRoRm4iLCJzdGFydHNXaXRoIiwic2VhcmNoIiwidGhpcyIsImxhc3RJbmRleE9mIiwiZW5kc1dpdGhGbiIsImVuZHNXaXRoIiwic3Vic3RyIiwiYXJyUHJvdG90eXBlIiwiQXJyYXkiLCJpbmNsdWRlc0ZuIiwiaSIsImluZGV4T2YiLCJpbmNsdWRlc1N0ciIsImluY2x1ZGVzIiwiaW5jbHVkZXNBcnJheSIsImlzU3RyaW5nIiwiZmluZEluZGV4Rm4iLCJmaW5kSW5kZXgiLCJwcmVkaWNhdGUiLCJhcmd1bWVudHMkMSIsImFyZ3VtZW50cyIsImFycmF5IiwiaXNBcnJheSIsImlzRnVuY3Rpb24iLCJpc09iamVjdCIsInRvU3RyaW5nIiwiaXNQbGFpbk9iamVjdCIsImlzV2luZG93Iiwid2luZG93IiwiaXNEb2N1bWVudCIsIm5vZGVUeXBlIiwiaXNKUXVlcnkiLCJqcXVlcnkiLCJpc05vZGUiLCJpc0VsZW1lbnQiLCJpc05vZGVDb2xsZWN0aW9uIiwibWF0Y2giLCJpc0Jvb2xlYW4iLCJ2YWx1ZSIsImlzTnVtYmVyIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNFbXB0eSIsImtleXMiLCJpc1VuZGVmaW5lZCIsInRvQm9vbGVhbiIsInRvTnVtYmVyIiwibnVtYmVyIiwiTnVtYmVyIiwidG9GbG9hdCIsInRvTm9kZSIsImVsZW1lbnQiLCJ0b05vZGVzIiwibWFwIiwiZmlsdGVyIiwiQm9vbGVhbiIsInRvQXJyYXkiLCJ0b1dpbmRvdyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsInRvTGlzdCIsInNwbGl0IiwidHJpbSIsInRvTXMiLCJ0aW1lIiwiaXNFcXVhbCIsIm90aGVyIiwiZWFjaCIsInZhbCIsInN3YXAiLCJhIiwiYiIsIlJlZ0V4cCIsImFzc2lnbiIsInRhcmdldCIsImFyZ3MiLCJsZW4iLCJzb3VyY2UiLCJsYXN0IiwiY2IiLCJzb3J0QnkiLCJwcm9wIiwic29ydCIsInJlZiIsInJlZiQxIiwicHJvcEEiLCJwcm9wQiIsInVuaXF1ZUJ5Iiwic2VlbiIsIlNldCIsImNoZWNrIiwiaGFzIiwiYWRkIiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJNYXRoIiwibm9vcCIsImludGVyc2VjdFJlY3QiLCJyMSIsInIyIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwicG9pbnRJblJlY3QiLCJwb2ludCIsInJlY3QiLCJ4IiwieSIsIkRpbWVuc2lvbnMiLCJyYXRpbyIsImRpbWVuc2lvbnMiLCJhUHJvcCIsInJvdW5kIiwiY29udGFpbiIsIm1heERpbWVuc2lvbnMiLCJ0aGlzJDEiLCJjb3ZlciIsImF0dHIiLCJuYW1lIiwiZ2V0QXR0cmlidXRlIiwiZm9yRWFjaCIsInJlbW92ZUF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJoYXNBdHRyIiwic29tZSIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImRhdGEiLCJhdHRyaWJ1dGUiLCJhdHRycyIsImluQnJvd3NlciIsImlzSUUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNSdGwiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImhhc1RvdWNoRXZlbnRzIiwiaGFzUG9pbnRlckV2ZW50cyIsIlBvaW50ZXJFdmVudCIsImhhc1RvdWNoIiwiRG9jdW1lbnRUb3VjaCIsIm1heFRvdWNoUG9pbnRzIiwicG9pbnRlckRvd24iLCJwb2ludGVyTW92ZSIsInBvaW50ZXJVcCIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsInBvaW50ZXJDYW5jZWwiLCJxdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZpbmQiLCJnZXRDb250ZXh0IiwicXVlcnlBbGwiLCJub2RlcyIsImZpbmRBbGwiLCJpc0NvbnRleHRTZWxlY3RvciIsIl9xdWVyeSIsInF1ZXJ5Rm4iLCJyZW1vdmVzIiwiY29udGV4dFNhbml0aXplUmUiLCJzZWxlY3RvclJlIiwic3BsaXRTZWxlY3RvciIsImN0eCIsInNlbGVjdG9ycyIsImNsb3Nlc3QiLCJwYXJlbnQiLCJqb2luIiwic2VsZWN0b3JzJDEiLCJwcmV2IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIm1hdGNoZXMiLCJpZCIsIkRhdGUiLCJub3ciLCJwdXNoIiwiZXNjYXBlIiwiZSIsInJlbW92ZSIsImNvbnRleHRTZWxlY3RvclJlIiwiZWxQcm90byIsIkVsZW1lbnQiLCJtYXRjaGVzRm4iLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImNsb3Nlc3RGbiIsImFuY2VzdG9yIiwicGFyZW50Tm9kZSIsImVzY2FwZUZuIiwiQ1NTIiwiY3NzIiwidm9pZEVsZW1lbnRzIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZW51aXRlbSIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiaXNWb2lkRWxlbWVudCIsInRhZ05hbWUiLCJpc1Zpc2libGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImdldENsaWVudFJlY3RzIiwic2VsSW5wdXQiLCJpc0lucHV0Iiwid2l0aGluIiwiY29udGFpbnMiLCJwYXJlbnRzIiwiZWxlbWVudHMiLCJjaGlsZHJlbiIsIm9uIiwiZ2V0QXJncyIsInRhcmdldHMiLCJ0eXBlIiwibGlzdGVuZXIiLCJ1c2VDYXB0dXJlIiwidG9FdmVudFRhcmdldHMiLCJkZXRhaWwiLCJzZWxmIiwic2VsZkZpbHRlciIsImRlbGVnYXRlIiwidXNlQ2FwdHVyZUZpbHRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25jZSIsImNvbmRpdGlvbiIsInJlc3VsdCIsInRyaWdnZXIiLCJldmVudCIsInJlZHVjZSIsIm5vdENhbmNlbGVkIiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJpbml0Q3VzdG9tRXZlbnQiLCJzcGxpY2UiLCJkZWxlZ2F0ZXMiLCJjdXJyZW50IiwicmV2ZXJzZSIsImFwcGx5IiwiY29uY2F0IiwiY3VycmVudFRhcmdldCIsIm9wdGlvbnMiLCJjYXB0dXJlIiwiaXNFdmVudFRhcmdldCIsInRvRXZlbnRUYXJnZXQiLCJpc1RvdWNoIiwicG9pbnRlclR5cGUiLCJ0b3VjaGVzIiwiZ2V0RXZlbnRQb3MiLCJjaGFuZ2VkVG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwiUHJvbWlzZSIsIlByb21pc2VGbiIsIkRlZmVycmVkIiwicHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJhc3luYyIsInNldEltbWVkaWF0ZSIsInNldFRpbWVvdXQiLCJleGVjdXRvciIsInN0YXRlIiwidW5kZWZpbmVkIiwiZGVmZXJyZWQiLCJyIiwiYWxsIiwiaXRlcmFibGUiLCJjb3VudCIsInJlc29sdmVyIiwidGhlbiIsInJhY2UiLCJwIiwiYWpheCIsInVybCIsImVudiIsIm1ldGhvZCIsImhlYWRlcnMiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImJlZm9yZVNlbmQiLCJyZXNwb25zZVR5cGUiLCJoZWFkZXIiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsInN0YXR1cyIsIkVycm9yIiwic3RhdHVzVGV4dCIsInNlbmQiLCJnZXRJbWFnZSIsInNyYyIsInNyY3NldCIsInNpemVzIiwiSW1hZ2UiLCJvbmVycm9yIiwib25sb2FkIiwicmVhZHkiLCJmbiIsInJlYWR5U3RhdGUiLCJ1bmJpbmQiLCJpbmRleCIsImdldEluZGV4IiwiZmluaXRlIiwiZW1wdHkiLCIkIiwiaW5uZXJIVE1MIiwiaHRtbCIsImFwcGVuZCIsImhhc0NoaWxkTm9kZXMiLCJpbnNlcnROb2RlcyIsImFwcGVuZENoaWxkIiwiYmVmb3JlIiwiaW5zZXJ0QmVmb3JlIiwiYWZ0ZXIiLCJuZXh0U2libGluZyIsImZyYWdtZW50IiwicmVtb3ZlQ2hpbGQiLCJ3cmFwQWxsIiwic3RydWN0dXJlIiwiZmlyc3RDaGlsZCIsIndyYXBJbm5lciIsImNoaWxkTm9kZXMiLCJ1bndyYXAiLCJUeXBlRXJyb3IiLCJjYWxsZWQiLCJub3RpZnkiLCJyZWFzb24iLCJzaGlmdCIsIm9uUmVzb2x2ZWQiLCJvblJlamVjdGVkIiwiY2F0Y2giLCJmcmFnbWVudFJlIiwic2luZ2xlVGFnUmUiLCJleGVjIiwiY3JlYXRlRWxlbWVudCIsImNvbnRhaW5lciIsImluc2VydEFkamFjZW50SFRNTCIsInRleHRDb250ZW50Iiwibm9kZSIsImZpcnN0RWxlbWVudENoaWxkIiwibmV4dCIsIm5leHRFbGVtZW50U2libGluZyIsImlzSHRtbCIsIiQkIiwiYWRkQ2xhc3MiLCJhcHBseSQxIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmVDbGFzc2VzIiwiY2xzIiwicmVwbGFjZUNsYXNzIiwiaGFzQ2xhc3MiLCJjbGFzc0xpc3QiLCJ0b2dnbGVDbGFzcyIsImZvcmNlIiwiZ2V0QXJncyQxIiwicG9wIiwic3VwcG9ydHMiLCJGb3JjZSIsInRvZ2dsZSIsIk11bHRpcGxlIiwiYXJnIiwiZ2V0IiwiX211bHRpcGxlIiwiX2ZvcmNlIiwiY3NzTnVtYmVyIiwicHJvcGVydHkiLCJwcm9wTmFtZSIsImdldFN0eWxlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInN0eWxlcyIsImdldFN0eWxlcyIsInByb3BzIiwicHNldWRvRWx0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInZhcnMiLCJnZXRDc3NWYXIiLCJkb2NFbCIsImdldFByb3BlcnR5VmFsdWUiLCJjc3NQcm9wcyIsInJldCIsInByZWZpeGVkTmFtZSIsImNzc1ByZWZpeGVzIiwidmVuZG9yUHJvcE5hbWUiLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJ0aW1pbmciLCJ0aW1lciIsImNsZWFyVGltZW91dCIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiIsIlRyYW5zaXRpb24iLCJzdGFydCIsInN0b3AiLCJjYW5jZWwiLCJpblByb2dyZXNzIiwiYW5pbWF0ZSIsImFuaW1hdGlvbiIsIm9yaWdpbiIsIm91dCIsInJlc2V0IiwiYW5pbWF0aW9uUHJlZml4IiwiQW5pbWF0aW9uIiwiaW4iLCJkaXJzIiwid2lkdGgiLCJoZWlnaHQiLCJwb3NpdGlvbkF0IiwiZWxBdHRhY2giLCJ0YXJnZXRBdHRhY2giLCJlbE9mZnNldCIsInRhcmdldE9mZnNldCIsImZsaXAiLCJib3VuZGFyeSIsImdldFBvcyIsImZsaXBwZWQiLCJkaW0iLCJnZXREaW1lbnNpb25zIiwidGFyZ2V0RGltIiwicG9zaXRpb24iLCJtb3ZlVG8iLCJnZXRPZmZzZXRzIiwiYm91bmRhcmllcyIsInVuc2hpZnQiLCJkaXIiLCJhbGlnbiIsImFsaWduRmxpcCIsImVsZW1PZmZzZXQiLCJjZW50ZXJPZmZzZXQiLCJjZW50ZXJUYXJnZXRPZmZzZXQiLCJuZXdWYWwiLCJlbCIsIm9mZnNldCIsImNvb3JkaW5hdGVzIiwiY3VycmVudE9mZnNldCIsInBvcyIsImhpZGRlbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvZmZzZXRQYXJlbnQiLCJlbGVtZW50T2Zmc2V0IiwicGFyZW50T2Zmc2V0Iiwib2Zmc2V0UG9zaXRpb24iLCJvZmZzZXRUb3AiLCJvZmZzZXRMZWZ0Iiwid2luIiwiZGltZW5zaW9uIiwiZG9jIiwiYm94TW9kZWxBZGp1c3QiLCJzaXppbmciLCJhdHRhY2giLCJmYWN0b3IiLCJvZmZzZXRzIiwiZmxpcFBvc2l0aW9uIiwidG9QeCIsInBlcmNlbnQiLCJmYXN0ZG9tIiwicmVhZHMiLCJ3cml0ZXMiLCJyZWFkIiwidGFzayIsInNjaGVkdWxlRmx1c2giLCJ3cml0ZSIsImNsZWFyIiwicmVtb3ZlJDEiLCJmbHVzaCIsInJlY3Vyc2lvbiIsInJ1blRhc2tzIiwic2NoZWR1bGVkIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGFza3MiLCJpdGVtIiwiTW91c2VUcmFja2VyIiwicG9zaXRpb25zIiwiaW5pdCIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwibW92ZXNUbyIsInByZXZQb3NpdGlvbiIsInBhdGgiLCJkaWFnb25hbCIsImludGVyc2VjdGlvbiIsInJlZl8wIiwieDEiLCJ5MSIsInJlZl8xIiwieDIiLCJ5MiIsInJlZiQxXzAiLCJ4MyIsInkzIiwicmVmJDFfMSIsIng0IiwieTQiLCJkZW5vbWluYXRvciIsInVhIiwiaW50ZXJzZWN0Iiwic3RyYXRzIiwibWVyZ2VGbkRhdGEiLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsInZtIiwiY29tcHV0ZWQiLCJjb25jYXRTdHJhdCIsImRlZmF1bHRTdHJhdCIsIm1lcmdlT3B0aW9ucyIsImNoaWxkIiwiZXh0ZW5kcyIsIm1peGlucyIsImwiLCJtZXJnZUtleSIsImtleSQxIiwicGFyc2VPcHRpb25zIiwiSlNPTiIsInBhcnNlIiwib3B0aW9uIiwiZXZlbnRzIiwiY3JlYXRlZCIsImJlZm9yZUNvbm5lY3QiLCJjb25uZWN0ZWQiLCJiZWZvcmVEaXNjb25uZWN0IiwiZGlzY29ubmVjdGVkIiwiZGVzdHJveSIsInVwZGF0ZSIsIm1ldGhvZHMiLCJQbGF5ZXIiLCJwb3N0IiwiY21kIiwiY29udGVudFdpbmRvdyIsInBvc3RNZXNzYWdlIiwic3RyaW5naWZ5IiwiaXNJblZpZXciLCJvdmVyZmxvd1BhcmVudHMiLCJldmVyeSIsImNsaWVudCIsImdldFZpZXdwb3J0Iiwic2Nyb2xsVG9wIiwiZ2V0U2Nyb2xsaW5nRWxlbWVudCIsInNjcm9sbEludG9WaWV3Iiwib2Zmc2V0QnkiLCJsb29wIiwiZGlzdCIsInNjcm9sbEVsZW1lbnQiLCJzY3JvbGwiLCJjZWlsIiwiYWJzIiwicG93Iiwic3RlcCIsImsiLCJjb3MiLCJQSSIsInNjcm9sbGVkT3ZlciIsImhlaWdodE9mZnNldCIsInNjcm9sbFBhcmVudHMiLCJzY3JvbGxIZWlnaHQiLCJ2aWV3cG9ydEhlaWdodCIsInZpZXdwb3J0VG9wIiwidmlld3BvcnREaXN0Iiwib3ZlcmZsb3dSZSIsInNjcm9sbEVsIiwic2Nyb2xsaW5nRWxlbWVudCIsImlzVmlkZW8iLCJpc1lvdXR1YmUiLCJpc1ZpbWVvIiwiaXNIVE1MNSIsImlzSUZyYW1lIiwiZW5hYmxlQXBpIiwicG9sbGVyIiwieW91dHViZSIsInZpbWVvIiwicGxheWVyX2lkIiwicGxheSIsImZ1bmMiLCJwYXVzZSIsIm11dGUiLCJtdXRlZCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDbGFzcyIsImNhbGxiYWNrIiwicm9vdE1hcmdpbiIsInBlbmRpbmciLCJyZWNvcmRzIiwidGFrZVJlY29yZHMiLCJwYXNzaXZlIiwiZW50cnkiLCJpblZpZXciLCJpc0ludGVyc2VjdGluZyIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwiZ2V0Q29tcG9uZW50TmFtZSIsIlVJa2l0IiwiX2luaXQiLCJ1dGlsIiwiZnJlZXplIiwiX19wcm90b19fIiwicHJlcGVuZCIsInByZWZpeCIsInZlcnNpb24iLCJEQVRBIiwiX2Nvbm5lY3RlZCIsIl9jYWxsVXBkYXRlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkIiwibWl4aW4iLCJjb21wb25lbnQiLCJleHRlbmQiLCJTdWIiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwiYm9keSIsImRlZmluZVByb3BlcnR5Iiwic2V0IiwiZ2xvYmFsQVBJIiwiX2NhbGxIb29rIiwiaG9vayIsImhhbmRsZXJzIiwiJG9wdGlvbnMiLCJoYW5kbGVyIiwiX2NhbGxDb25uZWN0ZWQiLCJfZGF0YSIsIl9jb21wdXRlZHMiLCJfZnJhbWVzIiwiX2luaXRQcm9wcyIsIl9pbml0RXZlbnRzIiwiX2luaXRPYnNlcnZlciIsIl9jYWxsRGlzY29ubmVjdGVkIiwiX29ic2VydmVyIiwiX3VuYmluZEV2ZW50cyIsIl9jYWxsV2F0Y2hlcyIsInVwZGF0ZXMiLCJfd2F0Y2giLCJpbml0aXRhbCIsImhhc1ByZXYiLCJ3YXRjaCIsImltbWVkaWF0ZSIsImhvb2tzQVBJIiwidWlkIiwiZ2V0UHJvcHMiLCJvcHRzIiwiZGF0YSQxIiwiY29lcmNlIiwicHJvcCQxIiwicmVnaXN0ZXJDb21wdXRlZCIsImVudW1lcmFibGUiLCIkcHJvcHMiLCIkZWwiLCJyZWdpc3RlckV2ZW50IiwiX2V2ZW50cyIsImJpbmQiLCJub3RJbiIsImFyciIsIm5vcm1hbGl6ZURhdGEiLCJfdWlkIiwiX2luaXREYXRhIiwiX2luaXRNZXRob2RzIiwiX2luaXRDb21wdXRlZHMiLCIkbW91bnQiLCIkbmFtZSIsImV4Y2x1ZGUiLCJNdXRhdGlvbk9ic2VydmVyIiwiYXR0cmlidXRlTmFtZSIsIiRyZXNldCIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVGaWx0ZXIiLCJzdGF0ZUFQSSIsImNvbXBvbmVudHMiLCJhcmdzQXJyYXkiLCJmdW5jdGlvbmFsIiwiaW5zdGFuY2UiLCJnZXRDb21wb25lbnQiLCIkZGVzdHJveSIsIm9wdCIsImluc3RhbGwiLCJfaW5pdGlhbGl6ZWQiLCJnZXRDb21wb25lbnRzIiwiY29ubmVjdCIsIm5hbWUkMSIsImNvbXBvbmVudEFQSSIsIiRjcmVhdGUiLCJyZW1vdmVFbCIsIiRlbWl0IiwiJHVwZGF0ZSIsIiRnZXRDb21wb25lbnQiLCJuYW1lcyIsImRlZmluZVByb3BlcnRpZXMiLCIkY29udGFpbmVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaW5zdGFuY2VBUEkiLCJDbGFzcyIsIlRvZ2dsYWJsZSIsImluaXRQcm9wcyIsIm92ZXJmbG93IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJoaWRlUHJvcHMiLCJoYXNBbmltYXRpb24iLCJoYXNUcmFuc2l0aW9uIiwidG9nZ2xlRWxlbWVudCIsInNob3ciLCJfdG9nZ2xlRWxlbWVudCIsImlzVG9nZ2xlZCIsInVwZGF0ZUFyaWEiLCJjbXAiLCJ0b2dnbGVIZWlnaHQiLCJfdG9nZ2xlIiwiZmluYWwiLCJ0b2dnbGVkIiwiY2hhbmdlZCIsImZvY3VzIiwiYmx1ciIsImlubmVyIiwibGFzdEVsZW1lbnRDaGlsZCIsImN1cnJlbnRIZWlnaHQiLCJlbmRIZWlnaHQiLCJBY2NvcmRpb24iLCJhY3RpdmUiLCJjb2xsYXBzaWJsZSIsIm11bHRpcGxlIiwiY29udGVudCIsImNsc09wZW4iLCJpdGVtcyIsImhpZGUiLCJwcmV2ZW50RGVmYXVsdCIsImFjdGl2ZUl0ZW1zIiwiX3dyYXBwZXIiLCJhbGVydCIsImNsb3NlIiwic2VsQ2xvc2UiLCJvcGFjaXR5IiwiVmlkZW8iLCJhdXRvbXV0ZSIsImF1dG9wbGF5IiwicHJlbG9hZCIsInBsYXllciIsInZpc2libGUiLCJnZXRQb3NpdGlvbmVkUGFyZW50IiwibmF0dXJhbFdpZHRoIiwidmlkZW9XaWR0aCIsImNsaWVudFdpZHRoIiwibmF0dXJhbEhlaWdodCIsInZpZGVvSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiUG9zaXRpb24iLCJjbHNQb3MiLCJvZmZzZXQkMSIsImF4aXMiLCJnZXRBeGlzIiwiZHJvcCIsIm1vZGUiLCJib3VuZGFyeUFsaWduIiwiZGVsYXlTaG93IiwiZGVsYXlIaWRlIiwiY2xzRHJvcCIsInRyYWNrZXIiLCJpc0FjdGl2ZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJoYXNoIiwiY2xlYXJUaW1lcnMiLCJuZXdUYXJnZXQiLCJrZXlDb2RlIiwiZGVsYXkiLCJpc0RlbGF5aW5nIiwic2hvd1RpbWVyIiwiaGlkZVRpbWVyIiwiYWxpZ25UbyIsImZvcm1DdXN0b20iLCJmaWxlcyIsInNlbGVjdGVkIiwiZ2lmIiwiaW52aWV3IiwiTWFyZ2luIiwibWFyZ2luIiwiZmlyc3RDb2x1bW4iLCJjb2x1bW5zIiwic29ydEJ5JDEiLCJyb3dzIiwiZ2V0Um93cyIsInJvdyIsInN0YXJ0UHJvcCIsImVuZFByb3AiLCJzb3J0ZWQiLCJnZXRPZmZzZXQiLCJqIiwic3RhcnREaW0iLCJncmlkIiwibWFzb25yeSIsInBhcmFsbGF4IiwiY2xzU3RhY2siLCJ0cmFuc2l0aW9uSW5Qcm9ncmVzcyIsInRyYW5zbGF0ZXMiLCJlbEhlaWdodCIsInBhZGRpbmciLCJjb2x1bW5IZWlnaHRzIiwiY29sdW1uIiwic3VtIiwiZ2V0Q29sdW1uSGVpZ2h0cyIsImdldE1hcmdpblRvcCIsInJvd0hlaWdodHMiLCJnZXRUcmFuc2xhdGVzIiwibmV3UGFkZGluZyIsImhndCIsImhlaWdodCQxIiwic2Nyb2xsZWQiLCJGbGV4QnVnIiwic2VsTWluSGVpZ2h0IiwiZm9yY2VIZWlnaHQiLCJvcmRlciIsImhlaWdodE1hdGNoIiwiaGVpZ2h0cyIsImdldEhlaWdodHMiLCJoYXNNaW5IZWlnaHQiLCJtaW5IZWlnaHQiLCJoYXNTaHJ1bmsiLCJ0b0ZpeGVkIiwiaGVpZ2h0Vmlld3BvcnQiLCJleHBhbmQiLCJvZmZzZXRCb3R0b20iLCJib3giLCJkYXRhc2V0IiwiaGVpZ2h0RXhwYW5kIiwiU1ZHIiwiaWNvbiIsImNsYXNzIiwic3Ryb2tlQW5pbWF0aW9uIiwiZm9jdXNhYmxlIiwiaW5jbHVkZSIsInN2ZyIsImdldFN2ZyIsImFwcGx5QXR0cmlidXRlcyIsInN2Z0VsIiwicm9vdCIsImVxdWFscyIsImluc2VydFNWRyIsImdldE1heFBhdGhMZW5ndGgiLCJzZXRQcm9wZXJ0eSIsInN2Z3MiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZXNwb25zZSIsInN5bWJvbHMiLCJzeW1ib2xSZSIsImxhc3RJbmRleCIsInBhcnNlU3ltYm9scyIsInBhcnNlU1ZHIiwidmlld0JveCIsInN0cm9rZSIsImdldFRvdGFsTGVuZ3RoIiwiaWNvbnMiLCJzcGlubmVyIiwidG90b3AiLCJtYXJrZXIiLCJJY29uIiwiYWRkZWQiLCJwYXJzZWQiLCJpc0ljb24iLCJhcHBseVJ0bCIsImNsb25lTm9kZSIsImdldEljb24iLCJJY29uQ29tcG9uZW50IiwiU2xpZGVuYXYiLCJTZWFyY2giLCJDbG9zZSIsIlNwaW5uZXIiLCJkYXRhU3JjIiwiZGF0YVNyY3NldCIsImNhY2hlS2V5IiwiZGF0YVdpZHRoIiwiZGF0YUhlaWdodCIsImRhdGFTaXplcyIsImlzSW1nIiwic3RvcmFnZSIsInNldFNyY0F0dHJzIiwic2l6ZXNUb1BpeGVsIiwiZ2V0UGxhY2Vob2xkZXJJbWFnZSIsIm9ic2VydmVyIiwibG9hZCIsImltYWdlIiwiY3VycmVudFNyYyIsImRldmljZVBpeGVsUmF0aW8iLCJiZ1NpemUiLCJzcmNTaXplIiwiZGVzY3JpcHRvcnMiLCJzcmNTZXRSZSIsInNpemUiLCJlbnRyaWVzIiwiYmFja2dyb3VuZEltYWdlIiwic2l6ZXNSZSIsIm1hdGNoTWVkaWEiLCJzdWJzdHJpbmciLCJzaXplUmUiLCJhZGRpdGlvblJlIiwic2Vzc2lvblN0b3JhZ2UiLCJNZWRpYSIsIm1lZGlhIiwidG9NZWRpYSIsImxlYWRlciIsImZpbGwiLCJjbHNXcmFwcGVyIiwiY2xzSGlkZSIsImF0dHJGaWxsIiwid3JhcHBlciIsImZsb29yIiwiQ29udGFpbmVyIiwiYWN0aXZlJDEiLCJNb2RhbCIsInNlbFBhbmVsIiwiZXNjQ2xvc2UiLCJiZ0Nsb3NlIiwic3RhY2siLCJvdmVybGF5IiwicGFuZWwiLCJ0cmFuc2l0aW9uRWxlbWVudCIsIm1vZGFsIiwiY2xzUGFnZSIsImFuaW1hdGUkMSIsIl9yZWplY3QiLCJvcGVuRGlhbG9nIiwidG1wbCIsImhpZGVGbiIsInN1Ym1pdEZuIiwibGFiZWxzIiwiZGlhbG9nIiwicmVzb2x2ZWQiLCJtZXNzYWdlIiwib2siLCJjb25maXJtIiwicHJvbXB0IiwibmF2IiwibmF2YmFyIiwiZHJvcGRvd24iLCJkcm9wYmFyIiwiZHJvcGJhck1vZGUiLCJkcm9wYmFyQW5jaG9yIiwiX2Ryb3BiYXIiLCJkcm9wZG93bnMiLCJnZXREcm9wZG93biIsImdldEFjdGl2ZSIsInRyYW5zaXRpb25UbyIsIm5ld0hlaWdodCIsIm9sZEhlaWdodCIsImNsaXAiLCJvZmZjYW52YXMiLCJjbHNDb250YWluZXIiLCJjbHNGbGlwIiwiY2xzQ29udGFpbmVyQW5pbWF0aW9uIiwiY2xzU2lkZWJhckFuaW1hdGlvbiIsImNsc01vZGUiLCJjbHNPdmVybGF5IiwidGFyZ2V0VG91Y2hlcyIsImdldFZpZXdwb3J0JDEiLCJ2aWV3cG9ydCIsImhlYWQiLCJvdmVyZmxvd0F1dG8iLCJzZWxDb250YWluZXIiLCJzZWxDb250ZW50IiwicmVzcG9uc2l2ZSIsInNjcm9sbFRvIiwiY2xpY2siLCJzY3JvbGxzcHkiLCJyZXBlYXQiLCJpblZpZXdDbGFzcyIsIl91a1Njcm9sbHNweVN0YXRlIiwicXVldWVkIiwic2Nyb2xsc3B5TmF2IiwibGlua3MiLCJzdGlja3kiLCJjbHNBY3RpdmUiLCJjbHNJbmFjdGl2ZSIsImNsc0ZpeGVkIiwiY2xzQmVsb3ciLCJzZWxUYXJnZXQiLCJ3aWR0aEVsZW1lbnQiLCJzaG93T25VcCIsInBsYWNlaG9sZGVyIiwiaXNGaXhlZCIsImxvY2F0aW9uIiwiZWxUb3AiLCJ0b3BPZmZzZXQiLCJib3R0b21PZmZzZXQiLCJwYXJzZVByb3AiLCJpbmFjdGl2ZSIsImxhc3RTY3JvbGwiLCJtYXJnaW5zIiwiaW5pdFRpbWVzdGFtcCIsImxhc3REaXIiLCJwZXJmb3JtYW5jZSIsImRpc2FibGVkIiwiaW5pdFNjcm9sbCIsInByb3BPZmZzZXQiLCJTd2l0Y2hlciIsInN3aXBpbmciLCJhdHRySXRlbSIsImNvbm5lY3RzIiwibGlzdCIsInRvZ2dsZXMiLCJ0YWIiLCJocmVmIiwiQWxlcnQiLCJDb3ZlciIsIkRyb3AiLCJEcm9wZG93biIsIkZvcm1DdXN0b20iLCJHaWYiLCJHcmlkIiwiSGVpZ2h0TWF0Y2giLCJIZWlnaHRWaWV3cG9ydCIsIkltZyIsIkxlYWRlciIsIk5hdiIsIk5hdmJhciIsIk9mZmNhbnZhcyIsIk92ZXJmbG93QXV0byIsIlJlc3BvbnNpdmUiLCJTY3JvbGwiLCJTY3JvbGxzcHkiLCJTY3JvbGxzcHlOYXYiLCJTdGlja3kiLCJTdmciLCJUYWIiLCJUb2dnbGUiLCJTbGlkZW5hdk5leHQiLCJTbGlkZW5hdlByZXZpb3VzIiwiU2VhcmNoSWNvbiIsIk1hcmtlciIsIk5hdmJhclRvZ2dsZUljb24iLCJPdmVybGF5SWNvbiIsIlBhZ2luYXRpb25OZXh0IiwiUGFnaW5hdGlvblByZXZpb3VzIiwiVG90b3AiLCJzdGFydGVkIiwibXV0YXRpb25zIiwibXV0YXRpb24iLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwiaSQxIiwiYXBwbHlDaGlsZExpc3QiLCJhcHBseUF0dHJpYnV0ZSIsImFwcGx5TXV0YXRpb24iLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY2hhcmFjdGVyRGF0YSIsImJvb3QiLCJjb3VudGRvd24iLCJkYXRlIiwiZGF5cyIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJ1bml0cyIsInVuaXQiLCJ0b3RhbCIsInRpbWVzcGFuIiwiZGlnaXRzIiwiZGlnaXQiLCJBbmltYXRlIiwiYWN0aW9uIiwic2hlZXQiLCJpbnNlcnRSdWxlIiwiY2hpbGRyZW4kMSIsInByb3BzRnJvbSIsIm9sZFNjcm9sbFkiLCJwcm9wc1RvIiwiZ2V0UG9zaXRpb25XaXRoTWFyZ2luIiwiZnJvbSIsImRpc3BsYXkiLCJ6SW5kZXgiLCJwb2ludGVyRXZlbnRzIiwiZmlsdGVyJDEiLCJzZWxBY3RpdmUiLCJ1cGRhdGVTdGF0ZSIsImFjdGl2ZXMiLCJvbGQiLCJsaXN0QSIsImxpc3RCIiwic2V0U3RhdGUiLCJtZXJnZVN0YXRlIiwiZ2V0U3RhdGUiLCJzdGF0ZUZpbHRlciIsInJlZl9zb3J0Iiwic3RhdGVTb3J0Iiwic3RhdGVPcmRlciIsImdldEZpbHRlciIsImdyb3VwIiwibWF0Y2hGaWx0ZXIiLCJnZXRTZWxlY3RvciIsImxvY2FsZUNvbXBhcmUiLCJudW1lcmljIiwic29ydEl0ZW1zIiwiZmlsdGVyQnkiLCJBbmltYXRpb25zIiwic2xpZGUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGVkIiwic2NhbGUzZCIsIkFuaW1hdGlvbnMkMSIsImZhZGUiLCJzY2FsZSIsInRyaWdnZXJVcGRhdGUiLCJTbGlkZXJBdXRvcGxheSIsImF1dG9wbGF5SW50ZXJ2YWwiLCJwYXVzZU9uSG92ZXIiLCJzdGFydEF1dG9wbGF5Iiwic3RvcEF1dG9wbGF5Iiwic2xpZGVzIiwiZHJhZ2dhYmxlIiwiU2xpZGVyRHJhZyIsInRocmVzaG9sZCIsInByZXZQb3MiLCJzZWxTbGlkZXMiLCJidXR0b24iLCJkcmFnIiwiX3RyYW5zaXRpb25lciIsImdldERpc3RhbmNlIiwiZHJhZ2dpbmciLCJwcmV2SW5kZXgiLCJtb3ZlIiwidW5iaW5kTW92ZSIsInZpc3VhbFZpZXdwb3J0IiwiZW5kIiwiZGlzdGFuY2UiLCJkaXMiLCJuZXh0SW5kZXgiLCJfZ2V0RGlzdGFuY2UiLCJpdGVtU2hvd24iLCJlZGdlIiwiX3RyYW5zbGF0ZSIsIl9zaG93IiwiZGlyQ2hhbmdlIiwidXNlclNlbGVjdCIsIlNsaWRlciIsInNlbE5hdiIsInNlbE5hdkl0ZW0iLCJuYXZJdGVtcyIsIm1heEluZGV4IiwidXBkYXRlTmF2IiwiZ2V0VmFsaWRJbmRleCIsImNsc0FjdGl2YXRlZCIsImVhc2luZyIsInZlbG9jaXR5IiwiVHJhbnNpdGlvbmVyIiwidHJhbnNpdGlvbk9wdGlvbnMiLCJzcGVlZFVwIiwic2VsTGlzdCIsIml0ZW1zaG93biIsInF1ZXVlSW5kZXgiLCJmb3J3YXJkIiwiZ2V0RGlyZWN0aW9uIiwiX2dldFRyYW5zaXRpb25lciIsInRyYW5zaXRpb25lciIsIlNsaWRlc2hvdyIsImxpbmVhciIsImJlZm9yZWl0ZW1zaG93IiwiaXRlbWhpZGRlbiIsIkxpZ2h0Ym94UGFuZWwiLCJkZWxheUNvbnRyb2xzIiwidmlkZW9BdXRvcGxheSIsInRlbXBsYXRlIiwic2VsQ2FwdGlvbiIsImNhcHRpb24iLCJzaG93Q29udHJvbHMiLCJoaWRlQ29udHJvbHMiLCJnZXRJdGVtIiwibG9hZEl0ZW0iLCJhbHQiLCJwb3N0ZXIiLCJzZXRJdGVtIiwiaWZyYW1lQXR0cnMiLCJmcmFtZWJvcmRlciIsImFsbG93IiwiYWxsb3dmdWxsc2NyZWVuIiwiY3JlYXRlRWwiLCJzZXRFcnJvciIsInZpZGVvIiwiY29udHJvbHMiLCJwbGF5c2lubGluZSIsImVuY29kZVVSSSIsIndpdGhDcmVkZW50aWFscyIsInJlZl9yZXNwb25zZSIsImdldFNsaWRlIiwiY2hpbGRFbGVtZW50Q291bnQiLCJjb250cm9sc1RpbWVyIiwidGFnIiwibGlnaHRib3giLCJMaWdodGJveCIsImxpZ2h0Ym94UGFuZWwiLCJ0b0l0ZW0iLCJub3RpZmljYXRpb24iLCJ0aW1lb3V0IiwiY2xzQ2xvc2UiLCJjbHNNc2ciLCJjbG9zZUFsbCIsIm1hcmdpblByb3AiLCJzdGFydFByb3BzIiwicmVtb3ZlRm4iLCJQYXJhbGxheCIsInByb3BlcnRpZXMiLCJiZ1BvcyIsImRpZmYiLCJpc0NvbG9yIiwiaXNDc3NQcm9wIiwic3RlcHMiLCJnZXRVbml0IiwiY29sb3IiLCJwYXJzZUNvbG9yIiwiY292ZXJzIiwiZG93biIsImJnUHJvcHMiLCJiZyIsImJhY2tncm91bmRTaXplIiwiX2ltYWdlIiwiZGltRWwiLCJkaW1JbWFnZSIsInNwYW4iLCJwb3NQZXJjZW50YWdlIiwiYmFja2dyb3VuZFJlcGVhdCIsImdldENzcyIsImdldFN0ZXAiLCJnZXRWYWx1ZSIsInBhcnNlSW50IiwiZ2V0T2Zmc2V0RWxlbWVudCIsImVhc2UiLCJTbGlkZXJSZWFjdGl2ZSIsImdldExlZnQiLCJjZW50ZXIiLCJnZXRFbExlZnQiLCJjZW50ZXJFbCIsImdldE1heCIsImdldFdpZHRoIiwidHJpZ2dlclVwZGF0ZSQxIiwic2xpZGVyIiwic2V0cyIsInRvIiwidXBkYXRlVHJhbnNsYXRlcyIsImdldEl0ZW1JbiIsImdldEFjdGl2ZXMiLCJzbGlkZUxlZnQiLCJhdmdXaWR0aCIsImxlZnRDZW50ZXIiLCJzbGlkZVdpZHRoIiwicmVvcmRlciIsIml0ZW1zaG93Iiwic2xpZGVJbmRleCIsInNsaWRlclBhcmFsbGF4Iiwic2VsSXRlbSIsInJlZl9kZXRhaWwiLCJnZXRDdXJyZW50IiwiaXNJbiIsInRyYWNrVGltZXIiLCJvYmokMSIsIkFuaW1hdGlvbnMkMiIsInB1bGwiLCJzbGlkZXNob3ciLCJtYXhIZWlnaHQiLCJzb3J0YWJsZSIsImNsc0l0ZW0iLCJjbHNQbGFjZWhvbGRlciIsImNsc0RyYWciLCJjbHNEcmFnU3RhdGUiLCJjbHNCYXNlIiwiY2xzTm9EcmFnIiwiY2xzRW1wdHkiLCJjbHNDdXN0b20iLCJoYW5kbGUiLCJ0Qm9kaWVzIiwiaGFuZGxlcyIsInRvdWNoQWN0aW9uIiwicmVmJDIiLCJyZWYkMyIsImVsZW1lbnRGcm9tUG9pbnQiLCJnZXRTb3J0YWJsZSIsInByZXZpb3VzIiwiaW5zZXJ0IiwidG91Y2hlZCIsImNsb25lIiwib3V0ZXJIVE1MIiwiYm94U2l6aW5nIiwidHJhY2tTY3JvbGwiLCJjbGFzc2VzIiwiaXNQcmVkZWNlc3NvciIsInRvb2x0aXAiLCJ0aXRsZSIsIl9oYXNUaXRsZSIsIl91bmJpbmQiLCJ1cGxvYWQiLCJjbHNEcmFnb3ZlciIsImNvbmN1cnJlbnQiLCJtYXhTaXplIiwibWltZSIsIm1zZ0ludmFsaWRNaW1lIiwibXNnSW52YWxpZE5hbWUiLCJtc2dJbnZhbGlkU2l6ZSIsInBhcmFtcyIsImFib3J0IiwiYmVmb3JlQWxsIiwiY29tcGxldGUiLCJjb21wbGV0ZUFsbCIsImVycm9yIiwiZmFpbCIsImxvYWRFbmQiLCJsb2FkU3RhcnQiLCJwcm9ncmVzcyIsImNoYW5nZSIsInRyYW5zZmVyIiwiZGF0YVRyYW5zZmVyIiwiZHJhZ2VudGVyIiwiZHJhZ292ZXIiLCJkcmFnbGVhdmUiLCJtYXRjaCQxIiwiY2h1bmtzIiwiY2h1bmsiLCJGb3JtRGF0YSIsImZpbGUiLCJwYXR0ZXJuIiwic3RvcFByb3BhZ2F0aW9uIiwiQ291bnRkb3duIiwiRmlsdGVyIiwiTm90aWZpY2F0aW9uIiwiU2xpZGVyUGFyYWxsYXgiLCJTbGlkZXNob3dQYXJhbGxheCIsIlNvcnRhYmxlIiwiVG9vbHRpcCIsIlVwbG9hZCIsImZhY3RvcnkiXSwibWFwcGluZ3MiOiI7O0FBR21FQSxVQUcxRCxlQUVEQyxFQUFlQyxPQUFPQyxVQUN0QkMsRUFBaUJILEVB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
